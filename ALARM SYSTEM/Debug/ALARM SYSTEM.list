
ALARM SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005210  08005210  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005210  08005210  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005210  08005210  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000080  0800529c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  0800529c  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119b5  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003291  00000000  00000000  00031a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00034cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00035ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb46  00000000  00000000  00036900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ddb  00000000  00000000  00053446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b18  00000000  00000000  00065221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5d39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004008  00000000  00000000  000f5d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ce4 	.word	0x08004ce4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004ce4 	.word	0x08004ce4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	4b60      	ldr	r3, [pc, #384]	; (80002f4 <MX_GPIO_Init+0x198>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a5f      	ldr	r2, [pc, #380]	; (80002f4 <MX_GPIO_Init+0x198>)
 8000176:	f043 0320 	orr.w	r3, r3, #32
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b5d      	ldr	r3, [pc, #372]	; (80002f4 <MX_GPIO_Init+0x198>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0320 	and.w	r3, r3, #32
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b5a      	ldr	r3, [pc, #360]	; (80002f4 <MX_GPIO_Init+0x198>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a59      	ldr	r2, [pc, #356]	; (80002f4 <MX_GPIO_Init+0x198>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b57      	ldr	r3, [pc, #348]	; (80002f4 <MX_GPIO_Init+0x198>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4b54      	ldr	r3, [pc, #336]	; (80002f4 <MX_GPIO_Init+0x198>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a53      	ldr	r2, [pc, #332]	; (80002f4 <MX_GPIO_Init+0x198>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b51      	ldr	r3, [pc, #324]	; (80002f4 <MX_GPIO_Init+0x198>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	21e0      	movs	r1, #224	; 0xe0
 80001bc:	484e      	ldr	r0, [pc, #312]	; (80002f8 <MX_GPIO_Init+0x19c>)
 80001be:	f001 ff78 	bl	80020b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_DISP_GPIO_Port, RST_DISP_Pin, GPIO_PIN_SET);
 80001c2:	2201      	movs	r2, #1
 80001c4:	2101      	movs	r1, #1
 80001c6:	484d      	ldr	r0, [pc, #308]	; (80002fc <MX_GPIO_Init+0x1a0>)
 80001c8:	f001 ff73 	bl	80020b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DISP_Pin|RC3_Pin|RC2_Pin|RC1_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f240 3182 	movw	r1, #898	; 0x382
 80001d2:	484a      	ldr	r0, [pc, #296]	; (80002fc <MX_GPIO_Init+0x1a0>)
 80001d4:	f001 ff6d 	bl	80020b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80001d8:	2303      	movs	r3, #3
 80001da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80001dc:	4b48      	ldr	r3, [pc, #288]	; (8000300 <MX_GPIO_Init+0x1a4>)
 80001de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001e0:	2301      	movs	r3, #1
 80001e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001e4:	f107 0310 	add.w	r3, r7, #16
 80001e8:	4619      	mov	r1, r3
 80001ea:	4843      	ldr	r0, [pc, #268]	; (80002f8 <MX_GPIO_Init+0x19c>)
 80001ec:	f001 fdc6 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ENC_ENT_Pin|MODE_PB_Pin;
 80001f0:	230c      	movs	r3, #12
 80001f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001f4:	4b43      	ldr	r3, [pc, #268]	; (8000304 <MX_GPIO_Init+0x1a8>)
 80001f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001fc:	f107 0310 	add.w	r3, r7, #16
 8000200:	4619      	mov	r1, r3
 8000202:	483d      	ldr	r0, [pc, #244]	; (80002f8 <MX_GPIO_Init+0x19c>)
 8000204:	f001 fdba 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_Pin;
 8000208:	2310      	movs	r3, #16
 800020a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800020c:	4b3d      	ldr	r3, [pc, #244]	; (8000304 <MX_GPIO_Init+0x1a8>)
 800020e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000210:	2302      	movs	r3, #2
 8000212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);
 8000214:	f107 0310 	add.w	r3, r7, #16
 8000218:	4619      	mov	r1, r3
 800021a:	4837      	ldr	r0, [pc, #220]	; (80002f8 <MX_GPIO_Init+0x19c>)
 800021c:	f001 fdae 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000220:	23e0      	movs	r3, #224	; 0xe0
 8000222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000224:	2301      	movs	r3, #1
 8000226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000228:	2300      	movs	r3, #0
 800022a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022c:	2302      	movs	r3, #2
 800022e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4830      	ldr	r0, [pc, #192]	; (80002f8 <MX_GPIO_Init+0x19c>)
 8000238:	f001 fda0 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = RST_DISP_Pin|LED_DISP_Pin|RC3_Pin|RC2_Pin
 800023c:	f240 3383 	movw	r3, #899	; 0x383
 8000240:	613b      	str	r3, [r7, #16]
                          |RC1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000242:	2301      	movs	r3, #1
 8000244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000246:	2300      	movs	r3, #0
 8000248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024a:	2302      	movs	r3, #2
 800024c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800024e:	f107 0310 	add.w	r3, r7, #16
 8000252:	4619      	mov	r1, r3
 8000254:	4829      	ldr	r0, [pc, #164]	; (80002fc <MX_GPIO_Init+0x1a0>)
 8000256:	f001 fd91 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ESC_PB_Pin|RST_PB_Pin;
 800025a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800025e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000260:	4b28      	ldr	r3, [pc, #160]	; (8000304 <MX_GPIO_Init+0x1a8>)
 8000262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000264:	2301      	movs	r3, #1
 8000266:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000268:	f107 0310 	add.w	r3, r7, #16
 800026c:	4619      	mov	r1, r3
 800026e:	4823      	ldr	r0, [pc, #140]	; (80002fc <MX_GPIO_Init+0x1a0>)
 8000270:	f001 fd84 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACTIVE_LOW_Pin;
 8000274:	2340      	movs	r3, #64	; 0x40
 8000276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000278:	2300      	movs	r3, #0
 800027a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800027c:	2301      	movs	r3, #1
 800027e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACTIVE_LOW_GPIO_Port, &GPIO_InitStruct);
 8000280:	f107 0310 	add.w	r3, r7, #16
 8000284:	4619      	mov	r1, r3
 8000286:	481d      	ldr	r0, [pc, #116]	; (80002fc <MX_GPIO_Init+0x1a0>)
 8000288:	f001 fd78 	bl	8001d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800028c:	2200      	movs	r2, #0
 800028e:	2100      	movs	r1, #0
 8000290:	2006      	movs	r0, #6
 8000292:	f001 fb3c 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000296:	2006      	movs	r0, #6
 8000298:	f001 fb55 	bl	8001946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800029c:	2200      	movs	r2, #0
 800029e:	2100      	movs	r1, #0
 80002a0:	2007      	movs	r0, #7
 80002a2:	f001 fb34 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80002a6:	2007      	movs	r0, #7
 80002a8:	f001 fb4d 	bl	8001946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2100      	movs	r1, #0
 80002b0:	2008      	movs	r0, #8
 80002b2:	f001 fb2c 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80002b6:	2008      	movs	r0, #8
 80002b8:	f001 fb45 	bl	8001946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80002bc:	2200      	movs	r2, #0
 80002be:	2100      	movs	r1, #0
 80002c0:	2009      	movs	r0, #9
 80002c2:	f001 fb24 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80002c6:	2009      	movs	r0, #9
 80002c8:	f001 fb3d 	bl	8001946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2100      	movs	r1, #0
 80002d0:	200a      	movs	r0, #10
 80002d2:	f001 fb1c 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fb35 	bl	8001946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002dc:	2200      	movs	r2, #0
 80002de:	2100      	movs	r1, #0
 80002e0:	2028      	movs	r0, #40	; 0x28
 80002e2:	f001 fb14 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002e6:	2028      	movs	r0, #40	; 0x28
 80002e8:	f001 fb2d 	bl	8001946 <HAL_NVIC_EnableIRQ>

}
 80002ec:	bf00      	nop
 80002ee:	3720      	adds	r7, #32
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40010800 	.word	0x40010800
 80002fc:	40010c00 	.word	0x40010c00
 8000300:	10310000 	.word	0x10310000
 8000304:	10110000 	.word	0x10110000

08000308 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_IWDG_Init+0x2c>)
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <MX_IWDG_Init+0x30>)
 8000310:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MX_IWDG_Init+0x2c>)
 8000314:	2200      	movs	r2, #0
 8000316:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_IWDG_Init+0x2c>)
 800031a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800031e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000320:	4804      	ldr	r0, [pc, #16]	; (8000334 <MX_IWDG_Init+0x2c>)
 8000322:	f001 fef7 	bl	8002114 <HAL_IWDG_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800032c:	f000 ff72 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	2000009c 	.word	0x2000009c
 8000338:	40003000 	.word	0x40003000

0800033c <_Z11progressBariiii>:

void drawHomePage(uint8_t state,  int percent);
void drawSettingsPage(uint8_t state);
void drawParameterPage(void);

void progressBar(int x, int y, int h, int percentage){
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
 8000348:	603b      	str	r3, [r7, #0]
	int l = 50;
 800034a:	2332      	movs	r3, #50	; 0x32
 800034c:	61fb      	str	r3, [r7, #28]
	char p[5];
	DrawRectangle(x, y, l, h);
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	b298      	uxth	r0, r3
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	b299      	uxth	r1, r3
 8000356:	69fb      	ldr	r3, [r7, #28]
 8000358:	b29a      	uxth	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	b29b      	uxth	r3, r3
 800035e:	f003 fac9 	bl	80038f4 <DrawRectangle>
	DrawFilledRectangle(x, y, (l*percentage)/100, h);
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	b298      	uxth	r0, r3
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	b299      	uxth	r1, r3
 800036a:	69fb      	ldr	r3, [r7, #28]
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	fb02 f303 	mul.w	r3, r2, r3
 8000372:	4a10      	ldr	r2, [pc, #64]	; (80003b4 <_Z11progressBariiii+0x78>)
 8000374:	fb82 c203 	smull	ip, r2, r2, r3
 8000378:	1152      	asrs	r2, r2, #5
 800037a:	17db      	asrs	r3, r3, #31
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	b29a      	uxth	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	b29b      	uxth	r3, r3
 8000384:	f003 fb40 	bl	8003a08 <DrawFilledRectangle>
	ST7920_SendString(x/16, l/8 + 1, p);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	2b00      	cmp	r3, #0
 800038c:	da00      	bge.n	8000390 <_Z11progressBariiii+0x54>
 800038e:	330f      	adds	r3, #15
 8000390:	111b      	asrs	r3, r3, #4
 8000392:	4618      	mov	r0, r3
 8000394:	69fb      	ldr	r3, [r7, #28]
 8000396:	2b00      	cmp	r3, #0
 8000398:	da00      	bge.n	800039c <_Z11progressBariiii+0x60>
 800039a:	3307      	adds	r3, #7
 800039c:	10db      	asrs	r3, r3, #3
 800039e:	3301      	adds	r3, #1
 80003a0:	f107 0214 	add.w	r2, r7, #20
 80003a4:	4619      	mov	r1, r3
 80003a6:	f003 f83f 	bl	8003428 <ST7920_SendString>
}
 80003aa:	bf00      	nop
 80003ac:	3720      	adds	r7, #32
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	51eb851f 	.word	0x51eb851f

080003b8 <_Z15Paramertes_Initv>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Paramertes_Init(void){
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

	//if memory is zero, Load
	//else init
	parameter[0].code = "Tdtct";
 80003bc:	4b19      	ldr	r3, [pc, #100]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 80003be:	4a1a      	ldr	r2, [pc, #104]	; (8000428 <_Z15Paramertes_Initv+0x70>)
 80003c0:	609a      	str	r2, [r3, #8]
	parameter[0].max = 7200;//2h min
 80003c2:	4b18      	ldr	r3, [pc, #96]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 80003c4:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80003c8:	605a      	str	r2, [r3, #4]
	parameter[0].min = 10;
 80003ca:	4b16      	ldr	r3, [pc, #88]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 80003cc:	220a      	movs	r2, #10
 80003ce:	601a      	str	r2, [r3, #0]
	parameter[0].rendering = 1;
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	829a      	strh	r2, [r3, #20]
	parameter[0].stepIncrease = 10;
 80003d6:	4b13      	ldr	r3, [pc, #76]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 80003d8:	220a      	movs	r2, #10
 80003da:	82da      	strh	r2, [r3, #22]
	parameter[0].unit = "sec";
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 80003de:	4a13      	ldr	r2, [pc, #76]	; (800042c <_Z15Paramertes_Initv+0x74>)
 80003e0:	611a      	str	r2, [r3, #16]
	parameter[0].value_milli = 60;
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 80003e4:	223c      	movs	r2, #60	; 0x3c
 80003e6:	60da      	str	r2, [r3, #12]


	parameter[1].code = "Twait";
 80003e8:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 80003ea:	4a11      	ldr	r2, [pc, #68]	; (8000430 <_Z15Paramertes_Initv+0x78>)
 80003ec:	621a      	str	r2, [r3, #32]
	parameter[1].max = 7200;
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 80003f0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80003f4:	61da      	str	r2, [r3, #28]
	parameter[1].min = 10;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 80003f8:	220a      	movs	r2, #10
 80003fa:	619a      	str	r2, [r3, #24]
	parameter[1].rendering = 1;
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 80003fe:	2201      	movs	r2, #1
 8000400:	859a      	strh	r2, [r3, #44]	; 0x2c
	parameter[1].stepIncrease = 10;
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 8000404:	220a      	movs	r2, #10
 8000406:	85da      	strh	r2, [r3, #46]	; 0x2e
	parameter[1].unit = "sec";
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 800040a:	4a08      	ldr	r2, [pc, #32]	; (800042c <_Z15Paramertes_Initv+0x74>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28
	parameter[1].value_milli = 60;
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 8000410:	223c      	movs	r2, #60	; 0x3c
 8000412:	625a      	str	r2, [r3, #36]	; 0x24



	currentParameter = &parameter[0];
 8000414:	4b07      	ldr	r3, [pc, #28]	; (8000434 <_Z15Paramertes_Initv+0x7c>)
 8000416:	4a03      	ldr	r2, [pc, #12]	; (8000424 <_Z15Paramertes_Initv+0x6c>)
 8000418:	601a      	str	r2, [r3, #0]
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	200000f0 	.word	0x200000f0
 8000428:	08004cfc 	.word	0x08004cfc
 800042c:	08004d04 	.word	0x08004d04
 8000430:	08004d08 	.word	0x08004d08
 8000434:	20000124 	.word	0x20000124

08000438 <_Z17DisplayManagementv>:
void DisplayManagement(){
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0

	//main screen
	//Menu display
	//parametere display
	if(clear_screen){
 800043e:	4b6e      	ldr	r3, [pc, #440]	; (80005f8 <_Z17DisplayManagementv+0x1c0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d006      	beq.n	8000454 <_Z17DisplayManagementv+0x1c>

		ST7920_Init();
 8000446:	f003 f93b 	bl	80036c0 <ST7920_Init>
		ST7920_Clear();
 800044a:	f003 f8f1 	bl	8003630 <ST7920_Clear>

		clear_screen = 0;
 800044e:	4b6a      	ldr	r3, [pc, #424]	; (80005f8 <_Z17DisplayManagementv+0x1c0>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
	}


	int  ptage =0;
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]

	if(initialTimeValue >0)
 8000458:	4b68      	ldr	r3, [pc, #416]	; (80005fc <_Z17DisplayManagementv+0x1c4>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d009      	beq.n	8000474 <_Z17DisplayManagementv+0x3c>
		ptage = remainingTimeValue*100/initialTimeValue;
 8000460:	4b67      	ldr	r3, [pc, #412]	; (8000600 <_Z17DisplayManagementv+0x1c8>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2264      	movs	r2, #100	; 0x64
 8000466:	fb03 f202 	mul.w	r2, r3, r2
 800046a:	4b64      	ldr	r3, [pc, #400]	; (80005fc <_Z17DisplayManagementv+0x1c4>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000472:	60fb      	str	r3, [r7, #12]

	//split time
	int hh = (remainingTimeValue/3600);
 8000474:	4b62      	ldr	r3, [pc, #392]	; (8000600 <_Z17DisplayManagementv+0x1c8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a62      	ldr	r2, [pc, #392]	; (8000604 <_Z17DisplayManagementv+0x1cc>)
 800047a:	fba2 2303 	umull	r2, r3, r2, r3
 800047e:	0adb      	lsrs	r3, r3, #11
 8000480:	60bb      	str	r3, [r7, #8]
	int mm = (remainingTimeValue%3600)/60;
 8000482:	4b5f      	ldr	r3, [pc, #380]	; (8000600 <_Z17DisplayManagementv+0x1c8>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	4b5f      	ldr	r3, [pc, #380]	; (8000604 <_Z17DisplayManagementv+0x1cc>)
 8000488:	fba3 1302 	umull	r1, r3, r3, r2
 800048c:	0adb      	lsrs	r3, r3, #11
 800048e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000492:	fb01 f303 	mul.w	r3, r1, r3
 8000496:	1ad3      	subs	r3, r2, r3
 8000498:	4a5b      	ldr	r2, [pc, #364]	; (8000608 <_Z17DisplayManagementv+0x1d0>)
 800049a:	fba2 2303 	umull	r2, r3, r2, r3
 800049e:	095b      	lsrs	r3, r3, #5
 80004a0:	607b      	str	r3, [r7, #4]

	int ss = (remainingTimeValue%3600)%60;
 80004a2:	4b57      	ldr	r3, [pc, #348]	; (8000600 <_Z17DisplayManagementv+0x1c8>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a57      	ldr	r2, [pc, #348]	; (8000604 <_Z17DisplayManagementv+0x1cc>)
 80004a8:	fba2 1203 	umull	r1, r2, r2, r3
 80004ac:	0ad2      	lsrs	r2, r2, #11
 80004ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80004b2:	fb01 f202 	mul.w	r2, r1, r2
 80004b6:	1a9a      	subs	r2, r3, r2
 80004b8:	4b53      	ldr	r3, [pc, #332]	; (8000608 <_Z17DisplayManagementv+0x1d0>)
 80004ba:	fba3 1302 	umull	r1, r3, r3, r2
 80004be:	0959      	lsrs	r1, r3, #5
 80004c0:	460b      	mov	r3, r1
 80004c2:	011b      	lsls	r3, r3, #4
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	1ad1      	subs	r1, r2, r3
 80004ca:	6039      	str	r1, [r7, #0]

	remainingTime[0] =d[hh/10];
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	4a4f      	ldr	r2, [pc, #316]	; (800060c <_Z17DisplayManagementv+0x1d4>)
 80004d0:	fb82 1203 	smull	r1, r2, r2, r3
 80004d4:	1092      	asrs	r2, r2, #2
 80004d6:	17db      	asrs	r3, r3, #31
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	4a4d      	ldr	r2, [pc, #308]	; (8000610 <_Z17DisplayManagementv+0x1d8>)
 80004dc:	5cd2      	ldrb	r2, [r2, r3]
 80004de:	4b4d      	ldr	r3, [pc, #308]	; (8000614 <_Z17DisplayManagementv+0x1dc>)
 80004e0:	701a      	strb	r2, [r3, #0]
	remainingTime[1] =d[hh%10];
 80004e2:	68b9      	ldr	r1, [r7, #8]
 80004e4:	4b49      	ldr	r3, [pc, #292]	; (800060c <_Z17DisplayManagementv+0x1d4>)
 80004e6:	fb83 2301 	smull	r2, r3, r3, r1
 80004ea:	109a      	asrs	r2, r3, #2
 80004ec:	17cb      	asrs	r3, r1, #31
 80004ee:	1ad2      	subs	r2, r2, r3
 80004f0:	4613      	mov	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	4413      	add	r3, r2
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	1aca      	subs	r2, r1, r3
 80004fa:	4b45      	ldr	r3, [pc, #276]	; (8000610 <_Z17DisplayManagementv+0x1d8>)
 80004fc:	5c9a      	ldrb	r2, [r3, r2]
 80004fe:	4b45      	ldr	r3, [pc, #276]	; (8000614 <_Z17DisplayManagementv+0x1dc>)
 8000500:	705a      	strb	r2, [r3, #1]
	remainingTime[2] =':';
 8000502:	4b44      	ldr	r3, [pc, #272]	; (8000614 <_Z17DisplayManagementv+0x1dc>)
 8000504:	223a      	movs	r2, #58	; 0x3a
 8000506:	709a      	strb	r2, [r3, #2]
	remainingTime[3] =d[mm/10];
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a40      	ldr	r2, [pc, #256]	; (800060c <_Z17DisplayManagementv+0x1d4>)
 800050c:	fb82 1203 	smull	r1, r2, r2, r3
 8000510:	1092      	asrs	r2, r2, #2
 8000512:	17db      	asrs	r3, r3, #31
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	4a3e      	ldr	r2, [pc, #248]	; (8000610 <_Z17DisplayManagementv+0x1d8>)
 8000518:	5cd2      	ldrb	r2, [r2, r3]
 800051a:	4b3e      	ldr	r3, [pc, #248]	; (8000614 <_Z17DisplayManagementv+0x1dc>)
 800051c:	70da      	strb	r2, [r3, #3]
	remainingTime[4] =d[mm%10];
 800051e:	6879      	ldr	r1, [r7, #4]
 8000520:	4b3a      	ldr	r3, [pc, #232]	; (800060c <_Z17DisplayManagementv+0x1d4>)
 8000522:	fb83 2301 	smull	r2, r3, r3, r1
 8000526:	109a      	asrs	r2, r3, #2
 8000528:	17cb      	asrs	r3, r1, #31
 800052a:	1ad2      	subs	r2, r2, r3
 800052c:	4613      	mov	r3, r2
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	1aca      	subs	r2, r1, r3
 8000536:	4b36      	ldr	r3, [pc, #216]	; (8000610 <_Z17DisplayManagementv+0x1d8>)
 8000538:	5c9a      	ldrb	r2, [r3, r2]
 800053a:	4b36      	ldr	r3, [pc, #216]	; (8000614 <_Z17DisplayManagementv+0x1dc>)
 800053c:	711a      	strb	r2, [r3, #4]
	remainingTime[5] =':';
 800053e:	4b35      	ldr	r3, [pc, #212]	; (8000614 <_Z17DisplayManagementv+0x1dc>)
 8000540:	223a      	movs	r2, #58	; 0x3a
 8000542:	715a      	strb	r2, [r3, #5]
	remainingTime[6] =d[ss/10];
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	4a31      	ldr	r2, [pc, #196]	; (800060c <_Z17DisplayManagementv+0x1d4>)
 8000548:	fb82 1203 	smull	r1, r2, r2, r3
 800054c:	1092      	asrs	r2, r2, #2
 800054e:	17db      	asrs	r3, r3, #31
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	4a2f      	ldr	r2, [pc, #188]	; (8000610 <_Z17DisplayManagementv+0x1d8>)
 8000554:	5cd2      	ldrb	r2, [r2, r3]
 8000556:	4b2f      	ldr	r3, [pc, #188]	; (8000614 <_Z17DisplayManagementv+0x1dc>)
 8000558:	719a      	strb	r2, [r3, #6]
	remainingTime[7] =d[ss%10];
 800055a:	6839      	ldr	r1, [r7, #0]
 800055c:	4b2b      	ldr	r3, [pc, #172]	; (800060c <_Z17DisplayManagementv+0x1d4>)
 800055e:	fb83 2301 	smull	r2, r3, r3, r1
 8000562:	109a      	asrs	r2, r3, #2
 8000564:	17cb      	asrs	r3, r1, #31
 8000566:	1ad2      	subs	r2, r2, r3
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	1aca      	subs	r2, r1, r3
 8000572:	4b27      	ldr	r3, [pc, #156]	; (8000610 <_Z17DisplayManagementv+0x1d8>)
 8000574:	5c9a      	ldrb	r2, [r3, r2]
 8000576:	4b27      	ldr	r3, [pc, #156]	; (8000614 <_Z17DisplayManagementv+0x1dc>)
 8000578:	71da      	strb	r2, [r3, #7]
	remainingTime[8] ='\0';
 800057a:	4b26      	ldr	r3, [pc, #152]	; (8000614 <_Z17DisplayManagementv+0x1dc>)
 800057c:	2200      	movs	r2, #0
 800057e:	721a      	strb	r2, [r3, #8]

	switch (MainMode_t) {
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <_Z17DisplayManagementv+0x1e0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b02      	cmp	r3, #2
 8000586:	d01e      	beq.n	80005c6 <_Z17DisplayManagementv+0x18e>
 8000588:	2b02      	cmp	r3, #2
 800058a:	dc31      	bgt.n	80005f0 <_Z17DisplayManagementv+0x1b8>
 800058c:	2b00      	cmp	r3, #0
 800058e:	d002      	beq.n	8000596 <_Z17DisplayManagementv+0x15e>
 8000590:	2b01      	cmp	r3, #1
 8000592:	d00b      	beq.n	80005ac <_Z17DisplayManagementv+0x174>
		}
		drawParameterPage();
		break;
	}

}
 8000594:	e02c      	b.n	80005f0 <_Z17DisplayManagementv+0x1b8>
		home_animation = (uint8_t)StateMode_t;
 8000596:	4b21      	ldr	r3, [pc, #132]	; (800061c <_Z17DisplayManagementv+0x1e4>)
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	4b21      	ldr	r3, [pc, #132]	; (8000620 <_Z17DisplayManagementv+0x1e8>)
 800059c:	701a      	strb	r2, [r3, #0]
		drawHomePage(home_animation,  ptage);
 800059e:	4b20      	ldr	r3, [pc, #128]	; (8000620 <_Z17DisplayManagementv+0x1e8>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	68f9      	ldr	r1, [r7, #12]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f9e3 	bl	8000970 <_Z12drawHomePagehi>
		break;
 80005aa:	e021      	b.n	80005f0 <_Z17DisplayManagementv+0x1b8>
		setting_animation = oJog.getCurrentEncoderValue();
 80005ac:	481d      	ldr	r0, [pc, #116]	; (8000624 <_Z17DisplayManagementv+0x1ec>)
 80005ae:	f003 fce7 	bl	8003f80 <_ZNK10BA_ENCODER22getCurrentEncoderValueEv>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <_Z17DisplayManagementv+0x1f0>)
 80005b8:	701a      	strb	r2, [r3, #0]
		drawSettingsPage(setting_animation);
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <_Z17DisplayManagementv+0x1f0>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 faa6 	bl	8000b10 <_Z16drawSettingsPageh>
		break;
 80005c4:	e014      	b.n	80005f0 <_Z17DisplayManagementv+0x1b8>
		holdParameterValue = oJog.getCurrentEncoderValue();
 80005c6:	4817      	ldr	r0, [pc, #92]	; (8000624 <_Z17DisplayManagementv+0x1ec>)
 80005c8:	f003 fcda 	bl	8003f80 <_ZNK10BA_ENCODER22getCurrentEncoderValueEv>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a17      	ldr	r2, [pc, #92]	; (800062c <_Z17DisplayManagementv+0x1f4>)
 80005d0:	6013      	str	r3, [r2, #0]
		if(holdParameterValue<currentParameter->min){
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <_Z17DisplayManagementv+0x1f8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <_Z17DisplayManagementv+0x1f4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d904      	bls.n	80005ea <_Z17DisplayManagementv+0x1b2>
			holdParameterValue = currentParameter->min;
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <_Z17DisplayManagementv+0x1f8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a11      	ldr	r2, [pc, #68]	; (800062c <_Z17DisplayManagementv+0x1f4>)
 80005e8:	6013      	str	r3, [r2, #0]
		drawParameterPage();
 80005ea:	f000 fb39 	bl	8000c60 <_Z17drawParameterPagev>
		break;
 80005ee:	bf00      	nop
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000150 	.word	0x20000150
 80005fc:	20000130 	.word	0x20000130
 8000600:	2000012c 	.word	0x2000012c
 8000604:	91a2b3c5 	.word	0x91a2b3c5
 8000608:	88888889 	.word	0x88888889
 800060c:	66666667 	.word	0x66666667
 8000610:	080051ac 	.word	0x080051ac
 8000614:	20000000 	.word	0x20000000
 8000618:	20000123 	.word	0x20000123
 800061c:	20000122 	.word	0x20000122
 8000620:	20000149 	.word	0x20000149
 8000624:	200000a8 	.word	0x200000a8
 8000628:	20000148 	.word	0x20000148
 800062c:	2000014c 	.word	0x2000014c
 8000630:	20000124 	.word	0x20000124

08000634 <_Z12StateMachinev>:
void StateMachine(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	//
	switch(StateMode_t){
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <_Z12StateMachinev+0x30>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b02      	cmp	r3, #2
 800063e:	d00c      	beq.n	800065a <_Z12StateMachinev+0x26>
 8000640:	2b02      	cmp	r3, #2
 8000642:	dc0d      	bgt.n	8000660 <_Z12StateMachinev+0x2c>
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <_Z12StateMachinev+0x1a>
 8000648:	2b01      	cmp	r3, #1
 800064a:	d003      	beq.n	8000654 <_Z12StateMachinev+0x20>
	case STATE_WAIT:
		WAIT();
		break;

	}
}
 800064c:	e008      	b.n	8000660 <_Z12StateMachinev+0x2c>
		RUN();
 800064e:	f000 f80b 	bl	8000668 <_Z3RUNv>
		break;
 8000652:	e005      	b.n	8000660 <_Z12StateMachinev+0x2c>
		ALARM();
 8000654:	f000 f848 	bl	80006e8 <_Z5ALARMv>
		break;
 8000658:	e002      	b.n	8000660 <_Z12StateMachinev+0x2c>
		WAIT();
 800065a:	f000 f877 	bl	800074c <_Z4WAITv>
		break;
 800065e:	bf00      	nop
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000122 	.word	0x20000122

08000668 <_Z3RUNv>:

void RUN(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	//ON the green LED
	if(!init_run){
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <_Z3RUNv+0x60>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d118      	bne.n	80006a6 <_Z3RUNv+0x3e>
		// light green lamp only when there is detection
		reinitVariables();
 8000674:	f000 f8c6 	bl	8000804 <_Z15reinitVariablesv>

		//state_Machine_presetTime = parameter[0].value_milli*1000;
		state_Machine_previousTime = currentTime();
 8000678:	f000 f930 	bl	80008dc <_Z11currentTimev>
 800067c:	4603      	mov	r3, r0
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <_Z3RUNv+0x64>)
 8000680:	6013      	str	r3, [r2, #0]
		initialTimeValue =  parameter[0].value_milli;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <_Z3RUNv+0x68>)
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <_Z3RUNv+0x6c>)
 8000688:	6013      	str	r3, [r2, #0]
		remainingTimeValue = initialTimeValue;
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <_Z3RUNv+0x6c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <_Z3RUNv+0x70>)
 8000690:	6013      	str	r3, [r2, #0]
		init_run = 1;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <_Z3RUNv+0x60>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]

		toFlashData[F_STATE] = 0;
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <_Z3RUNv+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
		save = 1;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <_Z3RUNv+0x78>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
			reinitVariables();
		}
	}


}
 80006a4:	e00d      	b.n	80006c2 <_Z3RUNv+0x5a>
		if(!remainingTimeValue ){
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <_Z3RUNv+0x70>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	bf0c      	ite	eq
 80006ae:	2301      	moveq	r3, #1
 80006b0:	2300      	movne	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d004      	beq.n	80006c2 <_Z3RUNv+0x5a>
			StateMode_t = STATE_ALARM;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <_Z3RUNv+0x7c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
			reinitVariables();
 80006be:	f000 f8a1 	bl	8000804 <_Z15reinitVariablesv>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000128 	.word	0x20000128
 80006cc:	2000013c 	.word	0x2000013c
 80006d0:	200000f0 	.word	0x200000f0
 80006d4:	20000130 	.word	0x20000130
 80006d8:	2000012c 	.word	0x2000012c
 80006dc:	20000154 	.word	0x20000154
 80006e0:	2000014a 	.word	0x2000014a
 80006e4:	20000122 	.word	0x20000122

080006e8 <_Z5ALARMv>:
void ALARM(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	if(!init_alarm){
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <_Z5ALARMv+0x4c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d11d      	bne.n	8000730 <_Z5ALARMv+0x48>

		reinitVariables();
 80006f4:	f000 f886 	bl	8000804 <_Z15reinitVariablesv>
		remainingTimeValue = 0;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <_Z5ALARMv+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
		init_alarm = 1;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <_Z5ALARMv+0x4c>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(RC2_GPIO_Port, RC2_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070a:	480c      	ldr	r0, [pc, #48]	; (800073c <_Z5ALARMv+0x54>)
 800070c:	f001 fcd1 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RC3_GPIO_Port, RC3_Pin, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <_Z5ALARMv+0x54>)
 8000716:	f001 fccc 	bl	80020b2 <HAL_GPIO_WritePin>
		state_Machine_previousTime = currentTime();
 800071a:	f000 f8df 	bl	80008dc <_Z11currentTimev>
 800071e:	4603      	mov	r3, r0
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <_Z5ALARMv+0x58>)
 8000722:	6013      	str	r3, [r2, #0]
		toFlashData[F_STATE] = 1;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <_Z5ALARMv+0x5c>)
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
		save = 1;
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <_Z5ALARMv+0x60>)
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
			state_Machine_previousTime = currentTime();
		}
	}*/


}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000129 	.word	0x20000129
 8000738:	2000012c 	.word	0x2000012c
 800073c:	40010c00 	.word	0x40010c00
 8000740:	2000013c 	.word	0x2000013c
 8000744:	20000154 	.word	0x20000154
 8000748:	2000014a 	.word	0x2000014a

0800074c <_Z4WAITv>:
void WAIT(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

	if(!init_wait){
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <_Z4WAITv+0x60>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d118      	bne.n	800078a <_Z4WAITv+0x3e>
		reinitVariables();
 8000758:	f000 f854 	bl	8000804 <_Z15reinitVariablesv>

		//HAL_GPIO_WritePin(RC2_GPIO_Port, RC2_Pin, GPIO_PIN_SET);
		//state_Machine_presetTime = parameter[1].value_milli*1000;
		initialTimeValue =  parameter[1].value_milli;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <_Z4WAITv+0x64>)
 800075e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000760:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <_Z4WAITv+0x68>)
 8000762:	6013      	str	r3, [r2, #0]
		remainingTimeValue = initialTimeValue;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <_Z4WAITv+0x68>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <_Z4WAITv+0x6c>)
 800076a:	6013      	str	r3, [r2, #0]
		init_wait = 1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <_Z4WAITv+0x60>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]

		toFlashData[F_STATE] = 2;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <_Z4WAITv+0x70>)
 8000774:	2202      	movs	r2, #2
 8000776:	601a      	str	r2, [r3, #0]
		save = 1;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <_Z4WAITv+0x74>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]

		state_Machine_previousTime = currentTime();
 800077e:	f000 f8ad 	bl	80008dc <_Z11currentTimev>
 8000782:	4603      	mov	r3, r0
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <_Z4WAITv+0x78>)
 8000786:	6013      	str	r3, [r2, #0]

			reinitVariables();
		}
	}

}
 8000788:	e00d      	b.n	80007a6 <_Z4WAITv+0x5a>
		if(!remainingTimeValue ){
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <_Z4WAITv+0x6c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	bf0c      	ite	eq
 8000792:	2301      	moveq	r3, #1
 8000794:	2300      	movne	r3, #0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d004      	beq.n	80007a6 <_Z4WAITv+0x5a>
			StateMode_t = STATE_RUN;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <_Z4WAITv+0x7c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
			reinitVariables();
 80007a2:	f000 f82f 	bl	8000804 <_Z15reinitVariablesv>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000012a 	.word	0x2000012a
 80007b0:	200000f0 	.word	0x200000f0
 80007b4:	20000130 	.word	0x20000130
 80007b8:	2000012c 	.word	0x2000012c
 80007bc:	20000154 	.word	0x20000154
 80007c0:	2000014a 	.word	0x2000014a
 80007c4:	2000013c 	.word	0x2000013c
 80007c8:	20000122 	.word	0x20000122

080007cc <_Z6detectv>:

void detect(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	// a detection of input will take any othe state to the runing state and reinitilize all times

	if(detected){
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <_Z6detectv+0x2c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00d      	beq.n	80007f4 <_Z6detectv+0x28>


		reinitVariables();
 80007d8:	f000 f814 	bl	8000804 <_Z15reinitVariablesv>

		HAL_GPIO_WritePin(RC1_GPIO_Port, RC1_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <_Z6detectv+0x30>)
 80007e4:	f001 fc65 	bl	80020b2 <HAL_GPIO_WritePin>
		StateMode_t = STATE_RUN;
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <_Z6detectv+0x34>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
		detected = 0;
 80007ee:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <_Z6detectv+0x2c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
	}
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000120 	.word	0x20000120
 80007fc:	40010c00 	.word	0x40010c00
 8000800:	20000122 	.word	0x20000122

08000804 <_Z15reinitVariablesv>:
void reinitVariables(){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RC1_GPIO_Port, RC1_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080e:	480f      	ldr	r0, [pc, #60]	; (800084c <_Z15reinitVariablesv+0x48>)
 8000810:	f001 fc4f 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RC2_GPIO_Port, RC2_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <_Z15reinitVariablesv+0x48>)
 800081c:	f001 fc49 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RC3_GPIO_Port, RC3_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2180      	movs	r1, #128	; 0x80
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <_Z15reinitVariablesv+0x48>)
 8000826:	f001 fc44 	bl	80020b2 <HAL_GPIO_WritePin>

	init_run = 0;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <_Z15reinitVariablesv+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
	init_alarm = 0;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <_Z15reinitVariablesv+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
	init_wait = 0;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <_Z15reinitVariablesv+0x54>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]

	state_Machine_previousTime = currentTime();
 800083c:	f000 f84e 	bl	80008dc <_Z11currentTimev>
 8000840:	4603      	mov	r3, r0
 8000842:	4a06      	ldr	r2, [pc, #24]	; (800085c <_Z15reinitVariablesv+0x58>)
 8000844:	6013      	str	r3, [r2, #0]

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40010c00 	.word	0x40010c00
 8000850:	20000128 	.word	0x20000128
 8000854:	20000129 	.word	0x20000129
 8000858:	2000012a 	.word	0x2000012a
 800085c:	2000013c 	.word	0x2000013c

08000860 <_Z19checkActivateScreenv>:
void checkActivateScreen(){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

	if(light_Display){
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <_Z19checkActivateScreenv+0x68>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	bf14      	ite	ne
 800086e:	2301      	movne	r3, #1
 8000870:	2300      	moveq	r3, #0
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d00f      	beq.n	8000898 <_Z19checkActivateScreenv+0x38>
		HAL_GPIO_WritePin(LED_DISP_GPIO_Port, LED_DISP_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2102      	movs	r1, #2
 800087c:	4813      	ldr	r0, [pc, #76]	; (80008cc <_Z19checkActivateScreenv+0x6c>)
 800087e:	f001 fc18 	bl	80020b2 <HAL_GPIO_WritePin>
		LCD_previousTime = currentTime();
 8000882:	f000 f82b 	bl	80008dc <_Z11currentTimev>
 8000886:	4603      	mov	r3, r0
 8000888:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <_Z19checkActivateScreenv+0x70>)
 800088a:	6013      	str	r3, [r2, #0]
		light_Display = 0;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <_Z19checkActivateScreenv+0x68>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
		light_Display_on = 1;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <_Z19checkActivateScreenv+0x74>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
	}
	if(  (currentTime() - LCD_previousTime) >= LCD_PRESET_TIME ){
 8000898:	f000 f820 	bl	80008dc <_Z11currentTimev>
 800089c:	4602      	mov	r2, r0
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <_Z19checkActivateScreenv+0x70>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <_Z19checkActivateScreenv+0x78>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	bf8c      	ite	hi
 80008aa:	2301      	movhi	r3, #1
 80008ac:	2300      	movls	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d007      	beq.n	80008c4 <_Z19checkActivateScreenv+0x64>
		HAL_GPIO_WritePin(LED_DISP_GPIO_Port, LED_DISP_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2102      	movs	r1, #2
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <_Z19checkActivateScreenv+0x6c>)
 80008ba:	f001 fbfa 	bl	80020b2 <HAL_GPIO_WritePin>
		light_Display_on = 0;
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <_Z19checkActivateScreenv+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
	}
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000134 	.word	0x20000134
 80008cc:	40010c00 	.word	0x40010c00
 80008d0:	20000140 	.word	0x20000140
 80008d4:	20000135 	.word	0x20000135
 80008d8:	0001d4bf 	.word	0x0001d4bf

080008dc <_Z11currentTimev>:

inline uint32_t currentTime(){
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
	return holdCurrenTimeCount;
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <_Z11currentTimev+0x10>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	20000138 	.word	0x20000138

080008f0 <_Z13logoAnimationv>:

void logoAnimation(){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	delay_init();
 80008f4:	f003 fa3a 	bl	8003d6c <delay_init>

	ST7920_Init();
 80008f8:	f002 fee2 	bl	80036c0 <ST7920_Init>

	ST7920_GraphicMode(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f002 fdd7 	bl	80034b0 <ST7920_GraphicMode>
	ST7920_DrawBitmap(bana_logo);
 8000902:	4817      	ldr	r0, [pc, #92]	; (8000960 <_Z13logoAnimationv+0x70>)
 8000904:	f002 fe04 	bl	8003510 <ST7920_DrawBitmap>
	HAL_Delay(1000);
 8000908:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800090c:	f000 ff04 	bl	8001718 <HAL_Delay>

	DrawFilledRectangle(0, 0, 128, 64);
 8000910:	2340      	movs	r3, #64	; 0x40
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	2100      	movs	r1, #0
 8000916:	2000      	movs	r0, #0
 8000918:	f003 f876 	bl	8003a08 <DrawFilledRectangle>
	ST7920_Update();
 800091c:	f002 fe72 	bl	8003604 <ST7920_Update>
	HAL_Delay(70);
 8000920:	2046      	movs	r0, #70	; 0x46
 8000922:	f000 fef9 	bl	8001718 <HAL_Delay>
	ST7920_GraphicMode(0);
 8000926:	2000      	movs	r0, #0
 8000928:	f002 fdc2 	bl	80034b0 <ST7920_GraphicMode>
	ST7920_SendString(1,1, "L'INNOVATION");
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <_Z13logoAnimationv+0x74>)
 800092e:	2101      	movs	r1, #1
 8000930:	2001      	movs	r0, #1
 8000932:	f002 fd79 	bl	8003428 <ST7920_SendString>
	ST7920_SendString(2,0, "N'A PAS DE FREIN");
 8000936:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <_Z13logoAnimationv+0x78>)
 8000938:	2100      	movs	r1, #0
 800093a:	2002      	movs	r0, #2
 800093c:	f002 fd74 	bl	8003428 <ST7920_SendString>
	ST7920_scroll(3, "www.banaafrica.com", 1, 150);
 8000940:	2396      	movs	r3, #150	; 0x96
 8000942:	2201      	movs	r2, #1
 8000944:	4909      	ldr	r1, [pc, #36]	; (800096c <_Z13logoAnimationv+0x7c>)
 8000946:	2003      	movs	r0, #3
 8000948:	f003 f8bc 	bl	8003ac4 <ST7920_scroll>
	HAL_Delay(70);
 800094c:	2046      	movs	r0, #70	; 0x46
 800094e:	f000 fee3 	bl	8001718 <HAL_Delay>
	ST7920_Clear();
 8000952:	f002 fe6d 	bl	8003630 <ST7920_Clear>
	HAL_Delay(100);
 8000956:	2064      	movs	r0, #100	; 0x64
 8000958:	f000 fede 	bl	8001718 <HAL_Delay>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	08004dac 	.word	0x08004dac
 8000964:	08004d10 	.word	0x08004d10
 8000968:	08004d20 	.word	0x08004d20
 800096c:	08004d34 	.word	0x08004d34

08000970 <_Z12drawHomePagehi>:

void drawHomePage(uint8_t state, int percent){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
	// 1- draw backbone

	ST7920_ClearBuffer();
 800097c:	f002 fe4c 	bl	8003618 <ST7920_ClearBuffer>
	ST7920_GraphicMode(1);
 8000980:	2001      	movs	r0, #1
 8000982:	f002 fd95 	bl	80034b0 <ST7920_GraphicMode>

	//draw low rectangles
	DrawFilledRectangle(0, 48, 40, 15);
 8000986:	230f      	movs	r3, #15
 8000988:	2228      	movs	r2, #40	; 0x28
 800098a:	2130      	movs	r1, #48	; 0x30
 800098c:	2000      	movs	r0, #0
 800098e:	f003 f83b 	bl	8003a08 <DrawFilledRectangle>
	DrawFilledRectangle(44, 48, 40, 15);
 8000992:	230f      	movs	r3, #15
 8000994:	2228      	movs	r2, #40	; 0x28
 8000996:	2130      	movs	r1, #48	; 0x30
 8000998:	202c      	movs	r0, #44	; 0x2c
 800099a:	f003 f835 	bl	8003a08 <DrawFilledRectangle>
	DrawFilledRectangle(87, 48, 40, 15);
 800099e:	230f      	movs	r3, #15
 80009a0:	2228      	movs	r2, #40	; 0x28
 80009a2:	2130      	movs	r1, #48	; 0x30
 80009a4:	2057      	movs	r0, #87	; 0x57
 80009a6:	f003 f82f 	bl	8003a08 <DrawFilledRectangle>

	DrawLine(87, 0, 87, 47);// vertical line
 80009aa:	232f      	movs	r3, #47	; 0x2f
 80009ac:	2257      	movs	r2, #87	; 0x57
 80009ae:	2100      	movs	r1, #0
 80009b0:	2057      	movs	r0, #87	; 0x57
 80009b2:	f002 ff2f 	bl	8003814 <DrawLine>

	DrawLine(87, 15, 127, 15);// H line 1
 80009b6:	230f      	movs	r3, #15
 80009b8:	227f      	movs	r2, #127	; 0x7f
 80009ba:	210f      	movs	r1, #15
 80009bc:	2057      	movs	r0, #87	; 0x57
 80009be:	f002 ff29 	bl	8003814 <DrawLine>
	DrawLine(87, 31, 127, 31);// H line 2
 80009c2:	231f      	movs	r3, #31
 80009c4:	227f      	movs	r2, #127	; 0x7f
 80009c6:	211f      	movs	r1, #31
 80009c8:	2057      	movs	r0, #87	; 0x57
 80009ca:	f002 ff23 	bl	8003814 <DrawLine>

	DrawLine(0, 0, 0, 47);// vertical line2
 80009ce:	232f      	movs	r3, #47	; 0x2f
 80009d0:	2200      	movs	r2, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	2000      	movs	r0, #0
 80009d6:	f002 ff1d 	bl	8003814 <DrawLine>
	DrawLine(86, 0, 86, 47);// vertical line3
 80009da:	232f      	movs	r3, #47	; 0x2f
 80009dc:	2256      	movs	r2, #86	; 0x56
 80009de:	2100      	movs	r1, #0
 80009e0:	2056      	movs	r0, #86	; 0x56
 80009e2:	f002 ff17 	bl	8003814 <DrawLine>

	DrawLine(0, 0, 127,0);// H line 3
 80009e6:	2300      	movs	r3, #0
 80009e8:	227f      	movs	r2, #127	; 0x7f
 80009ea:	2100      	movs	r1, #0
 80009ec:	2000      	movs	r0, #0
 80009ee:	f002 ff11 	bl	8003814 <DrawLine>
	DrawLine(0, 47, 86, 47);// H line 4
 80009f2:	232f      	movs	r3, #47	; 0x2f
 80009f4:	2256      	movs	r2, #86	; 0x56
 80009f6:	212f      	movs	r1, #47	; 0x2f
 80009f8:	2000      	movs	r0, #0
 80009fa:	f002 ff0b 	bl	8003814 <DrawLine>


	// 2- make right state

	if (state%3==0){
 80009fe:	79fa      	ldrb	r2, [r7, #7]
 8000a00:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <_Z12drawHomePagehi+0x178>)
 8000a02:	fba3 1302 	umull	r1, r3, r3, r2
 8000a06:	0859      	lsrs	r1, r3, #1
 8000a08:	460b      	mov	r3, r1
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	440b      	add	r3, r1
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d106      	bne.n	8000a24 <_Z12drawHomePagehi+0xb4>
		DrawFilledRectangle(87, 0, 42, 15);
 8000a16:	230f      	movs	r3, #15
 8000a18:	222a      	movs	r2, #42	; 0x2a
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2057      	movs	r0, #87	; 0x57
 8000a1e:	f002 fff3 	bl	8003a08 <DrawFilledRectangle>
 8000a22:	e024      	b.n	8000a6e <_Z12drawHomePagehi+0xfe>
	}
	else if(state%3 == 1){
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <_Z12drawHomePagehi+0x178>)
 8000a28:	fba3 1302 	umull	r1, r3, r3, r2
 8000a2c:	0859      	lsrs	r1, r3, #1
 8000a2e:	460b      	mov	r3, r1
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	440b      	add	r3, r1
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d106      	bne.n	8000a4a <_Z12drawHomePagehi+0xda>
		DrawFilledRectangle(87, 16, 42, 15);
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	222a      	movs	r2, #42	; 0x2a
 8000a40:	2110      	movs	r1, #16
 8000a42:	2057      	movs	r0, #87	; 0x57
 8000a44:	f002 ffe0 	bl	8003a08 <DrawFilledRectangle>
 8000a48:	e011      	b.n	8000a6e <_Z12drawHomePagehi+0xfe>
	}
	else if(state%3 == 2){
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <_Z12drawHomePagehi+0x178>)
 8000a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a52:	0859      	lsrs	r1, r3, #1
 8000a54:	460b      	mov	r3, r1
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	440b      	add	r3, r1
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d105      	bne.n	8000a6e <_Z12drawHomePagehi+0xfe>
		DrawFilledRectangle(87, 31, 42, 15);
 8000a62:	230f      	movs	r3, #15
 8000a64:	222a      	movs	r2, #42	; 0x2a
 8000a66:	211f      	movs	r1, #31
 8000a68:	2057      	movs	r0, #87	; 0x57
 8000a6a:	f002 ffcd 	bl	8003a08 <DrawFilledRectangle>
	}

	//progress bar
	progressBar(5, 35, 8, percent);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	2208      	movs	r2, #8
 8000a72:	2123      	movs	r1, #35	; 0x23
 8000a74:	2005      	movs	r0, #5
 8000a76:	f7ff fc61 	bl	800033c <_Z11progressBariiii>

	ST7920_Update();
 8000a7a:	f002 fdc3 	bl	8003604 <ST7920_Update>

	// 3- put text

	ST7920_GraphicMode(0);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f002 fd16 	bl	80034b0 <ST7920_GraphicMode>
	ST7920_SendString(0,0, "Time Left" );//CDT: count Down Time
 8000a84:	4a19      	ldr	r2, [pc, #100]	; (8000aec <_Z12drawHomePagehi+0x17c>)
 8000a86:	2100      	movs	r1, #0
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f002 fccd 	bl	8003428 <ST7920_SendString>
	//clear
	ST7920_SendString(1,0, "                ");
 8000a8e:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <_Z12drawHomePagehi+0x180>)
 8000a90:	2100      	movs	r1, #0
 8000a92:	2001      	movs	r0, #1
 8000a94:	f002 fcc8 	bl	8003428 <ST7920_SendString>
	ST7920_SendString(1,0, remainingTime);
 8000a98:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <_Z12drawHomePagehi+0x184>)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f002 fcc3 	bl	8003428 <ST7920_SendString>


	ST7920_SendString(0,6, "RUN");
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <_Z12drawHomePagehi+0x188>)
 8000aa4:	2106      	movs	r1, #6
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f002 fcbe 	bl	8003428 <ST7920_SendString>
	ST7920_SendString(1,6, "ALRM");
 8000aac:	4a13      	ldr	r2, [pc, #76]	; (8000afc <_Z12drawHomePagehi+0x18c>)
 8000aae:	2106      	movs	r1, #6
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f002 fcb9 	bl	8003428 <ST7920_SendString>
	ST7920_SendString(2,6, "WAIT");
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <_Z12drawHomePagehi+0x190>)
 8000ab8:	2106      	movs	r1, #6
 8000aba:	2002      	movs	r0, #2
 8000abc:	f002 fcb4 	bl	8003428 <ST7920_SendString>

	//give possible actions
	ST7920_SendString(3,0, "MENU");
 8000ac0:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <_Z12drawHomePagehi+0x194>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f002 fcaf 	bl	8003428 <ST7920_SendString>
	ST7920_SendString(3,3, "RST");
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <_Z12drawHomePagehi+0x198>)
 8000acc:	2103      	movs	r1, #3
 8000ace:	2003      	movs	r0, #3
 8000ad0:	f002 fcaa 	bl	8003428 <ST7920_SendString>
	ST7920_SendString(3,6, "ESC");
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <_Z12drawHomePagehi+0x19c>)
 8000ad6:	2106      	movs	r1, #6
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f002 fca5 	bl	8003428 <ST7920_SendString>

}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	aaaaaaab 	.word	0xaaaaaaab
 8000aec:	08004d48 	.word	0x08004d48
 8000af0:	08004d54 	.word	0x08004d54
 8000af4:	20000000 	.word	0x20000000
 8000af8:	08004d68 	.word	0x08004d68
 8000afc:	08004d6c 	.word	0x08004d6c
 8000b00:	08004d74 	.word	0x08004d74
 8000b04:	08004d7c 	.word	0x08004d7c
 8000b08:	08004d84 	.word	0x08004d84
 8000b0c:	08004d88 	.word	0x08004d88

08000b10 <_Z16drawSettingsPageh>:
void drawSettingsPage(uint8_t state){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	// 1- draw backbone
	//ST7920_Init();
	//ST7920_Clear();

	ST7920_ClearBuffer();
 8000b1a:	f002 fd7d 	bl	8003618 <ST7920_ClearBuffer>
	ST7920_GraphicMode(1);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f002 fcc6 	bl	80034b0 <ST7920_GraphicMode>

	DrawRectangle(0, 0, 127, 63);
 8000b24:	233f      	movs	r3, #63	; 0x3f
 8000b26:	227f      	movs	r2, #127	; 0x7f
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f002 fee2 	bl	80038f4 <DrawRectangle>
	DrawRectangle(0, 0, 127, 14);
 8000b30:	230e      	movs	r3, #14
 8000b32:	227f      	movs	r2, #127	; 0x7f
 8000b34:	2100      	movs	r1, #0
 8000b36:	2000      	movs	r0, #0
 8000b38:	f002 fedc 	bl	80038f4 <DrawRectangle>

	//draw low rectangles
	DrawRectangle(0, 48, 40, 15);
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	2228      	movs	r2, #40	; 0x28
 8000b40:	2130      	movs	r1, #48	; 0x30
 8000b42:	2000      	movs	r0, #0
 8000b44:	f002 fed6 	bl	80038f4 <DrawRectangle>
	DrawRectangle(44, 48, 40, 15);
 8000b48:	230f      	movs	r3, #15
 8000b4a:	2228      	movs	r2, #40	; 0x28
 8000b4c:	2130      	movs	r1, #48	; 0x30
 8000b4e:	202c      	movs	r0, #44	; 0x2c
 8000b50:	f002 fed0 	bl	80038f4 <DrawRectangle>
	DrawRectangle(87, 48, 40, 15);
 8000b54:	230f      	movs	r3, #15
 8000b56:	2228      	movs	r2, #40	; 0x28
 8000b58:	2130      	movs	r1, #48	; 0x30
 8000b5a:	2057      	movs	r0, #87	; 0x57
 8000b5c:	f002 feca 	bl	80038f4 <DrawRectangle>


	// 2- make right state
	if(state%2 == 0){
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d106      	bne.n	8000b78 <_Z16drawSettingsPageh+0x68>
		DrawFilledRectangle(0, 16, 127, 15);
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	227f      	movs	r2, #127	; 0x7f
 8000b6e:	2110      	movs	r1, #16
 8000b70:	2000      	movs	r0, #0
 8000b72:	f002 ff49 	bl	8003a08 <DrawFilledRectangle>
 8000b76:	e00a      	b.n	8000b8e <_Z16drawSettingsPageh+0x7e>
	}
	else if(state%2 == 1){
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d005      	beq.n	8000b8e <_Z16drawSettingsPageh+0x7e>
		DrawFilledRectangle(0, 32, 127, 15);
 8000b82:	230f      	movs	r3, #15
 8000b84:	227f      	movs	r2, #127	; 0x7f
 8000b86:	2120      	movs	r1, #32
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f002 ff3d 	bl	8003a08 <DrawFilledRectangle>
	}

	ST7920_Update();
 8000b8e:	f002 fd39 	bl	8003604 <ST7920_Update>


	// 3- put text
	ST7920_GraphicMode(0);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f002 fc8c 	bl	80034b0 <ST7920_GraphicMode>
	char line1[6];
	char line2[6];
	char line3[5];


	sprintf(line1, "%s", parameter[0].code);
 8000b98:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <_Z16drawSettingsPageh+0x134>)
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	4929      	ldr	r1, [pc, #164]	; (8000c48 <_Z16drawSettingsPageh+0x138>)
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 fd10 	bl	80045c8 <siprintf>
	sprintf(line2, "%s", parameter[1].code);
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <_Z16drawSettingsPageh+0x134>)
 8000baa:	6a1a      	ldr	r2, [r3, #32]
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4925      	ldr	r1, [pc, #148]	; (8000c48 <_Z16drawSettingsPageh+0x138>)
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fd08 	bl	80045c8 <siprintf>

	sprintf(line3, "%lu", parameter[state%2].value_milli);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 0201 	and.w	r2, r3, #1
 8000bbe:	4921      	ldr	r1, [pc, #132]	; (8000c44 <_Z16drawSettingsPageh+0x134>)
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	440b      	add	r3, r1
 8000bca:	330c      	adds	r3, #12
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	491e      	ldr	r1, [pc, #120]	; (8000c4c <_Z16drawSettingsPageh+0x13c>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fcf7 	bl	80045c8 <siprintf>

	ST7920_SendString(0,2,"SETTINGS");
 8000bda:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <_Z16drawSettingsPageh+0x140>)
 8000bdc:	2102      	movs	r1, #2
 8000bde:	2000      	movs	r0, #0
 8000be0:	f002 fc22 	bl	8003428 <ST7920_SendString>

	//clear lines
	ST7920_SendString(1,0, "                ");
 8000be4:	4a1b      	ldr	r2, [pc, #108]	; (8000c54 <_Z16drawSettingsPageh+0x144>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	2001      	movs	r0, #1
 8000bea:	f002 fc1d 	bl	8003428 <ST7920_SendString>
	ST7920_SendString(2,0, "                ");
 8000bee:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <_Z16drawSettingsPageh+0x144>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	f002 fc18 	bl	8003428 <ST7920_SendString>

	ST7920_SendString(1,0, line1);
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2001      	movs	r0, #1
 8000c02:	f002 fc11 	bl	8003428 <ST7920_SendString>
	ST7920_SendString(2,0, line2);
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f002 fc0a 	bl	8003428 <ST7920_SendString>
	ST7920_SendString((state%2 + 1),4, line3);
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	f107 0208 	add.w	r2, r7, #8
 8000c20:	2104      	movs	r1, #4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 fc00 	bl	8003428 <ST7920_SendString>


	//give possible actions
	ST7920_SendString(3,3, "ENT");
 8000c28:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <_Z16drawSettingsPageh+0x148>)
 8000c2a:	2103      	movs	r1, #3
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f002 fbfb 	bl	8003428 <ST7920_SendString>
	ST7920_SendString(3,6, "ESC");
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <_Z16drawSettingsPageh+0x14c>)
 8000c34:	2106      	movs	r1, #6
 8000c36:	2003      	movs	r0, #3
 8000c38:	f002 fbf6 	bl	8003428 <ST7920_SendString>
}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000f0 	.word	0x200000f0
 8000c48:	08004d8c 	.word	0x08004d8c
 8000c4c:	08004d90 	.word	0x08004d90
 8000c50:	08004d94 	.word	0x08004d94
 8000c54:	08004d54 	.word	0x08004d54
 8000c58:	08004da0 	.word	0x08004da0
 8000c5c:	08004d88 	.word	0x08004d88

08000c60 <_Z17drawParameterPagev>:
void drawParameterPage(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0


	//1-
	//ST7920_Init();
	//ST7920_Clear();
	ST7920_ClearBuffer();
 8000c66:	f002 fcd7 	bl	8003618 <ST7920_ClearBuffer>
	ST7920_GraphicMode(1);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f002 fc20 	bl	80034b0 <ST7920_GraphicMode>

	DrawFilledRectangle(0, 0, 127, 15);
 8000c70:	230f      	movs	r3, #15
 8000c72:	227f      	movs	r2, #127	; 0x7f
 8000c74:	2100      	movs	r1, #0
 8000c76:	2000      	movs	r0, #0
 8000c78:	f002 fec6 	bl	8003a08 <DrawFilledRectangle>
	DrawRectangle(0, 0, 127, 63);
 8000c7c:	233f      	movs	r3, #63	; 0x3f
 8000c7e:	227f      	movs	r2, #127	; 0x7f
 8000c80:	2100      	movs	r1, #0
 8000c82:	2000      	movs	r0, #0
 8000c84:	f002 fe36 	bl	80038f4 <DrawRectangle>


	//draw low rectangles
	if(!save){
 8000c88:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <_Z17drawParameterPagev+0x108>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d112      	bne.n	8000cb6 <_Z17drawParameterPagev+0x56>
		DrawFilledRectangle(0, 48, 40, 15);
 8000c90:	230f      	movs	r3, #15
 8000c92:	2228      	movs	r2, #40	; 0x28
 8000c94:	2130      	movs	r1, #48	; 0x30
 8000c96:	2000      	movs	r0, #0
 8000c98:	f002 feb6 	bl	8003a08 <DrawFilledRectangle>
		DrawFilledRectangle(44, 48, 40, 15);
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	2228      	movs	r2, #40	; 0x28
 8000ca0:	2130      	movs	r1, #48	; 0x30
 8000ca2:	202c      	movs	r0, #44	; 0x2c
 8000ca4:	f002 feb0 	bl	8003a08 <DrawFilledRectangle>
		DrawFilledRectangle(87, 48, 40, 15);
 8000ca8:	230f      	movs	r3, #15
 8000caa:	2228      	movs	r2, #40	; 0x28
 8000cac:	2130      	movs	r1, #48	; 0x30
 8000cae:	2057      	movs	r0, #87	; 0x57
 8000cb0:	f002 feaa 	bl	8003a08 <DrawFilledRectangle>
 8000cb4:	e005      	b.n	8000cc2 <_Z17drawParameterPagev+0x62>
	}
	else{
		DrawFilledRectangle(0, 48, 127, 15);
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	227f      	movs	r2, #127	; 0x7f
 8000cba:	2130      	movs	r1, #48	; 0x30
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f002 fea3 	bl	8003a08 <DrawFilledRectangle>
	}


	ST7920_Update();
 8000cc2:	f002 fc9f 	bl	8003604 <ST7920_Update>

	//2-
	ST7920_GraphicMode(0);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f002 fbf2 	bl	80034b0 <ST7920_GraphicMode>

	char line1[6];
	char line2[5];
	char line3[4];

	sprintf(line1, "%s", currentParameter->code);
 8000ccc:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <_Z17drawParameterPagev+0x10c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4926      	ldr	r1, [pc, #152]	; (8000d70 <_Z17drawParameterPagev+0x110>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fc75 	bl	80045c8 <siprintf>
	sprintf(line2, "%lu", holdParameterValue);
 8000cde:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <_Z17drawParameterPagev+0x114>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	4924      	ldr	r1, [pc, #144]	; (8000d78 <_Z17drawParameterPagev+0x118>)
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 fc6d 	bl	80045c8 <siprintf>
	sprintf(line3, "%s", currentParameter->unit);
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <_Z17drawParameterPagev+0x10c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	491e      	ldr	r1, [pc, #120]	; (8000d70 <_Z17drawParameterPagev+0x110>)
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fc65 	bl	80045c8 <siprintf>

	//clear
	ST7920_SendString(1,0, "                ");
 8000cfe:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <_Z17drawParameterPagev+0x11c>)
 8000d00:	2100      	movs	r1, #0
 8000d02:	2001      	movs	r0, #1
 8000d04:	f002 fb90 	bl	8003428 <ST7920_SendString>

	ST7920_SendString(0,3, line1);
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	2103      	movs	r1, #3
 8000d10:	2000      	movs	r0, #0
 8000d12:	f002 fb89 	bl	8003428 <ST7920_SendString>
	ST7920_SendString(1,0, line2);
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f002 fb82 	bl	8003428 <ST7920_SendString>
	ST7920_SendString(2,0, line3);
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	461a      	mov	r2, r3
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f002 fb7c 	bl	8003428 <ST7920_SendString>

	if(!save){
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <_Z17drawParameterPagev+0x108>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10a      	bne.n	8000d4e <_Z17drawParameterPagev+0xee>
		//give possible actions
		ST7920_SendString(3,3, "ENT");
 8000d38:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <_Z17drawParameterPagev+0x120>)
 8000d3a:	2103      	movs	r1, #3
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f002 fb73 	bl	8003428 <ST7920_SendString>
		ST7920_SendString(3,6, "ESC");
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <_Z17drawParameterPagev+0x124>)
 8000d44:	2106      	movs	r1, #6
 8000d46:	2003      	movs	r0, #3
 8000d48:	f002 fb6e 	bl	8003428 <ST7920_SendString>
		HAL_Delay(500);

	}


}
 8000d4c:	e008      	b.n	8000d60 <_Z17drawParameterPagev+0x100>
		ST7920_SendString(3,2, "SAVED");
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <_Z17drawParameterPagev+0x128>)
 8000d50:	2102      	movs	r1, #2
 8000d52:	2003      	movs	r0, #3
 8000d54:	f002 fb68 	bl	8003428 <ST7920_SendString>
		HAL_Delay(500);
 8000d58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d5c:	f000 fcdc 	bl	8001718 <HAL_Delay>
}
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000014a 	.word	0x2000014a
 8000d6c:	20000124 	.word	0x20000124
 8000d70:	08004d8c 	.word	0x08004d8c
 8000d74:	2000014c 	.word	0x2000014c
 8000d78:	08004d90 	.word	0x08004d90
 8000d7c:	08004d54 	.word	0x08004d54
 8000d80:	08004da0 	.word	0x08004da0
 8000d84:	08004d88 	.word	0x08004d88
 8000d88:	08004da4 	.word	0x08004da4

08000d8c <_Z12Encoder_Initv>:

void Encoder_Init(){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8

	/* Init interface Encoder Begin*/
	oJog.initEncoder(ENC_A_GPIO_Port, ENC_A_Pin, ENC_B_GPIO_Port,ENC_B_Pin);
 8000d92:	2302      	movs	r3, #2
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <_Z12Encoder_Initv+0x40>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	490c      	ldr	r1, [pc, #48]	; (8000dcc <_Z12Encoder_Initv+0x40>)
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <_Z12Encoder_Initv+0x44>)
 8000d9e:	f003 f895 	bl	8003ecc <_ZN10BA_ENCODER11initEncoderEP12GPIO_TypeDeftS1_t>
	oJog.setIncrementStep(30);
 8000da2:	211e      	movs	r1, #30
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <_Z12Encoder_Initv+0x44>)
 8000da6:	f003 f8dd 	bl	8003f64 <_ZN10BA_ENCODER16setIncrementStepEt>
	oJog.setMaxEncoderValue(65535);
 8000daa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <_Z12Encoder_Initv+0x44>)
 8000db0:	f003 f8be 	bl	8003f30 <_ZN10BA_ENCODER18setMaxEncoderValueEm>
	oJog.setMinEncoderValue(0);
 8000db4:	2100      	movs	r1, #0
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <_Z12Encoder_Initv+0x44>)
 8000db8:	f003 f8c7 	bl	8003f4a <_ZN10BA_ENCODER18setMinEncoderValueEm>
	oJog.setCurrentEncoderValue(0);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <_Z12Encoder_Initv+0x44>)
 8000dc0:	f003 fa56 	bl	8004270 <_ZN10BA_ENCODER22setCurrentEncoderValueEm>
	//oJog.setUserForwardCallback(Jog_ForwardCallback);
	//oJog.setUserBackwardCallback(Jog_BackwardCallback);
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	200000a8 	.word	0x200000a8

08000dd4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dd8:	f000 fc3c 	bl	8001654 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ddc:	f000 f926 	bl	800102c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000de0:	f7ff f9bc 	bl	800015c <MX_GPIO_Init>
	MX_TIM2_Init();
 8000de4:	f000 fb3e 	bl	8001464 <MX_TIM2_Init>
	MX_IWDG_Init();
 8000de8:	f7ff fa8e 	bl	8000308 <MX_IWDG_Init>
	MX_TIM3_Init();
 8000dec:	f000 fb86 	bl	80014fc <MX_TIM3_Init>

	// init variables



	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000df0:	4880      	ldr	r0, [pc, #512]	; (8000ff4 <main+0x220>)
 8000df2:	f001 fe59 	bl	8002aa8 <HAL_TIM_Base_Start_IT>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf14      	ite	ne
 8000dfc:	2301      	movne	r3, #1
 8000dfe:	2300      	moveq	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <main+0x36>
	{
		/* htim2 Generation Error */
		Error_Handler();
 8000e06:	f000 fa05 	bl	8001214 <Error_Handler>





	Encoder_Init();
 8000e0a:	f7ff ffbf 	bl	8000d8c <_Z12Encoder_Initv>
	Paramertes_Init();
 8000e0e:	f7ff fad3 	bl	80003b8 <_Z15Paramertes_Initv>
	//load from flash
	read_flash_memory(PERSISTENT_DATA_START, toFlashData, 3);
 8000e12:	2203      	movs	r2, #3
 8000e14:	4978      	ldr	r1, [pc, #480]	; (8000ff8 <main+0x224>)
 8000e16:	4879      	ldr	r0, [pc, #484]	; (8000ffc <main+0x228>)
 8000e18:	f002 fa1b 	bl	8003252 <read_flash_memory>
	parameter[0].value_milli = toFlashData[F_TDETECT] ;
 8000e1c:	4b76      	ldr	r3, [pc, #472]	; (8000ff8 <main+0x224>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	4a77      	ldr	r2, [pc, #476]	; (8001000 <main+0x22c>)
 8000e22:	60d3      	str	r3, [r2, #12]
	parameter[1].value_milli = toFlashData[F_TWAIT] ;
 8000e24:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <main+0x224>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	4a75      	ldr	r2, [pc, #468]	; (8001000 <main+0x22c>)
 8000e2a:	6253      	str	r3, [r2, #36]	; 0x24
		parameter[0].value_milli  = parameter[0].min;
	}
	if(parameter[1].value_milli  < parameter[1].min){
		parameter[1].value_milli  = parameter[1].min;
	}*/
	StateMode_t = (Ts_StateMode)toFlashData[F_STATE] ;
 8000e2c:	4b72      	ldr	r3, [pc, #456]	; (8000ff8 <main+0x224>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b74      	ldr	r3, [pc, #464]	; (8001004 <main+0x230>)
 8000e34:	701a      	strb	r2, [r3, #0]



	KeyPress_t = KEY_NONE;
 8000e36:	4b74      	ldr	r3, [pc, #464]	; (8001008 <main+0x234>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]

	logoAnimation();
 8000e3c:	f7ff fd58 	bl	80008f0 <_Z13logoAnimationv>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//check input sensor
		detect();
 8000e40:	f7ff fcc4 	bl	80007cc <_Z6detectv>

		//examin button press
		switch (KeyPress_t) {
 8000e44:	4b70      	ldr	r3, [pc, #448]	; (8001008 <main+0x234>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	f200 80b4 	bhi.w	8000fb8 <main+0x1e4>
 8000e50:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <main+0x84>)
 8000e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e56:	bf00      	nop
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e9f 	.word	0x08000e9f
 8000e60:	08000ed7 	.word	0x08000ed7
 8000e64:	08000f25 	.word	0x08000f25
		case KEY_RESET:

			if(StateMode_t == STATE_ALARM){
 8000e68:	4b66      	ldr	r3, [pc, #408]	; (8001004 <main+0x230>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d106      	bne.n	8000e7e <main+0xaa>
				StateMode_t = STATE_WAIT;
 8000e70:	4b64      	ldr	r3, [pc, #400]	; (8001004 <main+0x230>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	701a      	strb	r2, [r3, #0]
				clear_screen =1;
 8000e76:	4b65      	ldr	r3, [pc, #404]	; (800100c <main+0x238>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	e009      	b.n	8000e92 <main+0xbe>
			}
			else if(StateMode_t == STATE_WAIT){
 8000e7e:	4b61      	ldr	r3, [pc, #388]	; (8001004 <main+0x230>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d105      	bne.n	8000e92 <main+0xbe>
				StateMode_t = STATE_RUN;
 8000e86:	4b5f      	ldr	r3, [pc, #380]	; (8001004 <main+0x230>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
				clear_screen =1;
 8000e8c:	4b5f      	ldr	r3, [pc, #380]	; (800100c <main+0x238>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
			}

			reinitVariables();
 8000e92:	f7ff fcb7 	bl	8000804 <_Z15reinitVariablesv>
			KeyPress_t = KEY_NONE;
 8000e96:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <main+0x234>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]

			break;
 8000e9c:	e08d      	b.n	8000fba <main+0x1e6>

		case KEY_MODE:

			if(MainMode_t == MAIN_HOME){
 8000e9e:	4b5c      	ldr	r3, [pc, #368]	; (8001010 <main+0x23c>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d113      	bne.n	8000ece <main+0xfa>
				MainMode_t = MAIN_MENU;
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	; (8001010 <main+0x23c>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]

				// jog paramerets for menu scrolling

				oJog.setMaxEncoderValue(255);
 8000eac:	21ff      	movs	r1, #255	; 0xff
 8000eae:	4859      	ldr	r0, [pc, #356]	; (8001014 <main+0x240>)
 8000eb0:	f003 f83e 	bl	8003f30 <_ZN10BA_ENCODER18setMaxEncoderValueEm>
				oJog.setMinEncoderValue(setting_animation);
 8000eb4:	4b58      	ldr	r3, [pc, #352]	; (8001018 <main+0x244>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4856      	ldr	r0, [pc, #344]	; (8001014 <main+0x240>)
 8000ebc:	f003 f845 	bl	8003f4a <_ZN10BA_ENCODER18setMinEncoderValueEm>
				oJog.setIncrementStep(1);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	4854      	ldr	r0, [pc, #336]	; (8001014 <main+0x240>)
 8000ec4:	f003 f84e 	bl	8003f64 <_ZN10BA_ENCODER16setIncrementStepEt>

				clear_screen =1;
 8000ec8:	4b50      	ldr	r3, [pc, #320]	; (800100c <main+0x238>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
			}




			KeyPress_t = KEY_NONE;
 8000ece:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <main+0x234>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]

			break;
 8000ed4:	e071      	b.n	8000fba <main+0x1e6>
		case KEY_ESC:

			if(MainMode_t == MAIN_PARAMETERS){
 8000ed6:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <main+0x23c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d114      	bne.n	8000f08 <main+0x134>
				MainMode_t = MAIN_MENU;
 8000ede:	4b4c      	ldr	r3, [pc, #304]	; (8001010 <main+0x23c>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
				oJog.setMaxEncoderValue(255);
 8000ee4:	21ff      	movs	r1, #255	; 0xff
 8000ee6:	484b      	ldr	r0, [pc, #300]	; (8001014 <main+0x240>)
 8000ee8:	f003 f822 	bl	8003f30 <_ZN10BA_ENCODER18setMaxEncoderValueEm>
				oJog.setCurrentEncoderValue(setting_animation);
 8000eec:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <main+0x244>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4848      	ldr	r0, [pc, #288]	; (8001014 <main+0x240>)
 8000ef4:	f003 f9bc 	bl	8004270 <_ZN10BA_ENCODER22setCurrentEncoderValueEm>
				oJog.setIncrementStep(1);
 8000ef8:	2101      	movs	r1, #1
 8000efa:	4846      	ldr	r0, [pc, #280]	; (8001014 <main+0x240>)
 8000efc:	f003 f832 	bl	8003f64 <_ZN10BA_ENCODER16setIncrementStepEt>
				// no saving

				clear_screen =1;
 8000f00:	4b42      	ldr	r3, [pc, #264]	; (800100c <main+0x238>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e009      	b.n	8000f1c <main+0x148>
			}
			else if(MainMode_t == MAIN_MENU){
 8000f08:	4b41      	ldr	r3, [pc, #260]	; (8001010 <main+0x23c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d105      	bne.n	8000f1c <main+0x148>
				MainMode_t = MAIN_HOME;
 8000f10:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <main+0x23c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
				clear_screen =1;
 8000f16:	4b3d      	ldr	r3, [pc, #244]	; (800100c <main+0x238>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
			}


			KeyPress_t = KEY_NONE;
 8000f1c:	4b3a      	ldr	r3, [pc, #232]	; (8001008 <main+0x234>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
			break;
 8000f22:	e04a      	b.n	8000fba <main+0x1e6>
		case KEY_ENT:

			if(MainMode_t == MAIN_MENU){
 8000f24:	4b3a      	ldr	r3, [pc, #232]	; (8001010 <main+0x23c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d128      	bne.n	8000f7e <main+0x1aa>
				MainMode_t = MAIN_PARAMETERS;
 8000f2c:	4b38      	ldr	r3, [pc, #224]	; (8001010 <main+0x23c>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	701a      	strb	r2, [r3, #0]

				//set which parameter
				currentParameter = &parameter[setting_animation%2];
 8000f32:	4b39      	ldr	r3, [pc, #228]	; (8001018 <main+0x244>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <main+0x22c>)
 8000f44:	4413      	add	r3, r2
 8000f46:	4a35      	ldr	r2, [pc, #212]	; (800101c <main+0x248>)
 8000f48:	6013      	str	r3, [r2, #0]
				oJog.setMaxEncoderValue(currentParameter->max);
 8000f4a:	4b34      	ldr	r3, [pc, #208]	; (800101c <main+0x248>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	4619      	mov	r1, r3
 8000f52:	4830      	ldr	r0, [pc, #192]	; (8001014 <main+0x240>)
 8000f54:	f002 ffec 	bl	8003f30 <_ZN10BA_ENCODER18setMaxEncoderValueEm>
				holdParameterValue = currentParameter->value_milli;
 8000f58:	4b30      	ldr	r3, [pc, #192]	; (800101c <main+0x248>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	4a30      	ldr	r2, [pc, #192]	; (8001020 <main+0x24c>)
 8000f60:	6013      	str	r3, [r2, #0]
				oJog.setCurrentEncoderValue(holdParameterValue);
 8000f62:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <main+0x24c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	482a      	ldr	r0, [pc, #168]	; (8001014 <main+0x240>)
 8000f6a:	f003 f981 	bl	8004270 <_ZN10BA_ENCODER22setCurrentEncoderValueEm>
				oJog.setIncrementStep(30);
 8000f6e:	211e      	movs	r1, #30
 8000f70:	4828      	ldr	r0, [pc, #160]	; (8001014 <main+0x240>)
 8000f72:	f002 fff7 	bl	8003f64 <_ZN10BA_ENCODER16setIncrementStepEt>

				clear_screen =1;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <main+0x238>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e018      	b.n	8000fb0 <main+0x1dc>
			}
			else if(MainMode_t == MAIN_PARAMETERS){
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <main+0x23c>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d114      	bne.n	8000fb0 <main+0x1dc>
				// show it has stored

				save = 1;
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <main+0x250>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
				//saving function



				toFlashData[setting_animation%2 + 1] = holdParameterValue;
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <main+0x244>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	3301      	adds	r3, #1
 8000f96:	4a22      	ldr	r2, [pc, #136]	; (8001020 <main+0x24c>)
 8000f98:	6812      	ldr	r2, [r2, #0]
 8000f9a:	4917      	ldr	r1, [pc, #92]	; (8000ff8 <main+0x224>)
 8000f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				currentParameter->value_milli = holdParameterValue;
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <main+0x248>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1e      	ldr	r2, [pc, #120]	; (8001020 <main+0x24c>)
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	60da      	str	r2, [r3, #12]

				clear_screen =1;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <main+0x238>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
			}


			KeyPress_t = KEY_NONE;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <main+0x234>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
			break;
 8000fb6:	e000      	b.n	8000fba <main+0x1e6>
		default:
			break;
 8000fb8:	bf00      	nop





		StateMachine();
 8000fba:	f7ff fb3b 	bl	8000634 <_Z12StateMachinev>
		DisplayManagement();
 8000fbe:	f7ff fa3b 	bl	8000438 <_Z17DisplayManagementv>
		checkActivateScreen(); // activate display lighty
 8000fc2:	f7ff fc4d 	bl	8000860 <_Z19checkActivateScreenv>

		update_previousTime = currentTime();
 8000fc6:	f7ff fc89 	bl	80008dc <_Z11currentTimev>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a16      	ldr	r2, [pc, #88]	; (8001028 <main+0x254>)
 8000fce:	6013      	str	r3, [r2, #0]

		if(save){
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <main+0x250>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f43f af33 	beq.w	8000e40 <main+0x6c>
			write_flash_memory(PERSISTENT_DATA_START, toFlashData, 3);
 8000fda:	2203      	movs	r2, #3
 8000fdc:	4906      	ldr	r1, [pc, #24]	; (8000ff8 <main+0x224>)
 8000fde:	4807      	ldr	r0, [pc, #28]	; (8000ffc <main+0x228>)
 8000fe0:	f002 f95a 	bl	8003298 <write_flash_memory>
			save = 0;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <main+0x250>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
			clear_screen =1;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <main+0x238>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
		detect();
 8000ff0:	e726      	b.n	8000e40 <main+0x6c>
 8000ff2:	bf00      	nop
 8000ff4:	200001ac 	.word	0x200001ac
 8000ff8:	20000154 	.word	0x20000154
 8000ffc:	0800dc00 	.word	0x0800dc00
 8001000:	200000f0 	.word	0x200000f0
 8001004:	20000122 	.word	0x20000122
 8001008:	20000121 	.word	0x20000121
 800100c:	20000150 	.word	0x20000150
 8001010:	20000123 	.word	0x20000123
 8001014:	200000a8 	.word	0x200000a8
 8001018:	20000148 	.word	0x20000148
 800101c:	20000124 	.word	0x20000124
 8001020:	2000014c 	.word	0x2000014c
 8001024:	2000014a 	.word	0x2000014a
 8001028:	20000144 	.word	0x20000144

0800102c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b090      	sub	sp, #64	; 0x40
 8001030:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0318 	add.w	r3, r7, #24
 8001036:	2228      	movs	r2, #40	; 0x28
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f003 f98c 	bl	8004358 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800104e:	2309      	movs	r3, #9
 8001050:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001056:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	2301      	movs	r3, #1
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001060:	2301      	movs	r3, #1
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800106e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0318 	add.w	r3, r7, #24
 8001078:	4618      	mov	r0, r3
 800107a:	f001 f89d 	bl	80021b8 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <_Z18SystemClock_Configv+0x66>
	{
		Error_Handler();
 800108e:	f000 f8c1 	bl	8001214 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001092:	230f      	movs	r3, #15
 8001094:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800109e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2102      	movs	r1, #2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fb04 	bl	80026bc <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf14      	ite	ne
 80010ba:	2301      	movne	r3, #1
 80010bc:	2300      	moveq	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 80010c4:	f000 f8a6 	bl	8001214 <Error_Handler>
	}
}
 80010c8:	bf00      	nop
 80010ca:	3740      	adds	r7, #64	; 0x40
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]



	oJog.HandleGPIOEvents(GPIO_Pin);
 80010da:	1dbb      	adds	r3, r7, #6
 80010dc:	4619      	mov	r1, r3
 80010de:	482a      	ldr	r0, [pc, #168]	; (8001188 <HAL_GPIO_EXTI_Callback+0xb8>)
 80010e0:	f002 ffa6 	bl	8004030 <_ZN10BA_ENCODER16HandleGPIOEventsERt>

	// other pins;
	if(GPIO_Pin == ESC_PB_Pin){
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ea:	d110      	bne.n	800110e <HAL_GPIO_EXTI_Callback+0x3e>
		// go out
		//if(!HAL_GPIO_ReadPin(ESC_PB_GPIO_Port, ESC_PB_Pin)){
		if(light_Display_on ){
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <HAL_GPIO_EXTI_Callback+0xbc>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf14      	ite	ne
 80010f6:	2301      	movne	r3, #1
 80010f8:	2300      	moveq	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <HAL_GPIO_EXTI_Callback+0x36>
			KeyPress_t = KEY_ESC;
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001102:	2203      	movs	r2, #3
 8001104:	701a      	strb	r2, [r3, #0]
		}

		light_Display = 1;
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e031      	b.n	8001172 <HAL_GPIO_EXTI_Callback+0xa2>
		//}
	}
	else if(GPIO_Pin == MODE_PB_Pin){
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	2b08      	cmp	r3, #8
 8001112:	d110      	bne.n	8001136 <HAL_GPIO_EXTI_Callback+0x66>
		//enter menu

		//if(!HAL_GPIO_ReadPin(MODE_PB_GPIO_Port, MODE_PB_Pin)){

		if(light_Display_on ){
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	bf14      	ite	ne
 800111e:	2301      	movne	r3, #1
 8001120:	2300      	moveq	r3, #0
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <HAL_GPIO_EXTI_Callback+0x5e>
			KeyPress_t = KEY_MODE;
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_GPIO_EXTI_Callback+0xc0>)
 800112a:	2202      	movs	r2, #2
 800112c:	701a      	strb	r2, [r3, #0]
		}

		light_Display = 1;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e01d      	b.n	8001172 <HAL_GPIO_EXTI_Callback+0xa2>
		//}
	}
	else if(GPIO_Pin == RST_PB_Pin){
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800113c:	d106      	bne.n	800114c <HAL_GPIO_EXTI_Callback+0x7c>
		// reset states
		//if(!HAL_GPIO_ReadPin(RST_PB_GPIO_Port, RST_PB_Pin)){
		KeyPress_t = KEY_RESET;
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
		light_Display = 1;
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e012      	b.n	8001172 <HAL_GPIO_EXTI_Callback+0xa2>
		//}
	}
	else if(GPIO_Pin == ENC_ENT_Pin){
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d10f      	bne.n	8001172 <HAL_GPIO_EXTI_Callback+0xa2>
		// validate value
		//if(!HAL_GPIO_ReadPin(ENC_ENT_GPIO_Port, ENC_ENT_Pin)){

		if(light_Display_on ){
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf14      	ite	ne
 800115c:	2301      	movne	r3, #1
 800115e:	2300      	moveq	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <HAL_GPIO_EXTI_Callback+0x9c>
			KeyPress_t = KEY_ENT;
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001168:	2204      	movs	r2, #4
 800116a:	701a      	strb	r2, [r3, #0]
		}
		light_Display = 1;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_GPIO_EXTI_Callback+0xc4>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
		//}
	}

	if(GPIO_Pin == INPUT_Pin){
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	2b10      	cmp	r3, #16
 8001176:	d102      	bne.n	800117e <HAL_GPIO_EXTI_Callback+0xae>
		}
		else{

		}*/
		//just a change in state is sufficient to say everything is ok
		detected = 1;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_GPIO_EXTI_Callback+0xc8>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
	}

}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000a8 	.word	0x200000a8
 800118c:	20000135 	.word	0x20000135
 8001190:	20000121 	.word	0x20000121
 8001194:	20000134 	.word	0x20000134
 8001198:	20000120 	.word	0x20000120

0800119c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM3){
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a15      	ldr	r2, [pc, #84]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d123      	bne.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x5a>
		/*
		 * TIMER3 counts at 2000Hz/500 us per count
		 *
		 */
		holdCurrenTimeCount += 1;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	4a13      	ldr	r2, [pc, #76]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80011b6:	6013      	str	r3, [r2, #0]

		if((currentTime() - state_Machine_previousTime) >= 1000 && remainingTimeValue >0){
 80011b8:	f7ff fb90 	bl	80008dc <_Z11currentTimev>
 80011bc:	4602      	mov	r2, r0
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c8:	d305      	bcc.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0x3a>
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0x3a>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 80011d6:	2300      	movs	r3, #0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d009      	beq.n	80011f0 <HAL_TIM_PeriodElapsedCallback+0x54>
			remainingTimeValue -=1;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80011e4:	6013      	str	r3, [r2, #0]
			state_Machine_previousTime = currentTime();
 80011e6:	f7ff fb79 	bl	80008dc <_Z11currentTimev>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80011ee:	6013      	str	r3, [r2, #0]
		}

		HAL_IWDG_Refresh(&hiwdg);// watchdog
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011f2:	f000 ffd1 	bl	8002198 <HAL_IWDG_Refresh>
	}



}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40000400 	.word	0x40000400
 8001204:	20000138 	.word	0x20000138
 8001208:	2000013c 	.word	0x2000013c
 800120c:	2000012c 	.word	0x2000012c
 8001210:	2000009c 	.word	0x2000009c

08001214 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <_Z41__static_initialization_and_destruction_0ii>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d107      	bne.n	8001240 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001236:	4293      	cmp	r3, r2
 8001238:	d102      	bne.n	8001240 <_Z41__static_initialization_and_destruction_0ii+0x20>
BA_ENCODER oJog;
 800123a:	4809      	ldr	r0, [pc, #36]	; (8001260 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800123c:	f002 fdf5 	bl	8003e2a <_ZN10BA_ENCODERC1Ev>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d107      	bne.n	8001256 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124c:	4293      	cmp	r3, r2
 800124e:	d102      	bne.n	8001256 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001252:	f002 fe28 	bl	8003ea6 <_ZN10BA_ENCODERD1Ev>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200000a8 	.word	0x200000a8

08001264 <_GLOBAL__sub_I_oJog>:
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
 8001268:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff ffd7 	bl	8001220 <_Z41__static_initialization_and_destruction_0ii>
 8001272:	bd80      	pop	{r7, pc}

08001274 <_GLOBAL__sub_D_oJog>:
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
 8001278:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff ffcf 	bl	8001220 <_Z41__static_initialization_and_destruction_0ii>
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_MspInit+0x5c>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_MspInit+0x5c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6193      	str	r3, [r2, #24]
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_MspInit+0x5c>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_MspInit+0x5c>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_MspInit+0x5c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_MspInit+0x5c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_MspInit+0x60>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_MspInit+0x60>)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
 {
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132e:	f000 f9d7 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}

08001336 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 800133a:	2001      	movs	r0, #1
 800133c:	f000 fed2 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 8001348:	2002      	movs	r0, #2
 800134a:	f000 fecb 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}

08001352 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_ENT_Pin);
 8001356:	2004      	movs	r0, #4
 8001358:	f000 fec4 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_PB_Pin);
 8001364:	2008      	movs	r0, #8
 8001366:	f000 febd 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}

0800136e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT_Pin);
 8001372:	2010      	movs	r0, #16
 8001374:	f000 feb6 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TIM3_IRQHandler+0x10>)
 8001382:	f001 fbe3 	bl	8002b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001ac 	.word	0x200001ac

08001390 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESC_PB_Pin);
 8001394:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001398:	f000 fea4 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RST_PB_Pin);
 800139c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013a0:	f000 fea0 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return 1;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <_kill>:

int _kill(int pid, int sig)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013c0:	f002 ffa0 	bl	8004304 <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2216      	movs	r2, #22
 80013c8:	601a      	str	r2, [r3, #0]
  return -1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_exit>:

void _exit (int status)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013de:	f04f 31ff 	mov.w	r1, #4294967295
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffe7 	bl	80013b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013e8:	e7fe      	b.n	80013e8 <_exit+0x12>
	...

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f002 ff72 	bl	8004304 <__errno>
 8001420:	4603      	mov	r3, r0
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20005000 	.word	0x20005000
 800144c:	00000400 	.word	0x00000400
 8001450:	20000160 	.word	0x20000160
 8001454:	20000640 	.word	0x20000640

08001458 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	463b      	mov	r3, r7
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_TIM2_Init+0x94>)
 8001482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001486:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_TIM2_Init+0x94>)
 800148a:	2247      	movs	r2, #71	; 0x47
 800148c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_TIM2_Init+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535-1;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_TIM2_Init+0x94>)
 8001496:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800149a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_TIM2_Init+0x94>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_TIM2_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014a8:	4813      	ldr	r0, [pc, #76]	; (80014f8 <MX_TIM2_Init+0x94>)
 80014aa:	f001 fa63 	bl	8002974 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014b4:	f7ff feae 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_TIM2_Init+0x94>)
 80014c6:	f001 fc49 	bl	8002d5c <HAL_TIM_ConfigClockSource>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014d0:	f7ff fea0 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_TIM2_Init+0x94>)
 80014e2:	f001 fe1f 	bl	8003124 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014ec:	f7ff fe92 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000164 	.word	0x20000164

080014fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_TIM3_Init+0x94>)
 800151a:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <MX_TIM3_Init+0x98>)
 800151c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_TIM3_Init+0x94>)
 8001520:	2247      	movs	r2, #71	; 0x47
 8001522:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_TIM3_Init+0x94>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_TIM3_Init+0x94>)
 800152c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001530:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_TIM3_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_TIM3_Init+0x94>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800153e:	4814      	ldr	r0, [pc, #80]	; (8001590 <MX_TIM3_Init+0x94>)
 8001540:	f001 fa18 	bl	8002974 <HAL_TIM_Base_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800154a:	f7ff fe63 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001552:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4619      	mov	r1, r3
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_TIM3_Init+0x94>)
 800155c:	f001 fbfe 	bl	8002d5c <HAL_TIM_ConfigClockSource>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001566:	f7ff fe55 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_TIM3_Init+0x94>)
 8001578:	f001 fdd4 	bl	8003124 <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001582:	f7ff fe47 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200001ac 	.word	0x200001ac
 8001594:	40000400 	.word	0x40000400

08001598 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a8:	d10c      	bne.n	80015c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_TIM_Base_MspInit+0x68>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a14      	ldr	r2, [pc, #80]	; (8001600 <HAL_TIM_Base_MspInit+0x68>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_TIM_Base_MspInit+0x68>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80015c2:	e018      	b.n	80015f6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_TIM_Base_MspInit+0x6c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d113      	bne.n	80015f6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_TIM_Base_MspInit+0x68>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <HAL_TIM_Base_MspInit+0x68>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_TIM_Base_MspInit+0x68>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	201d      	movs	r0, #29
 80015ec:	f000 f98f 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015f0:	201d      	movs	r0, #29
 80015f2:	f000 f9a8 	bl	8001946 <HAL_NVIC_EnableIRQ>
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	40000400 	.word	0x40000400

08001608 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001608:	f7ff ff26 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800160e:	490c      	ldr	r1, [pc, #48]	; (8001640 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001610:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001624:	4c09      	ldr	r4, [pc, #36]	; (800164c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f002 fe6d 	bl	8004310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001636:	f7ff fbcd 	bl	8000dd4 <main>
  bx lr
 800163a:	4770      	bx	lr
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001644:	08005220 	.word	0x08005220
  ldr r2, =_sbss
 8001648:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800164c:	20000640 	.word	0x20000640

08001650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC1_2_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_Init+0x28>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_Init+0x28>)
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 f947 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166a:	200f      	movs	r0, #15
 800166c:	f000 f808 	bl	8001680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001670:	f7ff fe08 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40022000 	.word	0x40022000

08001680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x54>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_InitTick+0x58>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f95f 	bl	8001962 <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f000 f927 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <HAL_InitTick+0x5c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2000000c 	.word	0x2000000c
 80016d8:	20000014 	.word	0x20000014
 80016dc:	20000010 	.word	0x20000010

080016e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_IncTick+0x1c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_IncTick+0x20>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a03      	ldr	r2, [pc, #12]	; (8001700 <HAL_IncTick+0x20>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000014 	.word	0x20000014
 8001700:	200001f4 	.word	0x200001f4

08001704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b02      	ldr	r3, [pc, #8]	; (8001714 <HAL_GetTick+0x10>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	200001f4 	.word	0x200001f4

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff fff0 	bl	8001704 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffe0 	bl	8001704 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000014 	.word	0x20000014

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4906      	ldr	r1, [pc, #24]	; (80017f8 <__NVIC_EnableIRQ+0x34>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff90 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff2d 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff42 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff90 	bl	8001850 <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5f 	bl	80017fc <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff35 	bl	80017c4 <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_FLASH_Program+0xd8>)
 8001998:	7e1b      	ldrb	r3, [r3, #24]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_FLASH_Program+0x26>
 800199e:	2302      	movs	r3, #2
 80019a0:	e054      	b.n	8001a4c <HAL_FLASH_Program+0xd0>
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <HAL_FLASH_Program+0xd8>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80019a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019ac:	f000 f8a8 	bl	8001b00 <FLASH_WaitForLastOperation>
 80019b0:	4603      	mov	r3, r0
 80019b2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d144      	bne.n	8001a44 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d102      	bne.n	80019c6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80019c0:	2301      	movs	r3, #1
 80019c2:	757b      	strb	r3, [r7, #21]
 80019c4:	e007      	b.n	80019d6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d102      	bne.n	80019d2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80019cc:	2302      	movs	r3, #2
 80019ce:	757b      	strb	r3, [r7, #21]
 80019d0:	e001      	b.n	80019d6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80019d2:	2304      	movs	r3, #4
 80019d4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	75bb      	strb	r3, [r7, #22]
 80019da:	e02d      	b.n	8001a38 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80019dc:	7dbb      	ldrb	r3, [r7, #22]
 80019de:	005a      	lsls	r2, r3, #1
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	eb02 0c03 	add.w	ip, r2, r3
 80019e6:	7dbb      	ldrb	r3, [r7, #22]
 80019e8:	0119      	lsls	r1, r3, #4
 80019ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ee:	f1c1 0620 	rsb	r6, r1, #32
 80019f2:	f1a1 0020 	sub.w	r0, r1, #32
 80019f6:	fa22 f401 	lsr.w	r4, r2, r1
 80019fa:	fa03 f606 	lsl.w	r6, r3, r6
 80019fe:	4334      	orrs	r4, r6
 8001a00:	fa23 f000 	lsr.w	r0, r3, r0
 8001a04:	4304      	orrs	r4, r0
 8001a06:	fa23 f501 	lsr.w	r5, r3, r1
 8001a0a:	b2a3      	uxth	r3, r4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4660      	mov	r0, ip
 8001a10:	f000 f85a 	bl	8001ac8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a18:	f000 f872 	bl	8001b00 <FLASH_WaitForLastOperation>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_FLASH_Program+0xdc>)
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <HAL_FLASH_Program+0xdc>)
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d107      	bne.n	8001a42 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001a32:	7dbb      	ldrb	r3, [r7, #22]
 8001a34:	3301      	adds	r3, #1
 8001a36:	75bb      	strb	r3, [r7, #22]
 8001a38:	7dba      	ldrb	r2, [r7, #22]
 8001a3a:	7d7b      	ldrb	r3, [r7, #21]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d3cd      	bcc.n	80019dc <HAL_FLASH_Program+0x60>
 8001a40:	e000      	b.n	8001a44 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001a42:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_FLASH_Program+0xd8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	761a      	strb	r2, [r3, #24]

  return status;
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a54:	200001f8 	.word	0x200001f8
 8001a58:	40022000 	.word	0x40022000

08001a5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_FLASH_Unlock+0x40>)
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_FLASH_Unlock+0x40>)
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_FLASH_Unlock+0x44>)
 8001a76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Unlock+0x40>)
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_FLASH_Unlock+0x48>)
 8001a7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_FLASH_Unlock+0x40>)
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40022000 	.word	0x40022000
 8001aa0:	45670123 	.word	0x45670123
 8001aa4:	cdef89ab 	.word	0xcdef89ab

08001aa8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_FLASH_Lock+0x1c>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_FLASH_Lock+0x1c>)
 8001ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40022000 	.word	0x40022000

08001ac8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <FLASH_Program_HalfWord+0x30>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <FLASH_Program_HalfWord+0x34>)
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	4a07      	ldr	r2, [pc, #28]	; (8001afc <FLASH_Program_HalfWord+0x34>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	887a      	ldrh	r2, [r7, #2]
 8001aea:	801a      	strh	r2, [r3, #0]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200001f8 	.word	0x200001f8
 8001afc:	40022000 	.word	0x40022000

08001b00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff fdfc 	bl	8001704 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b0e:	e010      	b.n	8001b32 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b16:	d00c      	beq.n	8001b32 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <FLASH_WaitForLastOperation+0x2e>
 8001b1e:	f7ff fdf1 	bl	8001704 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d201      	bcs.n	8001b32 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e025      	b.n	8001b7e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <FLASH_WaitForLastOperation+0x88>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1e8      	bne.n	8001b10 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <FLASH_WaitForLastOperation+0x88>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f003 0320 	and.w	r3, r3, #32
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <FLASH_WaitForLastOperation+0x88>)
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <FLASH_WaitForLastOperation+0x88>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10b      	bne.n	8001b74 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <FLASH_WaitForLastOperation+0x88>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <FLASH_WaitForLastOperation+0x88>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b74:	f000 f80a 	bl	8001b8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40022000 	.word	0x40022000

08001b8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001b96:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <FLASH_SetErrorCode+0x98>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <FLASH_SetErrorCode+0x9c>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <FLASH_SetErrorCode+0x9c>)
 8001bac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f043 0310 	orr.w	r3, r3, #16
 8001bb4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <FLASH_SetErrorCode+0x98>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <FLASH_SetErrorCode+0x9c>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <FLASH_SetErrorCode+0x9c>)
 8001bcc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <FLASH_SetErrorCode+0x98>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <FLASH_SetErrorCode+0x9c>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <FLASH_SetErrorCode+0x9c>)
 8001bec:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <FLASH_SetErrorCode+0x98>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <FLASH_SetErrorCode+0x98>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f240 1201 	movw	r2, #257	; 0x101
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d106      	bne.n	8001c12 <FLASH_SetErrorCode+0x86>
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <FLASH_SetErrorCode+0x98>)
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <FLASH_SetErrorCode+0x98>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	61d3      	str	r3, [r2, #28]
}  
 8001c10:	e002      	b.n	8001c18 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001c12:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <FLASH_SetErrorCode+0x98>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	60d3      	str	r3, [r2, #12]
}  
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40022000 	.word	0x40022000
 8001c28:	200001f8 	.word	0x200001f8

08001c2c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c3e:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <HAL_FLASHEx_Erase+0xd0>)
 8001c40:	7e1b      	ldrb	r3, [r3, #24]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_FLASHEx_Erase+0x1e>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e053      	b.n	8001cf2 <HAL_FLASHEx_Erase+0xc6>
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <HAL_FLASHEx_Erase+0xd0>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d116      	bne.n	8001c86 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c5c:	f7ff ff50 	bl	8001b00 <FLASH_WaitForLastOperation>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d141      	bne.n	8001cea <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f000 f84c 	bl	8001d04 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c70:	f7ff ff46 	bl	8001b00 <FLASH_WaitForLastOperation>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <HAL_FLASHEx_Erase+0xd4>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a20      	ldr	r2, [pc, #128]	; (8001d00 <HAL_FLASHEx_Erase+0xd4>)
 8001c7e:	f023 0304 	bic.w	r3, r3, #4
 8001c82:	6113      	str	r3, [r2, #16]
 8001c84:	e031      	b.n	8001cea <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c8a:	f7ff ff39 	bl	8001b00 <FLASH_WaitForLastOperation>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d12a      	bne.n	8001cea <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	e019      	b.n	8001cd8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001ca4:	68b8      	ldr	r0, [r7, #8]
 8001ca6:	f000 f849 	bl	8001d3c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001caa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cae:	f7ff ff27 	bl	8001b00 <FLASH_WaitForLastOperation>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_FLASHEx_Erase+0xd4>)
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <HAL_FLASHEx_Erase+0xd4>)
 8001cbc:	f023 0302 	bic.w	r3, r3, #2
 8001cc0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	601a      	str	r2, [r3, #0]
            break;
 8001cce:	e00c      	b.n	8001cea <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	029a      	lsls	r2, r3, #10
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d3dc      	bcc.n	8001ca4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <HAL_FLASHEx_Erase+0xd0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	761a      	strb	r2, [r3, #24]

  return status;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200001f8 	.word	0x200001f8
 8001d00:	40022000 	.word	0x40022000

08001d04 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <FLASH_MassErase+0x30>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <FLASH_MassErase+0x34>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <FLASH_MassErase+0x34>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <FLASH_MassErase+0x34>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <FLASH_MassErase+0x34>)
 8001d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d28:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	200001f8 	.word	0x200001f8
 8001d38:	40022000 	.word	0x40022000

08001d3c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <FLASH_PageErase+0x38>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <FLASH_PageErase+0x3c>)
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <FLASH_PageErase+0x3c>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <FLASH_PageErase+0x3c>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <FLASH_PageErase+0x3c>)
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <FLASH_PageErase+0x3c>)
 8001d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d66:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	200001f8 	.word	0x200001f8
 8001d78:	40022000 	.word	0x40022000

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b08b      	sub	sp, #44	; 0x2c
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	e169      	b.n	8002064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d90:	2201      	movs	r2, #1
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 8158 	bne.w	800205e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a9a      	ldr	r2, [pc, #616]	; (800201c <HAL_GPIO_Init+0x2a0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d05e      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001db8:	4a98      	ldr	r2, [pc, #608]	; (800201c <HAL_GPIO_Init+0x2a0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d875      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dbe:	4a98      	ldr	r2, [pc, #608]	; (8002020 <HAL_GPIO_Init+0x2a4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d058      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001dc4:	4a96      	ldr	r2, [pc, #600]	; (8002020 <HAL_GPIO_Init+0x2a4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d86f      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dca:	4a96      	ldr	r2, [pc, #600]	; (8002024 <HAL_GPIO_Init+0x2a8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d052      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001dd0:	4a94      	ldr	r2, [pc, #592]	; (8002024 <HAL_GPIO_Init+0x2a8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d869      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dd6:	4a94      	ldr	r2, [pc, #592]	; (8002028 <HAL_GPIO_Init+0x2ac>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d04c      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001ddc:	4a92      	ldr	r2, [pc, #584]	; (8002028 <HAL_GPIO_Init+0x2ac>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d863      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001de2:	4a92      	ldr	r2, [pc, #584]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d046      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001de8:	4a90      	ldr	r2, [pc, #576]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d85d      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dee:	2b12      	cmp	r3, #18
 8001df0:	d82a      	bhi.n	8001e48 <HAL_GPIO_Init+0xcc>
 8001df2:	2b12      	cmp	r3, #18
 8001df4:	d859      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001df6:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <HAL_GPIO_Init+0x80>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	08001e77 	.word	0x08001e77
 8001e00:	08001e51 	.word	0x08001e51
 8001e04:	08001e63 	.word	0x08001e63
 8001e08:	08001ea5 	.word	0x08001ea5
 8001e0c:	08001eab 	.word	0x08001eab
 8001e10:	08001eab 	.word	0x08001eab
 8001e14:	08001eab 	.word	0x08001eab
 8001e18:	08001eab 	.word	0x08001eab
 8001e1c:	08001eab 	.word	0x08001eab
 8001e20:	08001eab 	.word	0x08001eab
 8001e24:	08001eab 	.word	0x08001eab
 8001e28:	08001eab 	.word	0x08001eab
 8001e2c:	08001eab 	.word	0x08001eab
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001eab 	.word	0x08001eab
 8001e38:	08001eab 	.word	0x08001eab
 8001e3c:	08001eab 	.word	0x08001eab
 8001e40:	08001e59 	.word	0x08001e59
 8001e44:	08001e6d 	.word	0x08001e6d
 8001e48:	4a79      	ldr	r2, [pc, #484]	; (8002030 <HAL_GPIO_Init+0x2b4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e4e:	e02c      	b.n	8001eaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e029      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e024      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	3308      	adds	r3, #8
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e01f      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	330c      	adds	r3, #12
 8001e72:	623b      	str	r3, [r7, #32]
          break;
 8001e74:	e01a      	b.n	8001eac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e013      	b.n	8001eac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d105      	bne.n	8001e98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	611a      	str	r2, [r3, #16]
          break;
 8001e96:	e009      	b.n	8001eac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	615a      	str	r2, [r3, #20]
          break;
 8001ea2:	e003      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x130>
          break;
 8001eaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2bff      	cmp	r3, #255	; 0xff
 8001eb0:	d801      	bhi.n	8001eb6 <HAL_GPIO_Init+0x13a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	e001      	b.n	8001eba <HAL_GPIO_Init+0x13e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2bff      	cmp	r3, #255	; 0xff
 8001ec0:	d802      	bhi.n	8001ec8 <HAL_GPIO_Init+0x14c>
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_GPIO_Init+0x152>
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	210f      	movs	r1, #15
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	6a39      	ldr	r1, [r7, #32]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80b1 	beq.w	800205e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001efc:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <HAL_GPIO_Init+0x2b8>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a4c      	ldr	r2, [pc, #304]	; (8002034 <HAL_GPIO_Init+0x2b8>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b4a      	ldr	r3, [pc, #296]	; (8002034 <HAL_GPIO_Init+0x2b8>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f14:	4a48      	ldr	r2, [pc, #288]	; (8002038 <HAL_GPIO_Init+0x2bc>)
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a40      	ldr	r2, [pc, #256]	; (800203c <HAL_GPIO_Init+0x2c0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_GPIO_Init+0x1ec>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3f      	ldr	r2, [pc, #252]	; (8002040 <HAL_GPIO_Init+0x2c4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00d      	beq.n	8001f64 <HAL_GPIO_Init+0x1e8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3e      	ldr	r2, [pc, #248]	; (8002044 <HAL_GPIO_Init+0x2c8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <HAL_GPIO_Init+0x1e4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3d      	ldr	r2, [pc, #244]	; (8002048 <HAL_GPIO_Init+0x2cc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_GPIO_Init+0x1e0>
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e006      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	e004      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e002      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	f002 0203 	and.w	r2, r2, #3
 8001f70:	0092      	lsls	r2, r2, #2
 8001f72:	4093      	lsls	r3, r2
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f7a:	492f      	ldr	r1, [pc, #188]	; (8002038 <HAL_GPIO_Init+0x2bc>)
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	492c      	ldr	r1, [pc, #176]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4928      	ldr	r1, [pc, #160]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	4922      	ldr	r1, [pc, #136]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	491e      	ldr	r1, [pc, #120]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4918      	ldr	r1, [pc, #96]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4914      	ldr	r1, [pc, #80]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d021      	beq.n	8002050 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_GPIO_Init+0x2d0>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e021      	b.n	800205e <HAL_GPIO_Init+0x2e2>
 800201a:	bf00      	nop
 800201c:	10320000 	.word	0x10320000
 8002020:	10310000 	.word	0x10310000
 8002024:	10220000 	.word	0x10220000
 8002028:	10210000 	.word	0x10210000
 800202c:	10120000 	.word	0x10120000
 8002030:	10110000 	.word	0x10110000
 8002034:	40021000 	.word	0x40021000
 8002038:	40010000 	.word	0x40010000
 800203c:	40010800 	.word	0x40010800
 8002040:	40010c00 	.word	0x40010c00
 8002044:	40011000 	.word	0x40011000
 8002048:	40011400 	.word	0x40011400
 800204c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_GPIO_Init+0x304>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	43db      	mvns	r3, r3
 8002058:	4909      	ldr	r1, [pc, #36]	; (8002080 <HAL_GPIO_Init+0x304>)
 800205a:	4013      	ands	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	3301      	adds	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	f47f ae8e 	bne.w	8001d90 <HAL_GPIO_Init+0x14>
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	372c      	adds	r7, #44	; 0x2c
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40010400 	.word	0x40010400

08002084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e001      	b.n	80020a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	807b      	strh	r3, [r7, #2]
 80020be:	4613      	mov	r3, r2
 80020c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c2:	787b      	ldrb	r3, [r7, #1]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c8:	887a      	ldrh	r2, [r7, #2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ce:	e003      	b.n	80020d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	041a      	lsls	r2, r3, #16
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fa:	4a05      	ldr	r2, [pc, #20]	; (8002110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe ffe4 	bl	80010d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40010400 	.word	0x40010400

08002114 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e034      	b.n	8002190 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800212e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f245 5255 	movw	r2, #21845	; 0x5555
 8002138:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6852      	ldr	r2, [r2, #4]
 8002142:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6892      	ldr	r2, [r2, #8]
 800214c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800214e:	f7ff fad9 	bl	8001704 <HAL_GetTick>
 8002152:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002154:	e00f      	b.n	8002176 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002156:	f7ff fad5 	bl	8001704 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b27      	cmp	r3, #39	; 0x27
 8002162:	d908      	bls.n	8002176 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e00c      	b.n	8002190 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1e8      	bne.n	8002156 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800218c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80021a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e272      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8087 	beq.w	80022e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d8:	4b92      	ldr	r3, [pc, #584]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d00c      	beq.n	80021fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e4:	4b8f      	ldr	r3, [pc, #572]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d112      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
 80021f0:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d10b      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d06c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x12c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d168      	bne.n	80022e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e24c      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x76>
 8002220:	4b80      	ldr	r3, [pc, #512]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a7f      	ldr	r2, [pc, #508]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	e02e      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x98>
 8002236:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7a      	ldr	r2, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b78      	ldr	r3, [pc, #480]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a77      	ldr	r2, [pc, #476]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0xbc>
 800225a:	4b72      	ldr	r3, [pc, #456]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a71      	ldr	r2, [pc, #452]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002274:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a67      	ldr	r2, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fa36 	bl	8001704 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7ff fa32 	bl	8001704 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e200      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b5d      	ldr	r3, [pc, #372]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xe4>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fa22 	bl	8001704 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff fa1e 	bl	8001704 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1ec      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x10c>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f2:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022fe:	4b49      	ldr	r3, [pc, #292]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
 800230a:	4b46      	ldr	r3, [pc, #280]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1c0      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4939      	ldr	r1, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	e03a      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234c:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7ff f9d7 	bl	8001704 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235a:	f7ff f9d3 	bl	8001704 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1a1      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4927      	ldr	r1, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7ff f9b6 	bl	8001704 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7ff f9b2 	bl	8001704 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e180      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d03a      	beq.n	800243c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d019      	beq.n	8002402 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_RCC_OscConfig+0x274>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7ff f996 	bl	8001704 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff f992 	bl	8001704 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e160      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f000 fa9c 	bl	8002938 <RCC_Delay>
 8002400:	e01c      	b.n	800243c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_OscConfig+0x274>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7ff f97c 	bl	8001704 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240e:	e00f      	b.n	8002430 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7ff f978 	bl	8001704 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d908      	bls.n	8002430 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e146      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	42420000 	.word	0x42420000
 800242c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e9      	bne.n	8002410 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a6 	beq.w	8002596 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244e:	4b8b      	ldr	r3, [pc, #556]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b88      	ldr	r3, [pc, #544]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4a87      	ldr	r2, [pc, #540]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	61d3      	str	r3, [r2, #28]
 8002466:	4b85      	ldr	r3, [pc, #532]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7e      	ldr	r2, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7ff f939 	bl	8001704 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7ff f935 	bl	8001704 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b64      	cmp	r3, #100	; 0x64
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e103      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b75      	ldr	r3, [pc, #468]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x312>
 80024bc:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	e02d      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x334>
 80024d2:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a69      	ldr	r2, [pc, #420]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	4b67      	ldr	r3, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a66      	ldr	r2, [pc, #408]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	e01c      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d10c      	bne.n	800250e <HAL_RCC_OscConfig+0x356>
 80024f4:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a60      	ldr	r2, [pc, #384]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	4b5e      	ldr	r3, [pc, #376]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a5d      	ldr	r2, [pc, #372]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 800250e:	4b5b      	ldr	r3, [pc, #364]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a5a      	ldr	r2, [pc, #360]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6213      	str	r3, [r2, #32]
 800251a:	4b58      	ldr	r3, [pc, #352]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a57      	ldr	r2, [pc, #348]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d015      	beq.n	800255a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7ff f8e9 	bl	8001704 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7ff f8e5 	bl	8001704 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0b1      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	4b4b      	ldr	r3, [pc, #300]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ee      	beq.n	8002536 <HAL_RCC_OscConfig+0x37e>
 8002558:	e014      	b.n	8002584 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255a:	f7ff f8d3 	bl	8001704 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7ff f8cf 	bl	8001704 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e09b      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	4b40      	ldr	r3, [pc, #256]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ee      	bne.n	8002562 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b3c      	ldr	r3, [pc, #240]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a3b      	ldr	r2, [pc, #236]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8087 	beq.w	80026ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a0:	4b36      	ldr	r3, [pc, #216]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d061      	beq.n	8002670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d146      	bne.n	8002642 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7ff f8a3 	bl	8001704 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7ff f89f 	bl	8001704 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e06d      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d4:	4b29      	ldr	r3, [pc, #164]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d108      	bne.n	80025fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	4921      	ldr	r1, [pc, #132]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a19      	ldr	r1, [r3, #32]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	430b      	orrs	r3, r1
 800260e:	491b      	ldr	r1, [pc, #108]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_RCC_OscConfig+0x4cc>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7ff f873 	bl	8001704 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7ff f86f 	bl	8001704 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e03d      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x46a>
 8002640:	e035      	b.n	80026ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff f85c 	bl	8001704 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7ff f858 	bl	8001704 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e026      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x498>
 800266e:	e01e      	b.n	80026ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d107      	bne.n	8002688 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e019      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
 800267c:	40021000 	.word	0x40021000
 8002680:	40007000 	.word	0x40007000
 8002684:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_OscConfig+0x500>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	429a      	cmp	r2, r3
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000

080026bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0d0      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b67      	ldr	r3, [pc, #412]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4965      	ldr	r1, [pc, #404]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b8      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002730:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a52      	ldr	r2, [pc, #328]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	494d      	ldr	r1, [pc, #308]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d040      	beq.n	80027dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e073      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06b      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b39      	ldr	r3, [pc, #228]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4936      	ldr	r1, [pc, #216]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ac:	f7fe ffaa 	bl	8001704 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7fe ffa6 	bl	8001704 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e053      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d210      	bcs.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4922      	ldr	r1, [pc, #136]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e032      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4916      	ldr	r1, [pc, #88]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	490e      	ldr	r1, [pc, #56]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284a:	f000 f821 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800284e:	4602      	mov	r2, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	490a      	ldr	r1, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	5ccb      	ldrb	r3, [r1, r3]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1cc>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1d0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe ff08 	bl	8001680 <HAL_InitTick>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	080051b8 	.word	0x080051b8
 8002888:	2000000c 	.word	0x2000000c
 800288c:	20000010 	.word	0x20000010

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x36>
 80028be:	e027      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 80028c2:	613b      	str	r3, [r7, #16]
      break;
 80028c4:	e027      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0c9b      	lsrs	r3, r3, #18
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a17      	ldr	r2, [pc, #92]	; (800292c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_GetSysClockFreq+0x94>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0c5b      	lsrs	r3, r3, #17
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 80028f2:	fb03 f202 	mul.w	r2, r3, r2
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e004      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	613b      	str	r3, [r7, #16]
      break;
 800290e:	e002      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 8002912:	613b      	str	r3, [r7, #16]
      break;
 8002914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002916:	693b      	ldr	r3, [r7, #16]
}
 8002918:	4618      	mov	r0, r3
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	007a1200 	.word	0x007a1200
 800292c:	080051c8 	.word	0x080051c8
 8002930:	080051d8 	.word	0x080051d8
 8002934:	003d0900 	.word	0x003d0900

08002938 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <RCC_Delay+0x34>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <RCC_Delay+0x38>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0a5b      	lsrs	r3, r3, #9
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002954:	bf00      	nop
  }
  while (Delay --);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1e5a      	subs	r2, r3, #1
 800295a:	60fa      	str	r2, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f9      	bne.n	8002954 <RCC_Delay+0x1c>
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	2000000c 	.word	0x2000000c
 8002970:	10624dd3 	.word	0x10624dd3

08002974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e041      	b.n	8002a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fdfc 	bl	8001598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f000 fabe 	bl	8002f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d001      	beq.n	8002a2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e032      	b.n	8002a92 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <HAL_TIM_Base_Start+0x88>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00e      	beq.n	8002a5c <HAL_TIM_Base_Start+0x48>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a46:	d009      	beq.n	8002a5c <HAL_TIM_Base_Start+0x48>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_TIM_Base_Start+0x8c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_TIM_Base_Start+0x48>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <HAL_TIM_Base_Start+0x90>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d111      	bne.n	8002a80 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d010      	beq.n	8002a90 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7e:	e007      	b.n	8002a90 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800

08002aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d001      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e03a      	b.n	8002b36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_TIM_Base_Start_IT+0x98>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x58>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aea:	d009      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x58>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <HAL_TIM_Base_Start_IT+0x9c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x58>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <HAL_TIM_Base_Start_IT+0xa0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d111      	bne.n	8002b24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d010      	beq.n	8002b34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	e007      	b.n	8002b34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800

08002b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d122      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d11b      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0202 	mvn.w	r2, #2
 8002b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f9b4 	bl	8002efc <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9a7 	bl	8002eea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f9b6 	bl	8002f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d122      	bne.n	8002bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d11b      	bne.n	8002bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0204 	mvn.w	r2, #4
 8002bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f98a 	bl	8002efc <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f97d 	bl	8002eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f98c 	bl	8002f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d122      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d11b      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0208 	mvn.w	r2, #8
 8002c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2204      	movs	r2, #4
 8002c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f960 	bl	8002efc <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f953 	bl	8002eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f962 	bl	8002f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d122      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d11b      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0210 	mvn.w	r2, #16
 8002c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f936 	bl	8002efc <HAL_TIM_IC_CaptureCallback>
 8002c90:	e005      	b.n	8002c9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f929 	bl	8002eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f938 	bl	8002f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d107      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0201 	mvn.w	r2, #1
 8002cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe fa66 	bl	800119c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b80      	cmp	r3, #128	; 0x80
 8002cdc:	d10e      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce8:	2b80      	cmp	r3, #128	; 0x80
 8002cea:	d107      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa7b 	bl	80031f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b40      	cmp	r3, #64	; 0x40
 8002d08:	d10e      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	2b40      	cmp	r3, #64	; 0x40
 8002d16:	d107      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f8fc 	bl	8002f20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d10e      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d107      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0220 	mvn.w	r2, #32
 8002d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fa46 	bl	80031e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_TIM_ConfigClockSource+0x1c>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e0b4      	b.n	8002ee2 <HAL_TIM_ConfigClockSource+0x186>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db0:	d03e      	beq.n	8002e30 <HAL_TIM_ConfigClockSource+0xd4>
 8002db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db6:	f200 8087 	bhi.w	8002ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbe:	f000 8086 	beq.w	8002ece <HAL_TIM_ConfigClockSource+0x172>
 8002dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc6:	d87f      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc8:	2b70      	cmp	r3, #112	; 0x70
 8002dca:	d01a      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0xa6>
 8002dcc:	2b70      	cmp	r3, #112	; 0x70
 8002dce:	d87b      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd0:	2b60      	cmp	r3, #96	; 0x60
 8002dd2:	d050      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0x11a>
 8002dd4:	2b60      	cmp	r3, #96	; 0x60
 8002dd6:	d877      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd8:	2b50      	cmp	r3, #80	; 0x50
 8002dda:	d03c      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0xfa>
 8002ddc:	2b50      	cmp	r3, #80	; 0x50
 8002dde:	d873      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	d058      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x13a>
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d86f      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8002de8:	2b30      	cmp	r3, #48	; 0x30
 8002dea:	d064      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002dec:	2b30      	cmp	r3, #48	; 0x30
 8002dee:	d86b      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d060      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d867      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d05c      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d05a      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e00:	e062      	b.n	8002ec8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6899      	ldr	r1, [r3, #8]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f000 f968 	bl	80030e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	609a      	str	r2, [r3, #8]
      break;
 8002e2e:	e04f      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6899      	ldr	r1, [r3, #8]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f000 f951 	bl	80030e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e52:	609a      	str	r2, [r3, #8]
      break;
 8002e54:	e03c      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	461a      	mov	r2, r3
 8002e64:	f000 f8c8 	bl	8002ff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2150      	movs	r1, #80	; 0x50
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 f91f 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 8002e74:	e02c      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	461a      	mov	r2, r3
 8002e84:	f000 f8e6 	bl	8003054 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2160      	movs	r1, #96	; 0x60
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f90f 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 8002e94:	e01c      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f000 f8a8 	bl	8002ff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2140      	movs	r1, #64	; 0x40
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f8ff 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e00c      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	f000 f8f6 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 8002ec6:	e003      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ecc:	e000      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr
	...

08002f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a29      	ldr	r2, [pc, #164]	; (8002fec <TIM_Base_SetConfig+0xb8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <TIM_Base_SetConfig+0x30>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f52:	d007      	beq.n	8002f64 <TIM_Base_SetConfig+0x30>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a26      	ldr	r2, [pc, #152]	; (8002ff0 <TIM_Base_SetConfig+0xbc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <TIM_Base_SetConfig+0x30>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a25      	ldr	r2, [pc, #148]	; (8002ff4 <TIM_Base_SetConfig+0xc0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d108      	bne.n	8002f76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <TIM_Base_SetConfig+0xb8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <TIM_Base_SetConfig+0x62>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f84:	d007      	beq.n	8002f96 <TIM_Base_SetConfig+0x62>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a19      	ldr	r2, [pc, #100]	; (8002ff0 <TIM_Base_SetConfig+0xbc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_Base_SetConfig+0x62>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a18      	ldr	r2, [pc, #96]	; (8002ff4 <TIM_Base_SetConfig+0xc0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d108      	bne.n	8002fa8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a07      	ldr	r2, [pc, #28]	; (8002fec <TIM_Base_SetConfig+0xb8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d103      	bne.n	8002fdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	615a      	str	r2, [r3, #20]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800

08002ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f023 0201 	bic.w	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f023 030a 	bic.w	r3, r3, #10
 8003034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f023 0210 	bic.w	r2, r3, #16
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800307e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	031b      	lsls	r3, r3, #12
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003090:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	621a      	str	r2, [r3, #32]
}
 80030a8:	bf00      	nop
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f043 0307 	orr.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	609a      	str	r2, [r3, #8]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b087      	sub	sp, #28
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003100:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	021a      	lsls	r2, r3, #8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	431a      	orrs	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4313      	orrs	r3, r2
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	609a      	str	r2, [r3, #8]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003138:	2302      	movs	r3, #2
 800313a:	e046      	b.n	80031ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00e      	beq.n	800319e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d009      	beq.n	800319e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d004      	beq.n	800319e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a10      	ldr	r2, [pc, #64]	; (80031dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d10c      	bne.n	80031b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	40012c00 	.word	0x40012c00
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40000800 	.word	0x40000800

080031e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <GetPage>:
#include "flash.h"
#include "main.h"
#include "DataMapping.h"


static uint32_t GetPage(uint32_t adress){
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

	for(int i =0; i< NUMBER_OF_PAGES; i++){
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e016      	b.n	8003240 <GetPage+0x3c>

		if((adress >= (FLASH_DRIVER_FIRST_PAGE_ALLOW_TO_BE_ERASED + FLASH_PAGE_SIZE*i)) && (adress < (FLASH_DRIVER_FIRST_PAGE_ALLOW_TO_BE_ERASED + FLASH_PAGE_SIZE*i+1))){
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003218:	029b      	lsls	r3, r3, #10
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	d30c      	bcc.n	800323a <GetPage+0x36>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003226:	029b      	lsls	r3, r3, #10
 8003228:	3301      	adds	r3, #1
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	429a      	cmp	r2, r3
 800322e:	d204      	bcs.n	800323a <GetPage+0x36>

			return (FLASH_DRIVER_FIRST_PAGE_ALLOW_TO_BE_ERASED + FLASH_PAGE_SIZE*i); // return the start address of the memory sector
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003236:	029b      	lsls	r3, r3, #10
 8003238:	e006      	b.n	8003248 <GetPage+0x44>
	for(int i =0; i< NUMBER_OF_PAGES; i++){
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3301      	adds	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b3f      	cmp	r3, #63	; 0x3f
 8003244:	dde5      	ble.n	8003212 <GetPage+0xe>

		}
	}

	return 0;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <read_flash_memory>:
void read_flash_memory(uint32_t address, uint32_t* data, uint16_t num_of_words){
 8003252:	b480      	push	{r7}
 8003254:	b087      	sub	sp, #28
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	4613      	mov	r3, r2
 800325e:	80fb      	strh	r3, [r7, #6]

	for (int i = 0; i < num_of_words; i++) {
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e00e      	b.n	8003284 <read_flash_memory+0x32>
		*(data + i) = *((uint32_t*)(address+i*4));
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	4619      	mov	r1, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	4413      	add	r3, r2
 800327a:	680a      	ldr	r2, [r1, #0]
 800327c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < num_of_words; i++) {
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	3301      	adds	r3, #1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	429a      	cmp	r2, r3
 800328a:	dbec      	blt.n	8003266 <read_flash_memory+0x14>
	}
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <write_flash_memory>:


void write_flash_memory(uint32_t address, uint32_t* data, uint16_t num_of_words){
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	4613      	mov	r3, r2
 80032a4:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;

	uint32_t pageError = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]

	/* We must first unlock the flash to enable flash control reg*/
	HAL_FLASH_Unlock();
 80032aa:	f7fe fbd7 	bl	8001a5c <HAL_FLASH_Unlock>

	/* Erase the flash area/page */
	uint32_t  startAddr = GetPage(address);
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f7ff ffa8 	bl	8003204 <GetPage>
 80032b4:	61b8      	str	r0, [r7, #24]

	/* fill erase init structure */
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <write_flash_memory+0x88>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress =  startAddr;
 80032bc:	4a18      	ldr	r2, [pc, #96]	; (8003320 <write_flash_memory+0x88>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages  = 1 + num_of_words*4/FLASH_PAGE_SIZE;
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	0a9b      	lsrs	r3, r3, #10
 80032c8:	3301      	adds	r3, #1
 80032ca:	4a15      	ldr	r2, [pc, #84]	; (8003320 <write_flash_memory+0x88>)
 80032cc:	60d3      	str	r3, [r2, #12]

	HAL_FLASHEx_Erase(&EraseInitStruct, &pageError);
 80032ce:	f107 0314 	add.w	r3, r7, #20
 80032d2:	4619      	mov	r1, r3
 80032d4:	4812      	ldr	r0, [pc, #72]	; (8003320 <write_flash_memory+0x88>)
 80032d6:	f7fe fca9 	bl	8001c2c <HAL_FLASHEx_Erase>

	int i = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]

	while(i<num_of_words){
 80032de:	e014      	b.n	800330a <write_flash_memory+0x72>


		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i*4 , data[i]);
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	461a      	mov	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	18d1      	adds	r1, r2, r3
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4413      	add	r3, r2
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2200      	movs	r2, #0
 80032f6:	461c      	mov	r4, r3
 80032f8:	4615      	mov	r5, r2
 80032fa:	4622      	mov	r2, r4
 80032fc:	462b      	mov	r3, r5
 80032fe:	2002      	movs	r0, #2
 8003300:	f7fe fb3c 	bl	800197c <HAL_FLASH_Program>

		i++;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	3301      	adds	r3, #1
 8003308:	61fb      	str	r3, [r7, #28]
	while(i<num_of_words){
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	429a      	cmp	r2, r3
 8003310:	dbe6      	blt.n	80032e0 <write_flash_memory+0x48>

	/*
	 * Lock memory back after writing to flash
	 */

	HAL_FLASH_Lock();
 8003312:	f7fe fbc9 	bl	8001aa8 <HAL_FLASH_Lock>

}
 8003316:	bf00      	nop
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	20000218 	.word	0x20000218

08003324 <SendByteSPI>:
uint8_t image[(128 * 64)/8];

// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e01f      	b.n	8003374 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8003334:	79fa      	ldrb	r2, [r7, #7]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <SendByteSPI+0x2c>
		{
			HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8003344:	2201      	movs	r2, #1
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	480e      	ldr	r0, [pc, #56]	; (8003384 <SendByteSPI+0x60>)
 800334a:	f7fe feb2 	bl	80020b2 <HAL_GPIO_WritePin>
 800334e:	e004      	b.n	800335a <SendByteSPI+0x36>
		}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8003350:	2200      	movs	r2, #0
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	480b      	ldr	r0, [pc, #44]	; (8003384 <SendByteSPI+0x60>)
 8003356:	f7fe feac 	bl	80020b2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800335a:	2200      	movs	r2, #0
 800335c:	2120      	movs	r1, #32
 800335e:	4809      	ldr	r0, [pc, #36]	; (8003384 <SendByteSPI+0x60>)
 8003360:	f7fe fea7 	bl	80020b2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8003364:	2201      	movs	r2, #1
 8003366:	2120      	movs	r1, #32
 8003368:	4806      	ldr	r0, [pc, #24]	; (8003384 <SendByteSPI+0x60>)
 800336a:	f7fe fea2 	bl	80020b2 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3301      	adds	r3, #1
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b07      	cmp	r3, #7
 8003378:	dddc      	ble.n	8003334 <SendByteSPI+0x10>

	}
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40010800 	.word	0x40010800

08003388 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8003392:	2201      	movs	r2, #1
 8003394:	2140      	movs	r1, #64	; 0x40
 8003396:	480f      	ldr	r0, [pc, #60]	; (80033d4 <ST7920_SendCmd+0x4c>)
 8003398:	f7fe fe8b 	bl	80020b2 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 800339c:	20f8      	movs	r0, #248	; 0xf8
 800339e:	f7ff ffc1 	bl	8003324 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	f023 030f 	bic.w	r3, r3, #15
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ffba 	bl	8003324 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ffb4 	bl	8003324 <SendByteSPI>
	delay_us(50);
 80033bc:	2032      	movs	r0, #50	; 0x32
 80033be:	f000 fcdf 	bl	8003d80 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80033c2:	2200      	movs	r2, #0
 80033c4:	2140      	movs	r1, #64	; 0x40
 80033c6:	4803      	ldr	r0, [pc, #12]	; (80033d4 <ST7920_SendCmd+0x4c>)
 80033c8:	f7fe fe73 	bl	80020b2 <HAL_GPIO_WritePin>

}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40010800 	.word	0x40010800

080033d8 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80033e2:	2201      	movs	r2, #1
 80033e4:	2140      	movs	r1, #64	; 0x40
 80033e6:	480f      	ldr	r0, [pc, #60]	; (8003424 <ST7920_SendData+0x4c>)
 80033e8:	f7fe fe63 	bl	80020b2 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 80033ec:	20fa      	movs	r0, #250	; 0xfa
 80033ee:	f7ff ff99 	bl	8003324 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	f023 030f 	bic.w	r3, r3, #15
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff ff92 	bl	8003324 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	b2db      	uxtb	r3, r3
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ff8c 	bl	8003324 <SendByteSPI>
	delay_us(50);
 800340c:	2032      	movs	r0, #50	; 0x32
 800340e:	f000 fcb7 	bl	8003d80 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8003412:	2200      	movs	r2, #0
 8003414:	2140      	movs	r1, #64	; 0x40
 8003416:	4803      	ldr	r0, [pc, #12]	; (8003424 <ST7920_SendData+0x4c>)
 8003418:	f7fe fe4b 	bl	80020b2 <HAL_GPIO_WritePin>
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40010800 	.word	0x40010800

08003428 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
	switch (row)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d81e      	bhi.n	8003478 <ST7920_SendString+0x50>
 800343a:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <ST7920_SendString+0x18>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003451 	.word	0x08003451
 8003444:	0800345b 	.word	0x0800345b
 8003448:	08003465 	.word	0x08003465
 800344c:	0800346f 	.word	0x0800346f
	{
	case 0:
		col |= 0x80;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003456:	60bb      	str	r3, [r7, #8]
		break;
 8003458:	e013      	b.n	8003482 <ST7920_SendString+0x5a>
	case 1:
		col |= 0x90;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003460:	60bb      	str	r3, [r7, #8]
		break;
 8003462:	e00e      	b.n	8003482 <ST7920_SendString+0x5a>
	case 2:
		col |= 0x88;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800346a:	60bb      	str	r3, [r7, #8]
		break;
 800346c:	e009      	b.n	8003482 <ST7920_SendString+0x5a>
	case 3:
		col |= 0x98;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 8003474:	60bb      	str	r3, [r7, #8]
		break;
 8003476:	e004      	b.n	8003482 <ST7920_SendString+0x5a>
	default:
		col |= 0x80;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347e:	60bb      	str	r3, [r7, #8]
		break;
 8003480:	bf00      	nop
	}

	ST7920_SendCmd(col);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff ff7e 	bl	8003388 <ST7920_SendCmd>

	while (*string)
 800348c:	e006      	b.n	800349c <ST7920_SendString+0x74>
	{
		ST7920_SendData(*string++);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ff9e 	bl	80033d8 <ST7920_SendData>
	while (*string)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f4      	bne.n	800348e <ST7920_SendString+0x66>
	}
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop

080034b0 <ST7920_GraphicMode>:


// switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode

void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	if (enable == 1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d115      	bne.n	80034ea <ST7920_GraphicMode+0x3a>
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
 80034be:	2030      	movs	r0, #48	; 0x30
 80034c0:	f7ff ff62 	bl	8003388 <ST7920_SendCmd>
		HAL_Delay (1);
 80034c4:	2001      	movs	r0, #1
 80034c6:	f7fe f927 	bl	8001718 <HAL_Delay>
		ST7920_SendCmd(0x34);  // switch to Extended instructions
 80034ca:	2034      	movs	r0, #52	; 0x34
 80034cc:	f7ff ff5c 	bl	8003388 <ST7920_SendCmd>
		HAL_Delay (1);
 80034d0:	2001      	movs	r0, #1
 80034d2:	f7fe f921 	bl	8001718 <HAL_Delay>
		ST7920_SendCmd(0x36);  // enable graphics
 80034d6:	2036      	movs	r0, #54	; 0x36
 80034d8:	f7ff ff56 	bl	8003388 <ST7920_SendCmd>
		HAL_Delay (1);
 80034dc:	2001      	movs	r0, #1
 80034de:	f7fe f91b 	bl	8001718 <HAL_Delay>
		Graphic_Check = 1;  // update the variable
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <ST7920_GraphicMode+0x5c>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  // update the variable
	}
}
 80034e8:	e00b      	b.n	8003502 <ST7920_GraphicMode+0x52>
	else if (enable == 0)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d108      	bne.n	8003502 <ST7920_GraphicMode+0x52>
		ST7920_SendCmd(0x30);  // 8 bit mode
 80034f0:	2030      	movs	r0, #48	; 0x30
 80034f2:	f7ff ff49 	bl	8003388 <ST7920_SendCmd>
		HAL_Delay (1);
 80034f6:	2001      	movs	r0, #1
 80034f8:	f7fe f90e 	bl	8001718 <HAL_Delay>
		Graphic_Check = 0;  // update the variable
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <ST7920_GraphicMode+0x5c>)
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	2000022c 	.word	0x2000022c

08003510 <ST7920_DrawBitmap>:

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 8003518:	2300      	movs	r3, #0
 800351a:	73bb      	strb	r3, [r7, #14]
 800351c:	e06a      	b.n	80035f4 <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 800351e:	7bbb      	ldrb	r3, [r7, #14]
 8003520:	2b1f      	cmp	r3, #31
 8003522:	d830      	bhi.n	8003586 <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8003524:	2300      	movs	r3, #0
 8003526:	73fb      	strb	r3, [r7, #15]
 8003528:	e029      	b.n	800357e <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 800352a:	7bbb      	ldrb	r3, [r7, #14]
 800352c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003530:	b2db      	uxtb	r3, r3
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff ff28 	bl	8003388 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800353e:	b2db      	uxtb	r3, r3
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff21 	bl	8003388 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	7bbb      	ldrb	r3, [r7, #14]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	461a      	mov	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff3d 	bl	80033d8 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	7bbb      	ldrb	r3, [r7, #14]
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	4413      	add	r3, r2
 800356a:	461a      	mov	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ff30 	bl	80033d8 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	3301      	adds	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b07      	cmp	r3, #7
 8003582:	d9d2      	bls.n	800352a <ST7920_DrawBitmap+0x1a>
 8003584:	e033      	b.n	80035ee <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e02d      	b.n	80035e8 <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 800358c:	7bbb      	ldrb	r3, [r7, #14]
 800358e:	3b20      	subs	r3, #32
 8003590:	b2db      	uxtb	r3, r3
 8003592:	b25b      	sxtb	r3, r3
 8003594:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003598:	b25b      	sxtb	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fef3 	bl	8003388 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	f063 0377 	orn	r3, r3, #119	; 0x77
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff feec 	bl	8003388 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	7bbb      	ldrb	r3, [r7, #14]
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	461a      	mov	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff ff08 	bl	80033d8 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	7bbb      	ldrb	r3, [r7, #14]
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	4413      	add	r3, r2
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fefb 	bl	80033d8 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	3301      	adds	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
 80035ea:	2b07      	cmp	r3, #7
 80035ec:	d9ce      	bls.n	800358c <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 80035ee:	7bbb      	ldrb	r3, [r7, #14]
 80035f0:	3301      	adds	r3, #1
 80035f2:	73bb      	strb	r3, [r7, #14]
 80035f4:	7bbb      	ldrb	r3, [r7, #14]
 80035f6:	2b3f      	cmp	r3, #63	; 0x3f
 80035f8:	d991      	bls.n	800351e <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 80035fa:	bf00      	nop
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 8003608:	4802      	ldr	r0, [pc, #8]	; (8003614 <ST7920_Update+0x10>)
 800360a:	f7ff ff81 	bl	8003510 <ST7920_DrawBitmap>
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000230 	.word	0x20000230

08003618 <ST7920_ClearBuffer>:

void ST7920_ClearBuffer(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
	memset(image, 0, 1024);
 800361c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003620:	2100      	movs	r1, #0
 8003622:	4802      	ldr	r0, [pc, #8]	; (800362c <ST7920_ClearBuffer+0x14>)
 8003624:	f000 fe98 	bl	8004358 <memset>
}
 8003628:	bf00      	nop
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000230 	.word	0x20000230

08003630 <ST7920_Clear>:


void ST7920_Clear()
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <ST7920_Clear+0x8c>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d134      	bne.n	80036a8 <ST7920_Clear+0x78>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 800363e:	2300      	movs	r3, #0
 8003640:	71bb      	strb	r3, [r7, #6]
 8003642:	e02d      	b.n	80036a0 <ST7920_Clear+0x70>
		{
			if(y < 32)
 8003644:	79bb      	ldrb	r3, [r7, #6]
 8003646:	2b1f      	cmp	r3, #31
 8003648:	d80a      	bhi.n	8003660 <ST7920_Clear+0x30>
			{
				ST7920_SendCmd(0x80 | y);
 800364a:	79bb      	ldrb	r3, [r7, #6]
 800364c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003650:	b2db      	uxtb	r3, r3
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fe98 	bl	8003388 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8003658:	2080      	movs	r0, #128	; 0x80
 800365a:	f7ff fe95 	bl	8003388 <ST7920_SendCmd>
 800365e:	e00d      	b.n	800367c <ST7920_Clear+0x4c>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8003660:	79bb      	ldrb	r3, [r7, #6]
 8003662:	3b20      	subs	r3, #32
 8003664:	b2db      	uxtb	r3, r3
 8003666:	b25b      	sxtb	r3, r3
 8003668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800366c:	b25b      	sxtb	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fe89 	bl	8003388 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8003676:	2088      	movs	r0, #136	; 0x88
 8003678:	f7ff fe86 	bl	8003388 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 800367c:	2300      	movs	r3, #0
 800367e:	71fb      	strb	r3, [r7, #7]
 8003680:	e008      	b.n	8003694 <ST7920_Clear+0x64>
			{
				ST7920_SendData(0);
 8003682:	2000      	movs	r0, #0
 8003684:	f7ff fea8 	bl	80033d8 <ST7920_SendData>
				ST7920_SendData(0);
 8003688:	2000      	movs	r0, #0
 800368a:	f7ff fea5 	bl	80033d8 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	3301      	adds	r3, #1
 8003692:	71fb      	strb	r3, [r7, #7]
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	2b07      	cmp	r3, #7
 8003698:	d9f3      	bls.n	8003682 <ST7920_Clear+0x52>
		for(y = 0; y < 64; y++)
 800369a:	79bb      	ldrb	r3, [r7, #6]
 800369c:	3301      	adds	r3, #1
 800369e:	71bb      	strb	r3, [r7, #6]
 80036a0:	79bb      	ldrb	r3, [r7, #6]
 80036a2:	2b3f      	cmp	r3, #63	; 0x3f
 80036a4:	d9ce      	bls.n	8003644 <ST7920_Clear+0x14>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 80036a6:	e005      	b.n	80036b4 <ST7920_Clear+0x84>
		ST7920_SendCmd(0x01);   // clear the display using command
 80036a8:	2001      	movs	r0, #1
 80036aa:	f7ff fe6d 	bl	8003388 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 80036ae:	2002      	movs	r0, #2
 80036b0:	f7fe f832 	bl	8001718 <HAL_Delay>
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	2000022c 	.word	0x2000022c

080036c0 <ST7920_Init>:


void ST7920_Init (void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80036c4:	2200      	movs	r2, #0
 80036c6:	2101      	movs	r1, #1
 80036c8:	481c      	ldr	r0, [pc, #112]	; (800373c <ST7920_Init+0x7c>)
 80036ca:	f7fe fcf2 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 80036ce:	200a      	movs	r0, #10
 80036d0:	f7fe f822 	bl	8001718 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 80036d4:	2201      	movs	r2, #1
 80036d6:	2101      	movs	r1, #1
 80036d8:	4818      	ldr	r0, [pc, #96]	; (800373c <ST7920_Init+0x7c>)
 80036da:	f7fe fcea 	bl	80020b2 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 80036de:	2032      	movs	r0, #50	; 0x32
 80036e0:	f7fe f81a 	bl	8001718 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 80036e4:	2030      	movs	r0, #48	; 0x30
 80036e6:	f7ff fe4f 	bl	8003388 <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 80036ea:	206e      	movs	r0, #110	; 0x6e
 80036ec:	f000 fb48 	bl	8003d80 <delay_us>

	ST7920_SendCmd(0x30);  // 8bit mode
 80036f0:	2030      	movs	r0, #48	; 0x30
 80036f2:	f7ff fe49 	bl	8003388 <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 80036f6:	2028      	movs	r0, #40	; 0x28
 80036f8:	f000 fb42 	bl	8003d80 <delay_us>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 80036fc:	2008      	movs	r0, #8
 80036fe:	f7ff fe43 	bl	8003388 <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 8003702:	206e      	movs	r0, #110	; 0x6e
 8003704:	f000 fb3c 	bl	8003d80 <delay_us>

	ST7920_SendCmd(0x01);  // clear screen
 8003708:	2001      	movs	r0, #1
 800370a:	f7ff fe3d 	bl	8003388 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 800370e:	200c      	movs	r0, #12
 8003710:	f7fe f802 	bl	8001718 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8003714:	2006      	movs	r0, #6
 8003716:	f7ff fe37 	bl	8003388 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 800371a:	2001      	movs	r0, #1
 800371c:	f7fd fffc 	bl	8001718 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8003720:	200c      	movs	r0, #12
 8003722:	f7ff fe31 	bl	8003388 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8003726:	2001      	movs	r0, #1
 8003728:	f7fd fff6 	bl	8001718 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 800372c:	2002      	movs	r0, #2
 800372e:	f7ff fe2b 	bl	8003388 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8003732:	2001      	movs	r0, #1
 8003734:	f7fd fff0 	bl	8001718 <HAL_Delay>

}
 8003738:	bf00      	nop
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40010c00 	.word	0x40010c00

08003740 <SetPixel>:


// set Pixel

void SetPixel(uint8_t x, uint8_t y)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	460a      	mov	r2, r1
 800374a:	71fb      	strb	r3, [r7, #7]
 800374c:	4613      	mov	r3, r2
 800374e:	71bb      	strb	r3, [r7, #6]
	if (y < numRows && x < numCols)
 8003750:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <SetPixel+0xb8>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	79ba      	ldrb	r2, [r7, #6]
 8003756:	429a      	cmp	r2, r3
 8003758:	d248      	bcs.n	80037ec <SetPixel+0xac>
 800375a:	4b28      	ldr	r3, [pc, #160]	; (80037fc <SetPixel+0xbc>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	79fa      	ldrb	r2, [r7, #7]
 8003760:	429a      	cmp	r2, r3
 8003762:	d243      	bcs.n	80037ec <SetPixel+0xac>
	{
		uint8_t *p = image + ((y * (numCols/8)) + (x/8));
 8003764:	79bb      	ldrb	r3, [r7, #6]
 8003766:	4a25      	ldr	r2, [pc, #148]	; (80037fc <SetPixel+0xbc>)
 8003768:	7812      	ldrb	r2, [r2, #0]
 800376a:	08d2      	lsrs	r2, r2, #3
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	79fa      	ldrb	r2, [r7, #7]
 8003774:	08d2      	lsrs	r2, r2, #3
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	4413      	add	r3, r2
 800377a:	461a      	mov	r2, r3
 800377c:	4b20      	ldr	r3, [pc, #128]	; (8003800 <SetPixel+0xc0>)
 800377e:	4413      	add	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
		*p |= 0x80u >> (x%8);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	781a      	ldrb	r2, [r3, #0]
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	2180      	movs	r1, #128	; 0x80
 800378e:	fa21 f303 	lsr.w	r3, r1, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	4313      	orrs	r3, r2
 8003796:	b2da      	uxtb	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	701a      	strb	r2, [r3, #0]

		*image = *p;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	4b17      	ldr	r3, [pc, #92]	; (8003800 <SetPixel+0xc0>)
 80037a2:	701a      	strb	r2, [r3, #0]

		// Change the dirty rectangle to account for a pixel being dirty (we assume it was changed)
		if (startRow > y) { startRow = y; }
 80037a4:	4b17      	ldr	r3, [pc, #92]	; (8003804 <SetPixel+0xc4>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	79ba      	ldrb	r2, [r7, #6]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d202      	bcs.n	80037b4 <SetPixel+0x74>
 80037ae:	4a15      	ldr	r2, [pc, #84]	; (8003804 <SetPixel+0xc4>)
 80037b0:	79bb      	ldrb	r3, [r7, #6]
 80037b2:	7013      	strb	r3, [r2, #0]
		if (endRow <= y)  { endRow = y + 1; }
 80037b4:	4b14      	ldr	r3, [pc, #80]	; (8003808 <SetPixel+0xc8>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	79ba      	ldrb	r2, [r7, #6]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d304      	bcc.n	80037c8 <SetPixel+0x88>
 80037be:	79bb      	ldrb	r3, [r7, #6]
 80037c0:	3301      	adds	r3, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	4b10      	ldr	r3, [pc, #64]	; (8003808 <SetPixel+0xc8>)
 80037c6:	701a      	strb	r2, [r3, #0]
		if (startCol > x) { startCol = x; }
 80037c8:	4b10      	ldr	r3, [pc, #64]	; (800380c <SetPixel+0xcc>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	79fa      	ldrb	r2, [r7, #7]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d202      	bcs.n	80037d8 <SetPixel+0x98>
 80037d2:	4a0e      	ldr	r2, [pc, #56]	; (800380c <SetPixel+0xcc>)
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	7013      	strb	r3, [r2, #0]
		if (endCol <= x)  { endCol = x + 1; }
 80037d8:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <SetPixel+0xd0>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	79fa      	ldrb	r2, [r7, #7]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d304      	bcc.n	80037ec <SetPixel+0xac>
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	3301      	adds	r3, #1
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	4b09      	ldr	r3, [pc, #36]	; (8003810 <SetPixel+0xd0>)
 80037ea:	701a      	strb	r2, [r3, #0]


	}

}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000015 	.word	0x20000015
 80037fc:	20000016 	.word	0x20000016
 8003800:	20000230 	.word	0x20000230
 8003804:	20000228 	.word	0x20000228
 8003808:	2000022a 	.word	0x2000022a
 800380c:	20000229 	.word	0x20000229
 8003810:	2000022b 	.word	0x2000022b

08003814 <DrawLine>:
/* draw a line
 * start point (X0, Y0)
 * end point (X1, Y1)
 */
void DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b089      	sub	sp, #36	; 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	4604      	mov	r4, r0
 800381c:	4608      	mov	r0, r1
 800381e:	4611      	mov	r1, r2
 8003820:	461a      	mov	r2, r3
 8003822:	4623      	mov	r3, r4
 8003824:	71fb      	strb	r3, [r7, #7]
 8003826:	4603      	mov	r3, r0
 8003828:	71bb      	strb	r3, [r7, #6]
 800382a:	460b      	mov	r3, r1
 800382c:	717b      	strb	r3, [r7, #5]
 800382e:	4613      	mov	r3, r2
 8003830:	713b      	strb	r3, [r7, #4]
	int dx = (x1 >= x0) ? x1 - x0 : x0 - x1;
 8003832:	797a      	ldrb	r2, [r7, #5]
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	429a      	cmp	r2, r3
 8003838:	d303      	bcc.n	8003842 <DrawLine+0x2e>
 800383a:	797a      	ldrb	r2, [r7, #5]
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	e002      	b.n	8003848 <DrawLine+0x34>
 8003842:	79fa      	ldrb	r2, [r7, #7]
 8003844:	797b      	ldrb	r3, [r7, #5]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	61bb      	str	r3, [r7, #24]
	int dy = (y1 >= y0) ? y1 - y0 : y0 - y1;
 800384a:	793a      	ldrb	r2, [r7, #4]
 800384c:	79bb      	ldrb	r3, [r7, #6]
 800384e:	429a      	cmp	r2, r3
 8003850:	d303      	bcc.n	800385a <DrawLine+0x46>
 8003852:	793a      	ldrb	r2, [r7, #4]
 8003854:	79bb      	ldrb	r3, [r7, #6]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	e002      	b.n	8003860 <DrawLine+0x4c>
 800385a:	79ba      	ldrb	r2, [r7, #6]
 800385c:	793b      	ldrb	r3, [r7, #4]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	617b      	str	r3, [r7, #20]
	int sx = (x0 < x1) ? 1 : -1;
 8003862:	79fa      	ldrb	r2, [r7, #7]
 8003864:	797b      	ldrb	r3, [r7, #5]
 8003866:	429a      	cmp	r2, r3
 8003868:	d201      	bcs.n	800386e <DrawLine+0x5a>
 800386a:	2301      	movs	r3, #1
 800386c:	e001      	b.n	8003872 <DrawLine+0x5e>
 800386e:	f04f 33ff 	mov.w	r3, #4294967295
 8003872:	613b      	str	r3, [r7, #16]
	int sy = (y0 < y1) ? 1 : -1;
 8003874:	79ba      	ldrb	r2, [r7, #6]
 8003876:	793b      	ldrb	r3, [r7, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	d201      	bcs.n	8003880 <DrawLine+0x6c>
 800387c:	2301      	movs	r3, #1
 800387e:	e001      	b.n	8003884 <DrawLine+0x70>
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
 8003884:	60fb      	str	r3, [r7, #12]
	int err = dx - dy;
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	61fb      	str	r3, [r7, #28]

	for (;;)
	{
		SetPixel(x0, y0);
 800388e:	79ba      	ldrb	r2, [r7, #6]
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff53 	bl	8003740 <SetPixel>
		if (x0 == x1 && y0 == y1) break;
 800389a:	79fa      	ldrb	r2, [r7, #7]
 800389c:	797b      	ldrb	r3, [r7, #5]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d103      	bne.n	80038aa <DrawLine+0x96>
 80038a2:	79ba      	ldrb	r2, [r7, #6]
 80038a4:	793b      	ldrb	r3, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d01e      	beq.n	80038e8 <DrawLine+0xd4>
		int e2 = err + err;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
		if (e2 > -dy)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	425b      	negs	r3, r3
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	dd08      	ble.n	80038cc <DrawLine+0xb8>
		{
			err -= dy;
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	61fb      	str	r3, [r7, #28]
			x0 += sx;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	4413      	add	r3, r2
 80038ca:	71fb      	strb	r3, [r7, #7]
		}
		if (e2 < dx)
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	dadc      	bge.n	800388e <DrawLine+0x7a>
		{
			err += dx;
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	4413      	add	r3, r2
 80038da:	61fb      	str	r3, [r7, #28]
			y0 += sy;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	79bb      	ldrb	r3, [r7, #6]
 80038e2:	4413      	add	r3, r2
 80038e4:	71bb      	strb	r3, [r7, #6]
	{
 80038e6:	e7d2      	b.n	800388e <DrawLine+0x7a>
		if (x0 == x1 && y0 == y1) break;
 80038e8:	bf00      	nop
		}
	}
}
 80038ea:	bf00      	nop
 80038ec:	3724      	adds	r7, #36	; 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd90      	pop	{r4, r7, pc}
	...

080038f4 <DrawRectangle>:
 * start point (x,y)
 * w -> width
 * h -> height
 */
void DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4604      	mov	r4, r0
 80038fc:	4608      	mov	r0, r1
 80038fe:	4611      	mov	r1, r2
 8003900:	461a      	mov	r2, r3
 8003902:	4623      	mov	r3, r4
 8003904:	80fb      	strh	r3, [r7, #6]
 8003906:	4603      	mov	r3, r0
 8003908:	80bb      	strh	r3, [r7, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	807b      	strh	r3, [r7, #2]
 800390e:	4613      	mov	r3, r2
 8003910:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
			x >= numCols ||
 8003912:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <DrawRectangle+0x10c>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
	if (
 8003918:	88fa      	ldrh	r2, [r7, #6]
 800391a:	429a      	cmp	r2, r3
 800391c:	d26b      	bcs.n	80039f6 <DrawRectangle+0x102>
			y >= numRows
 800391e:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <DrawRectangle+0x110>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
			x >= numCols ||
 8003924:	88ba      	ldrh	r2, [r7, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	d265      	bcs.n	80039f6 <DrawRectangle+0x102>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	887b      	ldrh	r3, [r7, #2]
 800392e:	4413      	add	r3, r2
 8003930:	4a33      	ldr	r2, [pc, #204]	; (8003a00 <DrawRectangle+0x10c>)
 8003932:	7812      	ldrb	r2, [r2, #0]
 8003934:	4293      	cmp	r3, r2
 8003936:	db05      	blt.n	8003944 <DrawRectangle+0x50>
		w = numCols - x;
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <DrawRectangle+0x10c>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	b29a      	uxth	r2, r3
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 8003944:	88ba      	ldrh	r2, [r7, #4]
 8003946:	883b      	ldrh	r3, [r7, #0]
 8003948:	4413      	add	r3, r2
 800394a:	4a2e      	ldr	r2, [pc, #184]	; (8003a04 <DrawRectangle+0x110>)
 800394c:	7812      	ldrb	r2, [r2, #0]
 800394e:	4293      	cmp	r3, r2
 8003950:	db05      	blt.n	800395e <DrawRectangle+0x6a>
		h = numRows - y;
 8003952:	4b2c      	ldr	r3, [pc, #176]	; (8003a04 <DrawRectangle+0x110>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b29a      	uxth	r2, r3
 8003958:	88bb      	ldrh	r3, [r7, #4]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	DrawLine(x, y, x + w, y);         /* Top line */
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	b2d8      	uxtb	r0, r3
 8003962:	88bb      	ldrh	r3, [r7, #4]
 8003964:	b2d9      	uxtb	r1, r3
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	887b      	ldrh	r3, [r7, #2]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	4413      	add	r3, r2
 8003970:	b2da      	uxtb	r2, r3
 8003972:	88bb      	ldrh	r3, [r7, #4]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f7ff ff4d 	bl	8003814 <DrawLine>
	DrawLine(x, y + h, x + w, y + h); /* Bottom line */
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	b2d8      	uxtb	r0, r3
 800397e:	88bb      	ldrh	r3, [r7, #4]
 8003980:	b2da      	uxtb	r2, r3
 8003982:	883b      	ldrh	r3, [r7, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	4413      	add	r3, r2
 8003988:	b2d9      	uxtb	r1, r3
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	887b      	ldrh	r3, [r7, #2]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	4413      	add	r3, r2
 8003994:	b2dc      	uxtb	r4, r3
 8003996:	88bb      	ldrh	r3, [r7, #4]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	883b      	ldrh	r3, [r7, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	4413      	add	r3, r2
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	4622      	mov	r2, r4
 80039a4:	f7ff ff36 	bl	8003814 <DrawLine>
	DrawLine(x, y, x, y + h);         /* Left line */
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	b2d8      	uxtb	r0, r3
 80039ac:	88bb      	ldrh	r3, [r7, #4]
 80039ae:	b2d9      	uxtb	r1, r3
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	b2dc      	uxtb	r4, r3
 80039b4:	88bb      	ldrh	r3, [r7, #4]
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	883b      	ldrh	r3, [r7, #0]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	4413      	add	r3, r2
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	4622      	mov	r2, r4
 80039c2:	f7ff ff27 	bl	8003814 <DrawLine>
	DrawLine(x + w, y, x + w, y + h); /* Right line */
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	887b      	ldrh	r3, [r7, #2]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	b2d8      	uxtb	r0, r3
 80039d2:	88bb      	ldrh	r3, [r7, #4]
 80039d4:	b2d9      	uxtb	r1, r3
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	887b      	ldrh	r3, [r7, #2]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	4413      	add	r3, r2
 80039e0:	b2dc      	uxtb	r4, r3
 80039e2:	88bb      	ldrh	r3, [r7, #4]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	883b      	ldrh	r3, [r7, #0]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	4622      	mov	r2, r4
 80039f0:	f7ff ff10 	bl	8003814 <DrawLine>
 80039f4:	e000      	b.n	80039f8 <DrawRectangle+0x104>
		return;
 80039f6:	bf00      	nop
}
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd90      	pop	{r4, r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000016 	.word	0x20000016
 8003a04:	20000015 	.word	0x20000015

08003a08 <DrawFilledRectangle>:
 * Start point (x,y)
 * w -> width
 * h -> height
 */
void DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4604      	mov	r4, r0
 8003a10:	4608      	mov	r0, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	461a      	mov	r2, r3
 8003a16:	4623      	mov	r3, r4
 8003a18:	80fb      	strh	r3, [r7, #6]
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	80bb      	strh	r3, [r7, #4]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	807b      	strh	r3, [r7, #2]
 8003a22:	4613      	mov	r3, r2
 8003a24:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
			x >= numCols ||
 8003a26:	4b25      	ldr	r3, [pc, #148]	; (8003abc <DrawFilledRectangle+0xb4>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	b29b      	uxth	r3, r3
	if (
 8003a2c:	88fa      	ldrh	r2, [r7, #6]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d240      	bcs.n	8003ab4 <DrawFilledRectangle+0xac>
			y >= numRows
 8003a32:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <DrawFilledRectangle+0xb8>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
			x >= numCols ||
 8003a38:	88ba      	ldrh	r2, [r7, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d23a      	bcs.n	8003ab4 <DrawFilledRectangle+0xac>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	887b      	ldrh	r3, [r7, #2]
 8003a42:	4413      	add	r3, r2
 8003a44:	4a1d      	ldr	r2, [pc, #116]	; (8003abc <DrawFilledRectangle+0xb4>)
 8003a46:	7812      	ldrb	r2, [r2, #0]
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	db05      	blt.n	8003a58 <DrawFilledRectangle+0x50>
		w = numCols - x;
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <DrawFilledRectangle+0xb4>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 8003a58:	88ba      	ldrh	r2, [r7, #4]
 8003a5a:	883b      	ldrh	r3, [r7, #0]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <DrawFilledRectangle+0xb8>)
 8003a60:	7812      	ldrb	r2, [r2, #0]
 8003a62:	4293      	cmp	r3, r2
 8003a64:	db05      	blt.n	8003a72 <DrawFilledRectangle+0x6a>
		h = numRows - y;
 8003a66:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <DrawFilledRectangle+0xb8>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	88bb      	ldrh	r3, [r7, #4]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
 8003a76:	e017      	b.n	8003aa8 <DrawFilledRectangle+0xa0>
		/* Draw lines */
		DrawLine(x, y + i, x + w, y + i);
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	b2d8      	uxtb	r0, r3
 8003a7c:	88bb      	ldrh	r3, [r7, #4]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	4413      	add	r3, r2
 8003a84:	b2d9      	uxtb	r1, r3
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	b2dc      	uxtb	r4, r3
 8003a92:	88bb      	ldrh	r3, [r7, #4]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	4413      	add	r3, r2
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	4622      	mov	r2, r4
 8003a9e:	f7ff feb9 	bl	8003814 <DrawLine>
	for (i = 0; i <= h; i++) {
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	883a      	ldrh	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d2e2      	bcs.n	8003a78 <DrawFilledRectangle+0x70>
 8003ab2:	e000      	b.n	8003ab6 <DrawFilledRectangle+0xae>
		return;
 8003ab4:	bf00      	nop
	}
}
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd90      	pop	{r4, r7, pc}
 8003abc:	20000016 	.word	0x20000016
 8003ac0:	20000015 	.word	0x20000015

08003ac4 <ST7920_scroll>:
	}

	ST7920_SendCmd(col);

}
void ST7920_scroll(uint16_t row, char *_string, uint16_t times, uint16_t del_ms){
 8003ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac8:	b093      	sub	sp, #76	; 0x4c
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6139      	str	r1, [r7, #16]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	82fb      	strh	r3, [r7, #22]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	82bb      	strh	r3, [r7, #20]
 8003ada:	4613      	mov	r3, r2
 8003adc:	81fb      	strh	r3, [r7, #14]
 8003ade:	466b      	mov	r3, sp
 8003ae0:	461e      	mov	r6, r3



	uint16_t textLenght = strlen(_string);
 8003ae2:	6938      	ldr	r0, [r7, #16]
 8003ae4:	f7fc fb32 	bl	800014c <strlen>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	863b      	strh	r3, [r7, #48]	; 0x30
	uint16_t iter = (textLenght + (16-textLenght%16));//(16-textLenght%16) to make it a multiple of screen width
 8003aec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003aee:	f023 030f 	bic.w	r3, r3, #15
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3310      	adds	r3, #16
 8003af6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	const int DUMMY_SIZE = 16;
 8003af8:	2310      	movs	r3, #16
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28

	char dummy_string[DUMMY_SIZE+1];
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	3301      	adds	r3, #1
 8003b04:	2200      	movs	r2, #0
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	00cb      	lsls	r3, r1, #3
 8003b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b1a:	4684      	mov	ip, r0
 8003b1c:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8003b20:	4601      	mov	r1, r0
 8003b22:	00ca      	lsls	r2, r1, #3
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	3301      	adds	r3, #1
 8003b28:	2200      	movs	r2, #0
 8003b2a:	469a      	mov	sl, r3
 8003b2c:	4693      	mov	fp, r2
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	3301      	adds	r3, #1
 8003b46:	3307      	adds	r3, #7
 8003b48:	08db      	lsrs	r3, r3, #3
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	ebad 0d03 	sub.w	sp, sp, r3
 8003b50:	466b      	mov	r3, sp
 8003b52:	3300      	adds	r3, #0
 8003b54:	623b      	str	r3, [r7, #32]
	char dummy_string2[DUMMY_SIZE+1];
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	2200      	movs	r2, #0
 8003b60:	4698      	mov	r8, r3
 8003b62:	4691      	mov	r9, r2
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	461c      	mov	r4, r3
 8003b80:	4615      	mov	r5, r2
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	00eb      	lsls	r3, r5, #3
 8003b8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b90:	00e2      	lsls	r2, r4, #3
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b94:	3301      	adds	r3, #1
 8003b96:	3307      	adds	r3, #7
 8003b98:	08db      	lsrs	r3, r3, #3
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	ebad 0d03 	sub.w	sp, sp, r3
 8003ba0:	466b      	mov	r3, sp
 8003ba2:	3300      	adds	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]

	ST7920_GraphicMode(0);
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	f7ff fc82 	bl	80034b0 <ST7920_GraphicMode>

	for(uint16_t k = 0; k<times; k++){ // controll the number of times we scroll
 8003bac:	2300      	movs	r3, #0
 8003bae:	867b      	strh	r3, [r7, #50]	; 0x32
 8003bb0:	e0d0      	b.n	8003d54 <ST7920_scroll+0x290>
		int q = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
		int t = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	63bb      	str	r3, [r7, #56]	; 0x38
		for (int i = 0; i <= 16; i++) {
 8003bba:	2300      	movs	r3, #0
 8003bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bbe:	e00c      	b.n	8003bda <ST7920_scroll+0x116>
				dummy_string[i] = ' ';
 8003bc0:	6a3a      	ldr	r2, [r7, #32]
 8003bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc4:	4413      	add	r3, r2
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	701a      	strb	r2, [r3, #0]
				dummy_string2[i] = ' ';
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bce:	4413      	add	r3, r2
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i <= 16; i++) {
 8003bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	ddef      	ble.n	8003bc0 <ST7920_scroll+0xfc>
			}

			dummy_string[DUMMY_SIZE] = '\0'; // add null to mark end of string
 8003be0:	6a3a      	ldr	r2, [r7, #32]
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	4413      	add	r3, r2
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
			dummy_string2[DUMMY_SIZE] = '\0'; // add null to mark end of string
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	4413      	add	r3, r2
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]

		for(uint16_t i = 0; i<=iter; i++){ // controls a text moving from right to left
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003bfa:	e0a2      	b.n	8003d42 <ST7920_scroll+0x27e>

			if(i>0 && i%16 == 0){
 8003bfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <ST7920_scroll+0x154>
 8003c04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <ST7920_scroll+0x154>
				q++;
 8003c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c14:	3301      	adds	r3, #1
 8003c16:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if(i<DUMMY_SIZE){ // 0-15
 8003c18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	dd23      	ble.n	8003c6a <ST7920_scroll+0x1a6>
				// copy from pos 15-i and ith times


				for(uint16_t j = 0; j<(i+1); j++){
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c28:	e012      	b.n	8003c50 <ST7920_scroll+0x18c>
					//copy and fill the remaining spaces
					dummy_string[(15-i)+j] = _string[j];
 8003c2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	441a      	add	r2, r3
 8003c32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c36:	f1c3 010f 	rsb	r1, r3, #15
 8003c3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c3e:	440b      	add	r3, r1
 8003c40:	7811      	ldrb	r1, [r2, #0]
 8003c42:	6a3a      	ldr	r2, [r7, #32]
 8003c44:	54d1      	strb	r1, [r2, r3]
				for(uint16_t j = 0; j<(i+1); j++){
 8003c46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c50:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003c54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d2e6      	bcs.n	8003c2a <ST7920_scroll+0x166>
				}

				ST7920_SendString(row,0, dummy_string); // sets cusor properly and prints
 8003c5c:	8afb      	ldrh	r3, [r7, #22]
 8003c5e:	6a3a      	ldr	r2, [r7, #32]
 8003c60:	2100      	movs	r1, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fbe0 	bl	8003428 <ST7920_SendString>
 8003c68:	e062      	b.n	8003d30 <ST7920_scroll+0x26c>
			}
			else if (i>= DUMMY_SIZE && i<textLenght){ // 16 -- to end
 8003c6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c70:	429a      	cmp	r2, r3
 8003c72:	dc2e      	bgt.n	8003cd2 <ST7920_scroll+0x20e>
 8003c74:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003c78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d229      	bcs.n	8003cd2 <ST7920_scroll+0x20e>
				// i>= 16, we do 16 copies from i%16 to i
				for(uint16_t j = 0; j<DUMMY_SIZE; j++){
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003c84:	e019      	b.n	8003cba <ST7920_scroll+0x1f6>
					//copy and fill the remaining spaces
					dummy_string[j] = _string[(i+1)%DUMMY_SIZE + j];
 8003c86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8e:	fb93 f2f2 	sdiv	r2, r3, r2
 8003c92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c94:	fb01 f202 	mul.w	r2, r1, r2
 8003c98:	1a9a      	subs	r2, r3, r2
 8003c9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c9e:	4413      	add	r3, r2
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	441a      	add	r2, r3
 8003ca6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003caa:	7811      	ldrb	r1, [r2, #0]
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	54d1      	strb	r1, [r2, r3]
				for(uint16_t j = 0; j<DUMMY_SIZE; j++){
 8003cb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003cba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	dce0      	bgt.n	8003c86 <ST7920_scroll+0x1c2>
				}

				ST7920_SendString(row,0, dummy_string);
 8003cc4:	8afb      	ldrh	r3, [r7, #22]
 8003cc6:	6a3a      	ldr	r2, [r7, #32]
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fbac 	bl	8003428 <ST7920_SendString>
 8003cd0:	e02e      	b.n	8003d30 <ST7920_scroll+0x26c>
			}
			else{
				t++;
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	63bb      	str	r3, [r7, #56]	; 0x38
				for(uint16_t j = 0; j<DUMMY_SIZE; j++){
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003cde:	e01c      	b.n	8003d1a <ST7920_scroll+0x256>
					//copy and fill the remaining spaces
					if(j<=(DUMMY_SIZE-1 - t)){
 8003ce0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	1e59      	subs	r1, r3, #1
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	1acb      	subs	r3, r1, r3
 8003cec:	429a      	cmp	r2, r3
 8003cee:	dc0a      	bgt.n	8003d06 <ST7920_scroll+0x242>
						dummy_string2[j] = dummy_string[t+j] ;
 8003cf0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf6:	441a      	add	r2, r3
 8003cf8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003cfc:	6a39      	ldr	r1, [r7, #32]
 8003cfe:	5c89      	ldrb	r1, [r1, r2]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	54d1      	strb	r1, [r2, r3]
 8003d04:	e004      	b.n	8003d10 <ST7920_scroll+0x24c>
					}
					else{
						dummy_string2[j] =' ';
 8003d06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	2120      	movs	r1, #32
 8003d0e:	54d1      	strb	r1, [r2, r3]
				for(uint16_t j = 0; j<DUMMY_SIZE; j++){
 8003d10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d14:	3301      	adds	r3, #1
 8003d16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003d1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d20:	429a      	cmp	r2, r3
 8003d22:	dcdd      	bgt.n	8003ce0 <ST7920_scroll+0x21c>
					}

				}

				//memcpy(dummy_string2, &dummy_string[t], 16-t);
				ST7920_SendString(row,0, dummy_string2);
 8003d24:	8afb      	ldrh	r3, [r7, #22]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fb7c 	bl	8003428 <ST7920_SendString>
			}




			HAL_Delay(del_ms);
 8003d30:	89fb      	ldrh	r3, [r7, #14]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fd fcf0 	bl	8001718 <HAL_Delay>
		for(uint16_t i = 0; i<=iter; i++){ // controls a text moving from right to left
 8003d38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003d42:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003d46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	f67f af57 	bls.w	8003bfc <ST7920_scroll+0x138>
	for(uint16_t k = 0; k<times; k++){ // controll the number of times we scroll
 8003d4e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003d50:	3301      	adds	r3, #1
 8003d52:	867b      	strh	r3, [r7, #50]	; 0x32
 8003d54:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003d56:	8abb      	ldrh	r3, [r7, #20]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	f4ff af2a 	bcc.w	8003bb2 <ST7920_scroll+0xee>
 8003d5e:	46b5      	mov	sp, r6



		}
	}
}
 8003d60:	bf00      	nop
 8003d62:	374c      	adds	r7, #76	; 0x4c
 8003d64:	46bd      	mov	sp, r7
 8003d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003d6c <delay_init>:

extern TIM_HandleTypeDef htim2;


void delay_init ()
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);  // change this according to ur setup
 8003d70:	4802      	ldr	r0, [pc, #8]	; (8003d7c <delay_init+0x10>)
 8003d72:	f7fe fe4f 	bl	8002a14 <HAL_TIM_Base_Start>
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000164 	.word	0x20000164

08003d80 <delay_us>:

void delay_us (uint16_t delay)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // reset the counter
 8003d8a:	4b08      	ldr	r3, [pc, #32]	; (8003dac <delay_us+0x2c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<delay);  // wait for the delay to complete
 8003d92:	bf00      	nop
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <delay_us+0x2c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d3f9      	bcc.n	8003d94 <delay_us+0x14>
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	20000164 	.word	0x20000164

08003db0 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	609a      	str	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	2203      	movs	r2, #3
 8003de4:	4798      	blx	r3
    }
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff ffd5 	bl	8003dca <_ZNSt14_Function_baseD1Ev>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <_ZN10BA_ENCODERC1Ev>:
 *      Author: BETUEL KITI
 */

#include "BAENCODER.h"

BA_ENCODER::BA_ENCODER()
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	739a      	strb	r2, [r3, #14]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	73da      	strb	r2, [r3, #15]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	611a      	str	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e4a:	615a      	str	r2, [r3, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	619a      	str	r2, [r3, #24]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	839a      	strh	r2, [r3, #28]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2020 	strb.w	r2, [r3, #32]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3328      	adds	r3, #40	; 0x28
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f9fc 	bl	800428a <_ZNSt8functionIFvvEEC1Ev>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3338      	adds	r3, #56	; 0x38
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f9f7 	bl	800428a <_ZNSt8functionIFvvEEC1Ev>
{
	// TODO Auto-generated constructor stub
}
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <_ZN10BA_ENCODERD1Ev>:

BA_ENCODER::~BA_ENCODER()
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3338      	adds	r3, #56	; 0x38
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ffac 	bl	8003e10 <_ZNSt8functionIFvvEED1Ev>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3328      	adds	r3, #40	; 0x28
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ffa7 	bl	8003e10 <_ZNSt8functionIFvvEED1Ev>
{
	// TODO Auto-generated destructor stub
}
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <_ZN10BA_ENCODER11initEncoderEP12GPIO_TypeDeftS1_t>:

void BA_ENCODER::initEncoder(GPIO_TypeDef *portA,uint16_t pinA, GPIO_TypeDef *portB,uint16_t pinB)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	80fb      	strh	r3, [r7, #6]
	_portA = portA;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	601a      	str	r2, [r3, #0]
	_portB = portB;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	609a      	str	r2, [r3, #8]
	_pinA = pinA;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	809a      	strh	r2, [r3, #4]
	_pinB = pinB;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8b3a      	ldrh	r2, [r7, #24]
 8003ef2:	819a      	strh	r2, [r3, #12]


	m_bStateA  = HAL_GPIO_ReadPin(_portA,_pinA);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	889b      	ldrh	r3, [r3, #4]
 8003efc:	4619      	mov	r1, r3
 8003efe:	4610      	mov	r0, r2
 8003f00:	f7fe f8c0 	bl	8002084 <HAL_GPIO_ReadPin>
 8003f04:	4603      	mov	r3, r0
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	m_bStateB  = HAL_GPIO_ReadPin(_portB,_pinB);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	899b      	ldrh	r3, [r3, #12]
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f7fe f8b3 	bl	8002084 <HAL_GPIO_ReadPin>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <_ZN10BA_ENCODER18setMaxEncoderValueEm>:
uint32_t BA_ENCODER::getMaxEncoderValue() const {
	return m_u32MaxEncoderValue;
}

void BA_ENCODER::setMaxEncoderValue(
		uint32_t arg_u32MaxValue) {
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
	m_u32MaxEncoderValue = arg_u32MaxValue;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	615a      	str	r2, [r3, #20]
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <_ZN10BA_ENCODER18setMinEncoderValueEm>:
uint32_t BA_ENCODER::getMinEncoderValue() const
{
	return m_u32MinEncoderValue;
}
void BA_ENCODER::setMinEncoderValue(uint32_t arg_u32MinValue)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
	m_u32MinEncoderValue = arg_u32MinValue;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	619a      	str	r2, [r3, #24]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <_ZN10BA_ENCODER16setIncrementStepEt>:
uint16_t BA_ENCODER::getIncrementStep() const
{
	return u16_IncrementStep;
}
void BA_ENCODER::setIncrementStep(uint16_t arg_u16IncrementStep)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]
	u16_IncrementStep = arg_u16IncrementStep;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	887a      	ldrh	r2, [r7, #2]
 8003f74:	839a      	strh	r2, [r3, #28]
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <_ZNK10BA_ENCODER22getCurrentEncoderValueEv>:

uint32_t BA_ENCODER::getCurrentEncoderValue() const {
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	return m_u32ActualEncoderValue;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <_ZN10BA_ENCODER13HandleForwardEv>:

void BA_ENCODER::setUserForwardCallback(ForwardCallback userForwardCallback) {
	UserForwardCallback = userForwardCallback;
}

void BA_ENCODER::HandleForward() {
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]

	m_u32ActualEncoderValue += u16_IncrementStep;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	8b92      	ldrh	r2, [r2, #28]
 8003fa6:	441a      	add	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	611a      	str	r2, [r3, #16]
	if(m_u32ActualEncoderValue > m_u32MaxEncoderValue)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d903      	bls.n	8003fc0 <_ZN10BA_ENCODER13HandleForwardEv+0x2a>
	{
		m_u32ActualEncoderValue = m_u32MaxEncoderValue;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	611a      	str	r2, [r3, #16]
	}


	// execute forward callback
	if(UserForwardCallback){
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3328      	adds	r3, #40	; 0x28
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f96d 	bl	80042a4 <_ZNKSt8functionIFvvEEcvbEv>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <_ZN10BA_ENCODER13HandleForwardEv+0x44>
		UserForwardCallback();
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3328      	adds	r3, #40	; 0x28
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f975 	bl	80042c4 <_ZNKSt8functionIFvvEEclEv>
	}


}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <_ZN10BA_ENCODER14HandleBackwardEv>:

void BA_ENCODER::HandleBackward() {
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]



	if (m_u32ActualEncoderValue > u16_IncrementStep)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	8b92      	ldrh	r2, [r2, #28]
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d907      	bls.n	8004006 <_ZN10BA_ENCODER14HandleBackwardEv+0x24>
	{
		m_u32ActualEncoderValue -= u16_IncrementStep;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	8b92      	ldrh	r2, [r2, #28]
 8003ffe:	1a9a      	subs	r2, r3, r2
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	611a      	str	r2, [r3, #16]
 8004004:	e003      	b.n	800400e <_ZN10BA_ENCODER14HandleBackwardEv+0x2c>
	}
	else{
		m_u32ActualEncoderValue = m_u32MinEncoderValue;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	611a      	str	r2, [r3, #16]
	}
	// execute backward callback
	if(UserBackwardCallback){
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3338      	adds	r3, #56	; 0x38
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f946 	bl	80042a4 <_ZNKSt8functionIFvvEEcvbEv>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <_ZN10BA_ENCODER14HandleBackwardEv+0x46>
		UserBackwardCallback();
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3338      	adds	r3, #56	; 0x38
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f94e 	bl	80042c4 <_ZNKSt8functionIFvvEEclEv>
	}



}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <_ZN10BA_ENCODER16HandleGPIOEventsERt>:

void BA_ENCODER::HandleGPIOEvents(uint16_t& which_pin){
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
	 *  so state for CCW 2 -> 0 -> 1 -> 3 -> 2 = ccw direction
	 *
	 */

	//store previous
	if(which_pin == _pinA || which_pin == _pinB){
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	881a      	ldrh	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	889b      	ldrh	r3, [r3, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	d006      	beq.n	8004054 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x24>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	881a      	ldrh	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	899b      	ldrh	r3, [r3, #12]
 800404e:	429a      	cmp	r2, r3
 8004050:	f040 810a 	bne.w	8004268 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x238>

		m_bPrevStateA = m_bStateA;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		m_bPrevStateB = m_bStateB;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		// store current
		if(HAL_GPIO_ReadPin(_portA,_pinA)){
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	889b      	ldrh	r3, [r3, #4]
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f7fe f804 	bl	8002084 <HAL_GPIO_ReadPin>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	bf14      	ite	ne
 8004082:	2301      	movne	r3, #1
 8004084:	2300      	moveq	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x66>
			m_bStateA = 1;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004094:	e003      	b.n	800409e <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x6e>
		}
		else{
			m_bStateA = 0;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}

		if( HAL_GPIO_ReadPin(_portB,_pinB)){
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	899b      	ldrh	r3, [r3, #12]
 80040a6:	4619      	mov	r1, r3
 80040a8:	4610      	mov	r0, r2
 80040aa:	f7fd ffeb 	bl	8002084 <HAL_GPIO_ReadPin>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x98>
			m_bStateB = 1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80040c6:	e003      	b.n	80040d0 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0xa0>
		}
		else{
			m_bStateB = 0;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}

		compareByte[0] = 0xFF & ( (m_bPrevStateA<<1)|(m_bPrevStateB<<0) );
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	b25a      	sxtb	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040e0:	b25b      	sxtb	r3, r3
 80040e2:	4313      	orrs	r3, r2
 80040e4:	b25b      	sxtb	r3, r3
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	779a      	strb	r2, [r3, #30]

		compareByte[1] = 0xFF & ( (m_bStateA<<1)|(m_bStateB<<0) );
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	b25a      	sxtb	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80040fc:	b25b      	sxtb	r3, r3
 80040fe:	4313      	orrs	r3, r2
 8004100:	b25b      	sxtb	r3, r3
 8004102:	b2da      	uxtb	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	77da      	strb	r2, [r3, #31]

		if(compareByte[0] == 0){
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	7f9b      	ldrb	r3, [r3, #30]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d121      	bne.n	8004154 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x124>
			if(compareByte[1] == 2){
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	7fdb      	ldrb	r3, [r3, #31]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d10c      	bne.n	8004132 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x102>
				forwardSteps++;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800411e:	3301      	adds	r3, #1
 8004120:	b2da      	uxtb	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f883 2020 	strb.w	r2, [r3, #32]
				backwardSteps=0;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004130:	e081      	b.n	8004236 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x206>
			}
			else if(compareByte[1] == 1){
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	7fdb      	ldrb	r3, [r3, #31]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d17d      	bne.n	8004236 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x206>
				backwardSteps++;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004140:	3301      	adds	r3, #1
 8004142:	b2da      	uxtb	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				forwardSteps = 0;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2020 	strb.w	r2, [r3, #32]
 8004152:	e070      	b.n	8004236 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x206>
			}
		}

		else if (compareByte[0]==1){
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	7f9b      	ldrb	r3, [r3, #30]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d121      	bne.n	80041a0 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x170>
			if(compareByte[1] == 0){
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7fdb      	ldrb	r3, [r3, #31]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10c      	bne.n	800417e <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x14e>
				forwardSteps++;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800416a:	3301      	adds	r3, #1
 800416c:	b2da      	uxtb	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f883 2020 	strb.w	r2, [r3, #32]
				backwardSteps=0;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800417c:	e05b      	b.n	8004236 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x206>
			}
			else if(compareByte[1] == 3){
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	7fdb      	ldrb	r3, [r3, #31]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d157      	bne.n	8004236 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x206>
				backwardSteps++;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800418c:	3301      	adds	r3, #1
 800418e:	b2da      	uxtb	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				forwardSteps=0;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2020 	strb.w	r2, [r3, #32]
 800419e:	e04a      	b.n	8004236 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x206>
			}
		}

		else if (compareByte[0] == 2) {
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	7f9b      	ldrb	r3, [r3, #30]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d121      	bne.n	80041ec <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x1bc>
			if(compareByte[1] == 3){
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	7fdb      	ldrb	r3, [r3, #31]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d10c      	bne.n	80041ca <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x19a>
				forwardSteps++;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041b6:	3301      	adds	r3, #1
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f883 2020 	strb.w	r2, [r3, #32]
				backwardSteps=0;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80041c8:	e035      	b.n	8004236 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x206>
			}
			else if(compareByte[1] == 0){
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	7fdb      	ldrb	r3, [r3, #31]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d131      	bne.n	8004236 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x206>
				backwardSteps++;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041d8:	3301      	adds	r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				forwardSteps=0;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2020 	strb.w	r2, [r3, #32]
 80041ea:	e024      	b.n	8004236 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x206>
			}
		}

		else if (compareByte[0]  == 3) {
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	7f9b      	ldrb	r3, [r3, #30]
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d120      	bne.n	8004236 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x206>
			if(compareByte[1] == 1){
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	7fdb      	ldrb	r3, [r3, #31]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d10c      	bne.n	8004216 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x1e6>
				forwardSteps++;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004202:	3301      	adds	r3, #1
 8004204:	b2da      	uxtb	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f883 2020 	strb.w	r2, [r3, #32]
				backwardSteps=0;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004214:	e00f      	b.n	8004236 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x206>
			}
			else if(compareByte[1] == 2){
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	7fdb      	ldrb	r3, [r3, #31]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d10b      	bne.n	8004236 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x206>
				backwardSteps++;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004224:	3301      	adds	r3, #1
 8004226:	b2da      	uxtb	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				forwardSteps = 0;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2020 	strb.w	r2, [r3, #32]
			}
		}

		if(forwardSteps >= 3){
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d907      	bls.n	8004250 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x220>
			HandleForward();
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff fea8 	bl	8003f96 <_ZN10BA_ENCODER13HandleForwardEv>
			forwardSteps = 0;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2020 	strb.w	r2, [r3, #32]
			HandleBackward();
			backwardSteps=0;
		}
	}

}
 800424e:	e00b      	b.n	8004268 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x238>
		else if(backwardSteps >= 3){
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004256:	2b02      	cmp	r3, #2
 8004258:	d906      	bls.n	8004268 <_ZN10BA_ENCODER16HandleGPIOEventsERt+0x238>
			HandleBackward();
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fec1 	bl	8003fe2 <_ZN10BA_ENCODER14HandleBackwardEv>
			backwardSteps=0;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <_ZN10BA_ENCODER22setCurrentEncoderValueEm>:
void BA_ENCODER::cleanCount() {
	m_u32ActualEncoderValue=0;
}

void BA_ENCODER::setCurrentEncoderValue(
		const uint32_t arg_u32ActualEncoderValue) {
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
	m_u32ActualEncoderValue = arg_u32ActualEncoderValue;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	611a      	str	r2, [r3, #16]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fd8b 	bl	8003db0 <_ZNSt14_Function_baseC1Ev>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <_ZNKSt8functionIFvvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fd9e 	bl	8003df0 <_ZNKSt14_Function_base8_M_emptyEv>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f083 0301 	eor.w	r3, r3, #1
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_ZNKSt8functionIFvvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fd8e 	bl	8003df0 <_ZNKSt14_Function_base8_M_emptyEv>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 80042da:	f000 f809 	bl	80042f0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4610      	mov	r0, r2
 80042e6:	4798      	blx	r3
 80042e8:	bf00      	nop
    }
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <_ZSt25__throw_bad_function_callv>:
 80042f0:	b508      	push	{r3, lr}
 80042f2:	f000 f800 	bl	80042f6 <abort>

080042f6 <abort>:
 80042f6:	2006      	movs	r0, #6
 80042f8:	b508      	push	{r3, lr}
 80042fa:	f000 f949 	bl	8004590 <raise>
 80042fe:	2001      	movs	r0, #1
 8004300:	f7fd f869 	bl	80013d6 <_exit>

08004304 <__errno>:
 8004304:	4b01      	ldr	r3, [pc, #4]	; (800430c <__errno+0x8>)
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000018 	.word	0x20000018

08004310 <__libc_init_array>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	2600      	movs	r6, #0
 8004314:	4d0c      	ldr	r5, [pc, #48]	; (8004348 <__libc_init_array+0x38>)
 8004316:	4c0d      	ldr	r4, [pc, #52]	; (800434c <__libc_init_array+0x3c>)
 8004318:	1b64      	subs	r4, r4, r5
 800431a:	10a4      	asrs	r4, r4, #2
 800431c:	42a6      	cmp	r6, r4
 800431e:	d109      	bne.n	8004334 <__libc_init_array+0x24>
 8004320:	f000 fce0 	bl	8004ce4 <_init>
 8004324:	2600      	movs	r6, #0
 8004326:	4d0a      	ldr	r5, [pc, #40]	; (8004350 <__libc_init_array+0x40>)
 8004328:	4c0a      	ldr	r4, [pc, #40]	; (8004354 <__libc_init_array+0x44>)
 800432a:	1b64      	subs	r4, r4, r5
 800432c:	10a4      	asrs	r4, r4, #2
 800432e:	42a6      	cmp	r6, r4
 8004330:	d105      	bne.n	800433e <__libc_init_array+0x2e>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	f855 3b04 	ldr.w	r3, [r5], #4
 8004338:	4798      	blx	r3
 800433a:	3601      	adds	r6, #1
 800433c:	e7ee      	b.n	800431c <__libc_init_array+0xc>
 800433e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004342:	4798      	blx	r3
 8004344:	3601      	adds	r6, #1
 8004346:	e7f2      	b.n	800432e <__libc_init_array+0x1e>
 8004348:	08005210 	.word	0x08005210
 800434c:	08005210 	.word	0x08005210
 8004350:	08005210 	.word	0x08005210
 8004354:	08005218 	.word	0x08005218

08004358 <memset>:
 8004358:	4603      	mov	r3, r0
 800435a:	4402      	add	r2, r0
 800435c:	4293      	cmp	r3, r2
 800435e:	d100      	bne.n	8004362 <memset+0xa>
 8004360:	4770      	bx	lr
 8004362:	f803 1b01 	strb.w	r1, [r3], #1
 8004366:	e7f9      	b.n	800435c <memset+0x4>

08004368 <_free_r>:
 8004368:	b538      	push	{r3, r4, r5, lr}
 800436a:	4605      	mov	r5, r0
 800436c:	2900      	cmp	r1, #0
 800436e:	d040      	beq.n	80043f2 <_free_r+0x8a>
 8004370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004374:	1f0c      	subs	r4, r1, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	bfb8      	it	lt
 800437a:	18e4      	addlt	r4, r4, r3
 800437c:	f000 f944 	bl	8004608 <__malloc_lock>
 8004380:	4a1c      	ldr	r2, [pc, #112]	; (80043f4 <_free_r+0x8c>)
 8004382:	6813      	ldr	r3, [r2, #0]
 8004384:	b933      	cbnz	r3, 8004394 <_free_r+0x2c>
 8004386:	6063      	str	r3, [r4, #4]
 8004388:	6014      	str	r4, [r2, #0]
 800438a:	4628      	mov	r0, r5
 800438c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004390:	f000 b940 	b.w	8004614 <__malloc_unlock>
 8004394:	42a3      	cmp	r3, r4
 8004396:	d908      	bls.n	80043aa <_free_r+0x42>
 8004398:	6820      	ldr	r0, [r4, #0]
 800439a:	1821      	adds	r1, r4, r0
 800439c:	428b      	cmp	r3, r1
 800439e:	bf01      	itttt	eq
 80043a0:	6819      	ldreq	r1, [r3, #0]
 80043a2:	685b      	ldreq	r3, [r3, #4]
 80043a4:	1809      	addeq	r1, r1, r0
 80043a6:	6021      	streq	r1, [r4, #0]
 80043a8:	e7ed      	b.n	8004386 <_free_r+0x1e>
 80043aa:	461a      	mov	r2, r3
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	b10b      	cbz	r3, 80043b4 <_free_r+0x4c>
 80043b0:	42a3      	cmp	r3, r4
 80043b2:	d9fa      	bls.n	80043aa <_free_r+0x42>
 80043b4:	6811      	ldr	r1, [r2, #0]
 80043b6:	1850      	adds	r0, r2, r1
 80043b8:	42a0      	cmp	r0, r4
 80043ba:	d10b      	bne.n	80043d4 <_free_r+0x6c>
 80043bc:	6820      	ldr	r0, [r4, #0]
 80043be:	4401      	add	r1, r0
 80043c0:	1850      	adds	r0, r2, r1
 80043c2:	4283      	cmp	r3, r0
 80043c4:	6011      	str	r1, [r2, #0]
 80043c6:	d1e0      	bne.n	800438a <_free_r+0x22>
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4401      	add	r1, r0
 80043ce:	6011      	str	r1, [r2, #0]
 80043d0:	6053      	str	r3, [r2, #4]
 80043d2:	e7da      	b.n	800438a <_free_r+0x22>
 80043d4:	d902      	bls.n	80043dc <_free_r+0x74>
 80043d6:	230c      	movs	r3, #12
 80043d8:	602b      	str	r3, [r5, #0]
 80043da:	e7d6      	b.n	800438a <_free_r+0x22>
 80043dc:	6820      	ldr	r0, [r4, #0]
 80043de:	1821      	adds	r1, r4, r0
 80043e0:	428b      	cmp	r3, r1
 80043e2:	bf01      	itttt	eq
 80043e4:	6819      	ldreq	r1, [r3, #0]
 80043e6:	685b      	ldreq	r3, [r3, #4]
 80043e8:	1809      	addeq	r1, r1, r0
 80043ea:	6021      	streq	r1, [r4, #0]
 80043ec:	6063      	str	r3, [r4, #4]
 80043ee:	6054      	str	r4, [r2, #4]
 80043f0:	e7cb      	b.n	800438a <_free_r+0x22>
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
 80043f4:	20000630 	.word	0x20000630

080043f8 <sbrk_aligned>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	4e0e      	ldr	r6, [pc, #56]	; (8004434 <sbrk_aligned+0x3c>)
 80043fc:	460c      	mov	r4, r1
 80043fe:	6831      	ldr	r1, [r6, #0]
 8004400:	4605      	mov	r5, r0
 8004402:	b911      	cbnz	r1, 800440a <sbrk_aligned+0x12>
 8004404:	f000 f88c 	bl	8004520 <_sbrk_r>
 8004408:	6030      	str	r0, [r6, #0]
 800440a:	4621      	mov	r1, r4
 800440c:	4628      	mov	r0, r5
 800440e:	f000 f887 	bl	8004520 <_sbrk_r>
 8004412:	1c43      	adds	r3, r0, #1
 8004414:	d00a      	beq.n	800442c <sbrk_aligned+0x34>
 8004416:	1cc4      	adds	r4, r0, #3
 8004418:	f024 0403 	bic.w	r4, r4, #3
 800441c:	42a0      	cmp	r0, r4
 800441e:	d007      	beq.n	8004430 <sbrk_aligned+0x38>
 8004420:	1a21      	subs	r1, r4, r0
 8004422:	4628      	mov	r0, r5
 8004424:	f000 f87c 	bl	8004520 <_sbrk_r>
 8004428:	3001      	adds	r0, #1
 800442a:	d101      	bne.n	8004430 <sbrk_aligned+0x38>
 800442c:	f04f 34ff 	mov.w	r4, #4294967295
 8004430:	4620      	mov	r0, r4
 8004432:	bd70      	pop	{r4, r5, r6, pc}
 8004434:	20000634 	.word	0x20000634

08004438 <_malloc_r>:
 8004438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800443c:	1ccd      	adds	r5, r1, #3
 800443e:	f025 0503 	bic.w	r5, r5, #3
 8004442:	3508      	adds	r5, #8
 8004444:	2d0c      	cmp	r5, #12
 8004446:	bf38      	it	cc
 8004448:	250c      	movcc	r5, #12
 800444a:	2d00      	cmp	r5, #0
 800444c:	4607      	mov	r7, r0
 800444e:	db01      	blt.n	8004454 <_malloc_r+0x1c>
 8004450:	42a9      	cmp	r1, r5
 8004452:	d905      	bls.n	8004460 <_malloc_r+0x28>
 8004454:	230c      	movs	r3, #12
 8004456:	2600      	movs	r6, #0
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	4630      	mov	r0, r6
 800445c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004460:	4e2e      	ldr	r6, [pc, #184]	; (800451c <_malloc_r+0xe4>)
 8004462:	f000 f8d1 	bl	8004608 <__malloc_lock>
 8004466:	6833      	ldr	r3, [r6, #0]
 8004468:	461c      	mov	r4, r3
 800446a:	bb34      	cbnz	r4, 80044ba <_malloc_r+0x82>
 800446c:	4629      	mov	r1, r5
 800446e:	4638      	mov	r0, r7
 8004470:	f7ff ffc2 	bl	80043f8 <sbrk_aligned>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	4604      	mov	r4, r0
 8004478:	d14d      	bne.n	8004516 <_malloc_r+0xde>
 800447a:	6834      	ldr	r4, [r6, #0]
 800447c:	4626      	mov	r6, r4
 800447e:	2e00      	cmp	r6, #0
 8004480:	d140      	bne.n	8004504 <_malloc_r+0xcc>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	4631      	mov	r1, r6
 8004486:	4638      	mov	r0, r7
 8004488:	eb04 0803 	add.w	r8, r4, r3
 800448c:	f000 f848 	bl	8004520 <_sbrk_r>
 8004490:	4580      	cmp	r8, r0
 8004492:	d13a      	bne.n	800450a <_malloc_r+0xd2>
 8004494:	6821      	ldr	r1, [r4, #0]
 8004496:	3503      	adds	r5, #3
 8004498:	1a6d      	subs	r5, r5, r1
 800449a:	f025 0503 	bic.w	r5, r5, #3
 800449e:	3508      	adds	r5, #8
 80044a0:	2d0c      	cmp	r5, #12
 80044a2:	bf38      	it	cc
 80044a4:	250c      	movcc	r5, #12
 80044a6:	4638      	mov	r0, r7
 80044a8:	4629      	mov	r1, r5
 80044aa:	f7ff ffa5 	bl	80043f8 <sbrk_aligned>
 80044ae:	3001      	adds	r0, #1
 80044b0:	d02b      	beq.n	800450a <_malloc_r+0xd2>
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	442b      	add	r3, r5
 80044b6:	6023      	str	r3, [r4, #0]
 80044b8:	e00e      	b.n	80044d8 <_malloc_r+0xa0>
 80044ba:	6822      	ldr	r2, [r4, #0]
 80044bc:	1b52      	subs	r2, r2, r5
 80044be:	d41e      	bmi.n	80044fe <_malloc_r+0xc6>
 80044c0:	2a0b      	cmp	r2, #11
 80044c2:	d916      	bls.n	80044f2 <_malloc_r+0xba>
 80044c4:	1961      	adds	r1, r4, r5
 80044c6:	42a3      	cmp	r3, r4
 80044c8:	6025      	str	r5, [r4, #0]
 80044ca:	bf18      	it	ne
 80044cc:	6059      	strne	r1, [r3, #4]
 80044ce:	6863      	ldr	r3, [r4, #4]
 80044d0:	bf08      	it	eq
 80044d2:	6031      	streq	r1, [r6, #0]
 80044d4:	5162      	str	r2, [r4, r5]
 80044d6:	604b      	str	r3, [r1, #4]
 80044d8:	4638      	mov	r0, r7
 80044da:	f104 060b 	add.w	r6, r4, #11
 80044de:	f000 f899 	bl	8004614 <__malloc_unlock>
 80044e2:	f026 0607 	bic.w	r6, r6, #7
 80044e6:	1d23      	adds	r3, r4, #4
 80044e8:	1af2      	subs	r2, r6, r3
 80044ea:	d0b6      	beq.n	800445a <_malloc_r+0x22>
 80044ec:	1b9b      	subs	r3, r3, r6
 80044ee:	50a3      	str	r3, [r4, r2]
 80044f0:	e7b3      	b.n	800445a <_malloc_r+0x22>
 80044f2:	6862      	ldr	r2, [r4, #4]
 80044f4:	42a3      	cmp	r3, r4
 80044f6:	bf0c      	ite	eq
 80044f8:	6032      	streq	r2, [r6, #0]
 80044fa:	605a      	strne	r2, [r3, #4]
 80044fc:	e7ec      	b.n	80044d8 <_malloc_r+0xa0>
 80044fe:	4623      	mov	r3, r4
 8004500:	6864      	ldr	r4, [r4, #4]
 8004502:	e7b2      	b.n	800446a <_malloc_r+0x32>
 8004504:	4634      	mov	r4, r6
 8004506:	6876      	ldr	r6, [r6, #4]
 8004508:	e7b9      	b.n	800447e <_malloc_r+0x46>
 800450a:	230c      	movs	r3, #12
 800450c:	4638      	mov	r0, r7
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	f000 f880 	bl	8004614 <__malloc_unlock>
 8004514:	e7a1      	b.n	800445a <_malloc_r+0x22>
 8004516:	6025      	str	r5, [r4, #0]
 8004518:	e7de      	b.n	80044d8 <_malloc_r+0xa0>
 800451a:	bf00      	nop
 800451c:	20000630 	.word	0x20000630

08004520 <_sbrk_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	2300      	movs	r3, #0
 8004524:	4d05      	ldr	r5, [pc, #20]	; (800453c <_sbrk_r+0x1c>)
 8004526:	4604      	mov	r4, r0
 8004528:	4608      	mov	r0, r1
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	f7fc ff5e 	bl	80013ec <_sbrk>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_sbrk_r+0x1a>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_sbrk_r+0x1a>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	20000638 	.word	0x20000638

08004540 <_raise_r>:
 8004540:	291f      	cmp	r1, #31
 8004542:	b538      	push	{r3, r4, r5, lr}
 8004544:	4604      	mov	r4, r0
 8004546:	460d      	mov	r5, r1
 8004548:	d904      	bls.n	8004554 <_raise_r+0x14>
 800454a:	2316      	movs	r3, #22
 800454c:	6003      	str	r3, [r0, #0]
 800454e:	f04f 30ff 	mov.w	r0, #4294967295
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004556:	b112      	cbz	r2, 800455e <_raise_r+0x1e>
 8004558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800455c:	b94b      	cbnz	r3, 8004572 <_raise_r+0x32>
 800455e:	4620      	mov	r0, r4
 8004560:	f000 f830 	bl	80045c4 <_getpid_r>
 8004564:	462a      	mov	r2, r5
 8004566:	4601      	mov	r1, r0
 8004568:	4620      	mov	r0, r4
 800456a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800456e:	f000 b817 	b.w	80045a0 <_kill_r>
 8004572:	2b01      	cmp	r3, #1
 8004574:	d00a      	beq.n	800458c <_raise_r+0x4c>
 8004576:	1c59      	adds	r1, r3, #1
 8004578:	d103      	bne.n	8004582 <_raise_r+0x42>
 800457a:	2316      	movs	r3, #22
 800457c:	6003      	str	r3, [r0, #0]
 800457e:	2001      	movs	r0, #1
 8004580:	e7e7      	b.n	8004552 <_raise_r+0x12>
 8004582:	2400      	movs	r4, #0
 8004584:	4628      	mov	r0, r5
 8004586:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800458a:	4798      	blx	r3
 800458c:	2000      	movs	r0, #0
 800458e:	e7e0      	b.n	8004552 <_raise_r+0x12>

08004590 <raise>:
 8004590:	4b02      	ldr	r3, [pc, #8]	; (800459c <raise+0xc>)
 8004592:	4601      	mov	r1, r0
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	f7ff bfd3 	b.w	8004540 <_raise_r>
 800459a:	bf00      	nop
 800459c:	20000018 	.word	0x20000018

080045a0 <_kill_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	2300      	movs	r3, #0
 80045a4:	4d06      	ldr	r5, [pc, #24]	; (80045c0 <_kill_r+0x20>)
 80045a6:	4604      	mov	r4, r0
 80045a8:	4608      	mov	r0, r1
 80045aa:	4611      	mov	r1, r2
 80045ac:	602b      	str	r3, [r5, #0]
 80045ae:	f7fc ff02 	bl	80013b6 <_kill>
 80045b2:	1c43      	adds	r3, r0, #1
 80045b4:	d102      	bne.n	80045bc <_kill_r+0x1c>
 80045b6:	682b      	ldr	r3, [r5, #0]
 80045b8:	b103      	cbz	r3, 80045bc <_kill_r+0x1c>
 80045ba:	6023      	str	r3, [r4, #0]
 80045bc:	bd38      	pop	{r3, r4, r5, pc}
 80045be:	bf00      	nop
 80045c0:	20000638 	.word	0x20000638

080045c4 <_getpid_r>:
 80045c4:	f7fc bef0 	b.w	80013a8 <_getpid>

080045c8 <siprintf>:
 80045c8:	b40e      	push	{r1, r2, r3}
 80045ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045ce:	b500      	push	{lr}
 80045d0:	b09c      	sub	sp, #112	; 0x70
 80045d2:	ab1d      	add	r3, sp, #116	; 0x74
 80045d4:	9002      	str	r0, [sp, #8]
 80045d6:	9006      	str	r0, [sp, #24]
 80045d8:	9107      	str	r1, [sp, #28]
 80045da:	9104      	str	r1, [sp, #16]
 80045dc:	4808      	ldr	r0, [pc, #32]	; (8004600 <siprintf+0x38>)
 80045de:	4909      	ldr	r1, [pc, #36]	; (8004604 <siprintf+0x3c>)
 80045e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80045e4:	9105      	str	r1, [sp, #20]
 80045e6:	6800      	ldr	r0, [r0, #0]
 80045e8:	a902      	add	r1, sp, #8
 80045ea:	9301      	str	r3, [sp, #4]
 80045ec:	f000 f874 	bl	80046d8 <_svfiprintf_r>
 80045f0:	2200      	movs	r2, #0
 80045f2:	9b02      	ldr	r3, [sp, #8]
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	b01c      	add	sp, #112	; 0x70
 80045f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045fc:	b003      	add	sp, #12
 80045fe:	4770      	bx	lr
 8004600:	20000018 	.word	0x20000018
 8004604:	ffff0208 	.word	0xffff0208

08004608 <__malloc_lock>:
 8004608:	4801      	ldr	r0, [pc, #4]	; (8004610 <__malloc_lock+0x8>)
 800460a:	f000 bafb 	b.w	8004c04 <__retarget_lock_acquire_recursive>
 800460e:	bf00      	nop
 8004610:	2000063c 	.word	0x2000063c

08004614 <__malloc_unlock>:
 8004614:	4801      	ldr	r0, [pc, #4]	; (800461c <__malloc_unlock+0x8>)
 8004616:	f000 baf6 	b.w	8004c06 <__retarget_lock_release_recursive>
 800461a:	bf00      	nop
 800461c:	2000063c 	.word	0x2000063c

08004620 <__ssputs_r>:
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	688e      	ldr	r6, [r1, #8]
 8004626:	4682      	mov	sl, r0
 8004628:	429e      	cmp	r6, r3
 800462a:	460c      	mov	r4, r1
 800462c:	4690      	mov	r8, r2
 800462e:	461f      	mov	r7, r3
 8004630:	d838      	bhi.n	80046a4 <__ssputs_r+0x84>
 8004632:	898a      	ldrh	r2, [r1, #12]
 8004634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004638:	d032      	beq.n	80046a0 <__ssputs_r+0x80>
 800463a:	6825      	ldr	r5, [r4, #0]
 800463c:	6909      	ldr	r1, [r1, #16]
 800463e:	3301      	adds	r3, #1
 8004640:	eba5 0901 	sub.w	r9, r5, r1
 8004644:	6965      	ldr	r5, [r4, #20]
 8004646:	444b      	add	r3, r9
 8004648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800464c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004650:	106d      	asrs	r5, r5, #1
 8004652:	429d      	cmp	r5, r3
 8004654:	bf38      	it	cc
 8004656:	461d      	movcc	r5, r3
 8004658:	0553      	lsls	r3, r2, #21
 800465a:	d531      	bpl.n	80046c0 <__ssputs_r+0xa0>
 800465c:	4629      	mov	r1, r5
 800465e:	f7ff feeb 	bl	8004438 <_malloc_r>
 8004662:	4606      	mov	r6, r0
 8004664:	b950      	cbnz	r0, 800467c <__ssputs_r+0x5c>
 8004666:	230c      	movs	r3, #12
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	f8ca 3000 	str.w	r3, [sl]
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004676:	81a3      	strh	r3, [r4, #12]
 8004678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800467c:	464a      	mov	r2, r9
 800467e:	6921      	ldr	r1, [r4, #16]
 8004680:	f000 fad0 	bl	8004c24 <memcpy>
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800468a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468e:	81a3      	strh	r3, [r4, #12]
 8004690:	6126      	str	r6, [r4, #16]
 8004692:	444e      	add	r6, r9
 8004694:	6026      	str	r6, [r4, #0]
 8004696:	463e      	mov	r6, r7
 8004698:	6165      	str	r5, [r4, #20]
 800469a:	eba5 0509 	sub.w	r5, r5, r9
 800469e:	60a5      	str	r5, [r4, #8]
 80046a0:	42be      	cmp	r6, r7
 80046a2:	d900      	bls.n	80046a6 <__ssputs_r+0x86>
 80046a4:	463e      	mov	r6, r7
 80046a6:	4632      	mov	r2, r6
 80046a8:	4641      	mov	r1, r8
 80046aa:	6820      	ldr	r0, [r4, #0]
 80046ac:	f000 fac8 	bl	8004c40 <memmove>
 80046b0:	68a3      	ldr	r3, [r4, #8]
 80046b2:	2000      	movs	r0, #0
 80046b4:	1b9b      	subs	r3, r3, r6
 80046b6:	60a3      	str	r3, [r4, #8]
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	4433      	add	r3, r6
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	e7db      	b.n	8004678 <__ssputs_r+0x58>
 80046c0:	462a      	mov	r2, r5
 80046c2:	f000 fad7 	bl	8004c74 <_realloc_r>
 80046c6:	4606      	mov	r6, r0
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d1e1      	bne.n	8004690 <__ssputs_r+0x70>
 80046cc:	4650      	mov	r0, sl
 80046ce:	6921      	ldr	r1, [r4, #16]
 80046d0:	f7ff fe4a 	bl	8004368 <_free_r>
 80046d4:	e7c7      	b.n	8004666 <__ssputs_r+0x46>
	...

080046d8 <_svfiprintf_r>:
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	4698      	mov	r8, r3
 80046de:	898b      	ldrh	r3, [r1, #12]
 80046e0:	4607      	mov	r7, r0
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	460d      	mov	r5, r1
 80046e6:	4614      	mov	r4, r2
 80046e8:	b09d      	sub	sp, #116	; 0x74
 80046ea:	d50e      	bpl.n	800470a <_svfiprintf_r+0x32>
 80046ec:	690b      	ldr	r3, [r1, #16]
 80046ee:	b963      	cbnz	r3, 800470a <_svfiprintf_r+0x32>
 80046f0:	2140      	movs	r1, #64	; 0x40
 80046f2:	f7ff fea1 	bl	8004438 <_malloc_r>
 80046f6:	6028      	str	r0, [r5, #0]
 80046f8:	6128      	str	r0, [r5, #16]
 80046fa:	b920      	cbnz	r0, 8004706 <_svfiprintf_r+0x2e>
 80046fc:	230c      	movs	r3, #12
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	e0d1      	b.n	80048aa <_svfiprintf_r+0x1d2>
 8004706:	2340      	movs	r3, #64	; 0x40
 8004708:	616b      	str	r3, [r5, #20]
 800470a:	2300      	movs	r3, #0
 800470c:	9309      	str	r3, [sp, #36]	; 0x24
 800470e:	2320      	movs	r3, #32
 8004710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004714:	2330      	movs	r3, #48	; 0x30
 8004716:	f04f 0901 	mov.w	r9, #1
 800471a:	f8cd 800c 	str.w	r8, [sp, #12]
 800471e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048c4 <_svfiprintf_r+0x1ec>
 8004722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004726:	4623      	mov	r3, r4
 8004728:	469a      	mov	sl, r3
 800472a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800472e:	b10a      	cbz	r2, 8004734 <_svfiprintf_r+0x5c>
 8004730:	2a25      	cmp	r2, #37	; 0x25
 8004732:	d1f9      	bne.n	8004728 <_svfiprintf_r+0x50>
 8004734:	ebba 0b04 	subs.w	fp, sl, r4
 8004738:	d00b      	beq.n	8004752 <_svfiprintf_r+0x7a>
 800473a:	465b      	mov	r3, fp
 800473c:	4622      	mov	r2, r4
 800473e:	4629      	mov	r1, r5
 8004740:	4638      	mov	r0, r7
 8004742:	f7ff ff6d 	bl	8004620 <__ssputs_r>
 8004746:	3001      	adds	r0, #1
 8004748:	f000 80aa 	beq.w	80048a0 <_svfiprintf_r+0x1c8>
 800474c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800474e:	445a      	add	r2, fp
 8004750:	9209      	str	r2, [sp, #36]	; 0x24
 8004752:	f89a 3000 	ldrb.w	r3, [sl]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80a2 	beq.w	80048a0 <_svfiprintf_r+0x1c8>
 800475c:	2300      	movs	r3, #0
 800475e:	f04f 32ff 	mov.w	r2, #4294967295
 8004762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004766:	f10a 0a01 	add.w	sl, sl, #1
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	9307      	str	r3, [sp, #28]
 800476e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004772:	931a      	str	r3, [sp, #104]	; 0x68
 8004774:	4654      	mov	r4, sl
 8004776:	2205      	movs	r2, #5
 8004778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800477c:	4851      	ldr	r0, [pc, #324]	; (80048c4 <_svfiprintf_r+0x1ec>)
 800477e:	f000 fa43 	bl	8004c08 <memchr>
 8004782:	9a04      	ldr	r2, [sp, #16]
 8004784:	b9d8      	cbnz	r0, 80047be <_svfiprintf_r+0xe6>
 8004786:	06d0      	lsls	r0, r2, #27
 8004788:	bf44      	itt	mi
 800478a:	2320      	movmi	r3, #32
 800478c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004790:	0711      	lsls	r1, r2, #28
 8004792:	bf44      	itt	mi
 8004794:	232b      	movmi	r3, #43	; 0x2b
 8004796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800479a:	f89a 3000 	ldrb.w	r3, [sl]
 800479e:	2b2a      	cmp	r3, #42	; 0x2a
 80047a0:	d015      	beq.n	80047ce <_svfiprintf_r+0xf6>
 80047a2:	4654      	mov	r4, sl
 80047a4:	2000      	movs	r0, #0
 80047a6:	f04f 0c0a 	mov.w	ip, #10
 80047aa:	9a07      	ldr	r2, [sp, #28]
 80047ac:	4621      	mov	r1, r4
 80047ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047b2:	3b30      	subs	r3, #48	; 0x30
 80047b4:	2b09      	cmp	r3, #9
 80047b6:	d94e      	bls.n	8004856 <_svfiprintf_r+0x17e>
 80047b8:	b1b0      	cbz	r0, 80047e8 <_svfiprintf_r+0x110>
 80047ba:	9207      	str	r2, [sp, #28]
 80047bc:	e014      	b.n	80047e8 <_svfiprintf_r+0x110>
 80047be:	eba0 0308 	sub.w	r3, r0, r8
 80047c2:	fa09 f303 	lsl.w	r3, r9, r3
 80047c6:	4313      	orrs	r3, r2
 80047c8:	46a2      	mov	sl, r4
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	e7d2      	b.n	8004774 <_svfiprintf_r+0x9c>
 80047ce:	9b03      	ldr	r3, [sp, #12]
 80047d0:	1d19      	adds	r1, r3, #4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	9103      	str	r1, [sp, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bfbb      	ittet	lt
 80047da:	425b      	neglt	r3, r3
 80047dc:	f042 0202 	orrlt.w	r2, r2, #2
 80047e0:	9307      	strge	r3, [sp, #28]
 80047e2:	9307      	strlt	r3, [sp, #28]
 80047e4:	bfb8      	it	lt
 80047e6:	9204      	strlt	r2, [sp, #16]
 80047e8:	7823      	ldrb	r3, [r4, #0]
 80047ea:	2b2e      	cmp	r3, #46	; 0x2e
 80047ec:	d10c      	bne.n	8004808 <_svfiprintf_r+0x130>
 80047ee:	7863      	ldrb	r3, [r4, #1]
 80047f0:	2b2a      	cmp	r3, #42	; 0x2a
 80047f2:	d135      	bne.n	8004860 <_svfiprintf_r+0x188>
 80047f4:	9b03      	ldr	r3, [sp, #12]
 80047f6:	3402      	adds	r4, #2
 80047f8:	1d1a      	adds	r2, r3, #4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	9203      	str	r2, [sp, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bfb8      	it	lt
 8004802:	f04f 33ff 	movlt.w	r3, #4294967295
 8004806:	9305      	str	r3, [sp, #20]
 8004808:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80048c8 <_svfiprintf_r+0x1f0>
 800480c:	2203      	movs	r2, #3
 800480e:	4650      	mov	r0, sl
 8004810:	7821      	ldrb	r1, [r4, #0]
 8004812:	f000 f9f9 	bl	8004c08 <memchr>
 8004816:	b140      	cbz	r0, 800482a <_svfiprintf_r+0x152>
 8004818:	2340      	movs	r3, #64	; 0x40
 800481a:	eba0 000a 	sub.w	r0, r0, sl
 800481e:	fa03 f000 	lsl.w	r0, r3, r0
 8004822:	9b04      	ldr	r3, [sp, #16]
 8004824:	3401      	adds	r4, #1
 8004826:	4303      	orrs	r3, r0
 8004828:	9304      	str	r3, [sp, #16]
 800482a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800482e:	2206      	movs	r2, #6
 8004830:	4826      	ldr	r0, [pc, #152]	; (80048cc <_svfiprintf_r+0x1f4>)
 8004832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004836:	f000 f9e7 	bl	8004c08 <memchr>
 800483a:	2800      	cmp	r0, #0
 800483c:	d038      	beq.n	80048b0 <_svfiprintf_r+0x1d8>
 800483e:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <_svfiprintf_r+0x1f8>)
 8004840:	bb1b      	cbnz	r3, 800488a <_svfiprintf_r+0x1b2>
 8004842:	9b03      	ldr	r3, [sp, #12]
 8004844:	3307      	adds	r3, #7
 8004846:	f023 0307 	bic.w	r3, r3, #7
 800484a:	3308      	adds	r3, #8
 800484c:	9303      	str	r3, [sp, #12]
 800484e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004850:	4433      	add	r3, r6
 8004852:	9309      	str	r3, [sp, #36]	; 0x24
 8004854:	e767      	b.n	8004726 <_svfiprintf_r+0x4e>
 8004856:	460c      	mov	r4, r1
 8004858:	2001      	movs	r0, #1
 800485a:	fb0c 3202 	mla	r2, ip, r2, r3
 800485e:	e7a5      	b.n	80047ac <_svfiprintf_r+0xd4>
 8004860:	2300      	movs	r3, #0
 8004862:	f04f 0c0a 	mov.w	ip, #10
 8004866:	4619      	mov	r1, r3
 8004868:	3401      	adds	r4, #1
 800486a:	9305      	str	r3, [sp, #20]
 800486c:	4620      	mov	r0, r4
 800486e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004872:	3a30      	subs	r2, #48	; 0x30
 8004874:	2a09      	cmp	r2, #9
 8004876:	d903      	bls.n	8004880 <_svfiprintf_r+0x1a8>
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0c5      	beq.n	8004808 <_svfiprintf_r+0x130>
 800487c:	9105      	str	r1, [sp, #20]
 800487e:	e7c3      	b.n	8004808 <_svfiprintf_r+0x130>
 8004880:	4604      	mov	r4, r0
 8004882:	2301      	movs	r3, #1
 8004884:	fb0c 2101 	mla	r1, ip, r1, r2
 8004888:	e7f0      	b.n	800486c <_svfiprintf_r+0x194>
 800488a:	ab03      	add	r3, sp, #12
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	462a      	mov	r2, r5
 8004890:	4638      	mov	r0, r7
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <_svfiprintf_r+0x1fc>)
 8004894:	a904      	add	r1, sp, #16
 8004896:	f3af 8000 	nop.w
 800489a:	1c42      	adds	r2, r0, #1
 800489c:	4606      	mov	r6, r0
 800489e:	d1d6      	bne.n	800484e <_svfiprintf_r+0x176>
 80048a0:	89ab      	ldrh	r3, [r5, #12]
 80048a2:	065b      	lsls	r3, r3, #25
 80048a4:	f53f af2c 	bmi.w	8004700 <_svfiprintf_r+0x28>
 80048a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048aa:	b01d      	add	sp, #116	; 0x74
 80048ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b0:	ab03      	add	r3, sp, #12
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	462a      	mov	r2, r5
 80048b6:	4638      	mov	r0, r7
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <_svfiprintf_r+0x1fc>)
 80048ba:	a904      	add	r1, sp, #16
 80048bc:	f000 f87c 	bl	80049b8 <_printf_i>
 80048c0:	e7eb      	b.n	800489a <_svfiprintf_r+0x1c2>
 80048c2:	bf00      	nop
 80048c4:	080051da 	.word	0x080051da
 80048c8:	080051e0 	.word	0x080051e0
 80048cc:	080051e4 	.word	0x080051e4
 80048d0:	00000000 	.word	0x00000000
 80048d4:	08004621 	.word	0x08004621

080048d8 <_printf_common>:
 80048d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	4616      	mov	r6, r2
 80048de:	4699      	mov	r9, r3
 80048e0:	688a      	ldr	r2, [r1, #8]
 80048e2:	690b      	ldr	r3, [r1, #16]
 80048e4:	4607      	mov	r7, r0
 80048e6:	4293      	cmp	r3, r2
 80048e8:	bfb8      	it	lt
 80048ea:	4613      	movlt	r3, r2
 80048ec:	6033      	str	r3, [r6, #0]
 80048ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048f2:	460c      	mov	r4, r1
 80048f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048f8:	b10a      	cbz	r2, 80048fe <_printf_common+0x26>
 80048fa:	3301      	adds	r3, #1
 80048fc:	6033      	str	r3, [r6, #0]
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	0699      	lsls	r1, r3, #26
 8004902:	bf42      	ittt	mi
 8004904:	6833      	ldrmi	r3, [r6, #0]
 8004906:	3302      	addmi	r3, #2
 8004908:	6033      	strmi	r3, [r6, #0]
 800490a:	6825      	ldr	r5, [r4, #0]
 800490c:	f015 0506 	ands.w	r5, r5, #6
 8004910:	d106      	bne.n	8004920 <_printf_common+0x48>
 8004912:	f104 0a19 	add.w	sl, r4, #25
 8004916:	68e3      	ldr	r3, [r4, #12]
 8004918:	6832      	ldr	r2, [r6, #0]
 800491a:	1a9b      	subs	r3, r3, r2
 800491c:	42ab      	cmp	r3, r5
 800491e:	dc28      	bgt.n	8004972 <_printf_common+0x9a>
 8004920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004924:	1e13      	subs	r3, r2, #0
 8004926:	6822      	ldr	r2, [r4, #0]
 8004928:	bf18      	it	ne
 800492a:	2301      	movne	r3, #1
 800492c:	0692      	lsls	r2, r2, #26
 800492e:	d42d      	bmi.n	800498c <_printf_common+0xb4>
 8004930:	4649      	mov	r1, r9
 8004932:	4638      	mov	r0, r7
 8004934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004938:	47c0      	blx	r8
 800493a:	3001      	adds	r0, #1
 800493c:	d020      	beq.n	8004980 <_printf_common+0xa8>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	68e5      	ldr	r5, [r4, #12]
 8004942:	f003 0306 	and.w	r3, r3, #6
 8004946:	2b04      	cmp	r3, #4
 8004948:	bf18      	it	ne
 800494a:	2500      	movne	r5, #0
 800494c:	6832      	ldr	r2, [r6, #0]
 800494e:	f04f 0600 	mov.w	r6, #0
 8004952:	68a3      	ldr	r3, [r4, #8]
 8004954:	bf08      	it	eq
 8004956:	1aad      	subeq	r5, r5, r2
 8004958:	6922      	ldr	r2, [r4, #16]
 800495a:	bf08      	it	eq
 800495c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004960:	4293      	cmp	r3, r2
 8004962:	bfc4      	itt	gt
 8004964:	1a9b      	subgt	r3, r3, r2
 8004966:	18ed      	addgt	r5, r5, r3
 8004968:	341a      	adds	r4, #26
 800496a:	42b5      	cmp	r5, r6
 800496c:	d11a      	bne.n	80049a4 <_printf_common+0xcc>
 800496e:	2000      	movs	r0, #0
 8004970:	e008      	b.n	8004984 <_printf_common+0xac>
 8004972:	2301      	movs	r3, #1
 8004974:	4652      	mov	r2, sl
 8004976:	4649      	mov	r1, r9
 8004978:	4638      	mov	r0, r7
 800497a:	47c0      	blx	r8
 800497c:	3001      	adds	r0, #1
 800497e:	d103      	bne.n	8004988 <_printf_common+0xb0>
 8004980:	f04f 30ff 	mov.w	r0, #4294967295
 8004984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004988:	3501      	adds	r5, #1
 800498a:	e7c4      	b.n	8004916 <_printf_common+0x3e>
 800498c:	2030      	movs	r0, #48	; 0x30
 800498e:	18e1      	adds	r1, r4, r3
 8004990:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800499a:	4422      	add	r2, r4
 800499c:	3302      	adds	r3, #2
 800499e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049a2:	e7c5      	b.n	8004930 <_printf_common+0x58>
 80049a4:	2301      	movs	r3, #1
 80049a6:	4622      	mov	r2, r4
 80049a8:	4649      	mov	r1, r9
 80049aa:	4638      	mov	r0, r7
 80049ac:	47c0      	blx	r8
 80049ae:	3001      	adds	r0, #1
 80049b0:	d0e6      	beq.n	8004980 <_printf_common+0xa8>
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7d9      	b.n	800496a <_printf_common+0x92>
	...

080049b8 <_printf_i>:
 80049b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049bc:	7e0f      	ldrb	r7, [r1, #24]
 80049be:	4691      	mov	r9, r2
 80049c0:	2f78      	cmp	r7, #120	; 0x78
 80049c2:	4680      	mov	r8, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	469a      	mov	sl, r3
 80049c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ce:	d807      	bhi.n	80049e0 <_printf_i+0x28>
 80049d0:	2f62      	cmp	r7, #98	; 0x62
 80049d2:	d80a      	bhi.n	80049ea <_printf_i+0x32>
 80049d4:	2f00      	cmp	r7, #0
 80049d6:	f000 80d9 	beq.w	8004b8c <_printf_i+0x1d4>
 80049da:	2f58      	cmp	r7, #88	; 0x58
 80049dc:	f000 80a4 	beq.w	8004b28 <_printf_i+0x170>
 80049e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049e8:	e03a      	b.n	8004a60 <_printf_i+0xa8>
 80049ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ee:	2b15      	cmp	r3, #21
 80049f0:	d8f6      	bhi.n	80049e0 <_printf_i+0x28>
 80049f2:	a101      	add	r1, pc, #4	; (adr r1, 80049f8 <_printf_i+0x40>)
 80049f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049f8:	08004a51 	.word	0x08004a51
 80049fc:	08004a65 	.word	0x08004a65
 8004a00:	080049e1 	.word	0x080049e1
 8004a04:	080049e1 	.word	0x080049e1
 8004a08:	080049e1 	.word	0x080049e1
 8004a0c:	080049e1 	.word	0x080049e1
 8004a10:	08004a65 	.word	0x08004a65
 8004a14:	080049e1 	.word	0x080049e1
 8004a18:	080049e1 	.word	0x080049e1
 8004a1c:	080049e1 	.word	0x080049e1
 8004a20:	080049e1 	.word	0x080049e1
 8004a24:	08004b73 	.word	0x08004b73
 8004a28:	08004a95 	.word	0x08004a95
 8004a2c:	08004b55 	.word	0x08004b55
 8004a30:	080049e1 	.word	0x080049e1
 8004a34:	080049e1 	.word	0x080049e1
 8004a38:	08004b95 	.word	0x08004b95
 8004a3c:	080049e1 	.word	0x080049e1
 8004a40:	08004a95 	.word	0x08004a95
 8004a44:	080049e1 	.word	0x080049e1
 8004a48:	080049e1 	.word	0x080049e1
 8004a4c:	08004b5d 	.word	0x08004b5d
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	1d1a      	adds	r2, r3, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	602a      	str	r2, [r5, #0]
 8004a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0a4      	b.n	8004bae <_printf_i+0x1f6>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	6829      	ldr	r1, [r5, #0]
 8004a68:	0606      	lsls	r6, r0, #24
 8004a6a:	f101 0304 	add.w	r3, r1, #4
 8004a6e:	d50a      	bpl.n	8004a86 <_printf_i+0xce>
 8004a70:	680e      	ldr	r6, [r1, #0]
 8004a72:	602b      	str	r3, [r5, #0]
 8004a74:	2e00      	cmp	r6, #0
 8004a76:	da03      	bge.n	8004a80 <_printf_i+0xc8>
 8004a78:	232d      	movs	r3, #45	; 0x2d
 8004a7a:	4276      	negs	r6, r6
 8004a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a80:	230a      	movs	r3, #10
 8004a82:	485e      	ldr	r0, [pc, #376]	; (8004bfc <_printf_i+0x244>)
 8004a84:	e019      	b.n	8004aba <_printf_i+0x102>
 8004a86:	680e      	ldr	r6, [r1, #0]
 8004a88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a8c:	602b      	str	r3, [r5, #0]
 8004a8e:	bf18      	it	ne
 8004a90:	b236      	sxthne	r6, r6
 8004a92:	e7ef      	b.n	8004a74 <_printf_i+0xbc>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	6820      	ldr	r0, [r4, #0]
 8004a98:	1d19      	adds	r1, r3, #4
 8004a9a:	6029      	str	r1, [r5, #0]
 8004a9c:	0601      	lsls	r1, r0, #24
 8004a9e:	d501      	bpl.n	8004aa4 <_printf_i+0xec>
 8004aa0:	681e      	ldr	r6, [r3, #0]
 8004aa2:	e002      	b.n	8004aaa <_printf_i+0xf2>
 8004aa4:	0646      	lsls	r6, r0, #25
 8004aa6:	d5fb      	bpl.n	8004aa0 <_printf_i+0xe8>
 8004aa8:	881e      	ldrh	r6, [r3, #0]
 8004aaa:	2f6f      	cmp	r7, #111	; 0x6f
 8004aac:	bf0c      	ite	eq
 8004aae:	2308      	moveq	r3, #8
 8004ab0:	230a      	movne	r3, #10
 8004ab2:	4852      	ldr	r0, [pc, #328]	; (8004bfc <_printf_i+0x244>)
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aba:	6865      	ldr	r5, [r4, #4]
 8004abc:	2d00      	cmp	r5, #0
 8004abe:	bfa8      	it	ge
 8004ac0:	6821      	ldrge	r1, [r4, #0]
 8004ac2:	60a5      	str	r5, [r4, #8]
 8004ac4:	bfa4      	itt	ge
 8004ac6:	f021 0104 	bicge.w	r1, r1, #4
 8004aca:	6021      	strge	r1, [r4, #0]
 8004acc:	b90e      	cbnz	r6, 8004ad2 <_printf_i+0x11a>
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	d04d      	beq.n	8004b6e <_printf_i+0x1b6>
 8004ad2:	4615      	mov	r5, r2
 8004ad4:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ad8:	fb03 6711 	mls	r7, r3, r1, r6
 8004adc:	5dc7      	ldrb	r7, [r0, r7]
 8004ade:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ae2:	4637      	mov	r7, r6
 8004ae4:	42bb      	cmp	r3, r7
 8004ae6:	460e      	mov	r6, r1
 8004ae8:	d9f4      	bls.n	8004ad4 <_printf_i+0x11c>
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	d10b      	bne.n	8004b06 <_printf_i+0x14e>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	07de      	lsls	r6, r3, #31
 8004af2:	d508      	bpl.n	8004b06 <_printf_i+0x14e>
 8004af4:	6923      	ldr	r3, [r4, #16]
 8004af6:	6861      	ldr	r1, [r4, #4]
 8004af8:	4299      	cmp	r1, r3
 8004afa:	bfde      	ittt	le
 8004afc:	2330      	movle	r3, #48	; 0x30
 8004afe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b06:	1b52      	subs	r2, r2, r5
 8004b08:	6122      	str	r2, [r4, #16]
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4640      	mov	r0, r8
 8004b10:	f8cd a000 	str.w	sl, [sp]
 8004b14:	aa03      	add	r2, sp, #12
 8004b16:	f7ff fedf 	bl	80048d8 <_printf_common>
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d14c      	bne.n	8004bb8 <_printf_i+0x200>
 8004b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b22:	b004      	add	sp, #16
 8004b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b28:	4834      	ldr	r0, [pc, #208]	; (8004bfc <_printf_i+0x244>)
 8004b2a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b2e:	6829      	ldr	r1, [r5, #0]
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b36:	6029      	str	r1, [r5, #0]
 8004b38:	061d      	lsls	r5, r3, #24
 8004b3a:	d514      	bpl.n	8004b66 <_printf_i+0x1ae>
 8004b3c:	07df      	lsls	r7, r3, #31
 8004b3e:	bf44      	itt	mi
 8004b40:	f043 0320 	orrmi.w	r3, r3, #32
 8004b44:	6023      	strmi	r3, [r4, #0]
 8004b46:	b91e      	cbnz	r6, 8004b50 <_printf_i+0x198>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	f023 0320 	bic.w	r3, r3, #32
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	2310      	movs	r3, #16
 8004b52:	e7af      	b.n	8004ab4 <_printf_i+0xfc>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f043 0320 	orr.w	r3, r3, #32
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	2378      	movs	r3, #120	; 0x78
 8004b5e:	4828      	ldr	r0, [pc, #160]	; (8004c00 <_printf_i+0x248>)
 8004b60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b64:	e7e3      	b.n	8004b2e <_printf_i+0x176>
 8004b66:	0659      	lsls	r1, r3, #25
 8004b68:	bf48      	it	mi
 8004b6a:	b2b6      	uxthmi	r6, r6
 8004b6c:	e7e6      	b.n	8004b3c <_printf_i+0x184>
 8004b6e:	4615      	mov	r5, r2
 8004b70:	e7bb      	b.n	8004aea <_printf_i+0x132>
 8004b72:	682b      	ldr	r3, [r5, #0]
 8004b74:	6826      	ldr	r6, [r4, #0]
 8004b76:	1d18      	adds	r0, r3, #4
 8004b78:	6961      	ldr	r1, [r4, #20]
 8004b7a:	6028      	str	r0, [r5, #0]
 8004b7c:	0635      	lsls	r5, r6, #24
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	d501      	bpl.n	8004b86 <_printf_i+0x1ce>
 8004b82:	6019      	str	r1, [r3, #0]
 8004b84:	e002      	b.n	8004b8c <_printf_i+0x1d4>
 8004b86:	0670      	lsls	r0, r6, #25
 8004b88:	d5fb      	bpl.n	8004b82 <_printf_i+0x1ca>
 8004b8a:	8019      	strh	r1, [r3, #0]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4615      	mov	r5, r2
 8004b90:	6123      	str	r3, [r4, #16]
 8004b92:	e7ba      	b.n	8004b0a <_printf_i+0x152>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	2100      	movs	r1, #0
 8004b98:	1d1a      	adds	r2, r3, #4
 8004b9a:	602a      	str	r2, [r5, #0]
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	6862      	ldr	r2, [r4, #4]
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f000 f831 	bl	8004c08 <memchr>
 8004ba6:	b108      	cbz	r0, 8004bac <_printf_i+0x1f4>
 8004ba8:	1b40      	subs	r0, r0, r5
 8004baa:	6060      	str	r0, [r4, #4]
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	6123      	str	r3, [r4, #16]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb6:	e7a8      	b.n	8004b0a <_printf_i+0x152>
 8004bb8:	462a      	mov	r2, r5
 8004bba:	4649      	mov	r1, r9
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	47d0      	blx	sl
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d0ab      	beq.n	8004b1e <_printf_i+0x166>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	079b      	lsls	r3, r3, #30
 8004bca:	d413      	bmi.n	8004bf4 <_printf_i+0x23c>
 8004bcc:	68e0      	ldr	r0, [r4, #12]
 8004bce:	9b03      	ldr	r3, [sp, #12]
 8004bd0:	4298      	cmp	r0, r3
 8004bd2:	bfb8      	it	lt
 8004bd4:	4618      	movlt	r0, r3
 8004bd6:	e7a4      	b.n	8004b22 <_printf_i+0x16a>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	4632      	mov	r2, r6
 8004bdc:	4649      	mov	r1, r9
 8004bde:	4640      	mov	r0, r8
 8004be0:	47d0      	blx	sl
 8004be2:	3001      	adds	r0, #1
 8004be4:	d09b      	beq.n	8004b1e <_printf_i+0x166>
 8004be6:	3501      	adds	r5, #1
 8004be8:	68e3      	ldr	r3, [r4, #12]
 8004bea:	9903      	ldr	r1, [sp, #12]
 8004bec:	1a5b      	subs	r3, r3, r1
 8004bee:	42ab      	cmp	r3, r5
 8004bf0:	dcf2      	bgt.n	8004bd8 <_printf_i+0x220>
 8004bf2:	e7eb      	b.n	8004bcc <_printf_i+0x214>
 8004bf4:	2500      	movs	r5, #0
 8004bf6:	f104 0619 	add.w	r6, r4, #25
 8004bfa:	e7f5      	b.n	8004be8 <_printf_i+0x230>
 8004bfc:	080051eb 	.word	0x080051eb
 8004c00:	080051fc 	.word	0x080051fc

08004c04 <__retarget_lock_acquire_recursive>:
 8004c04:	4770      	bx	lr

08004c06 <__retarget_lock_release_recursive>:
 8004c06:	4770      	bx	lr

08004c08 <memchr>:
 8004c08:	4603      	mov	r3, r0
 8004c0a:	b510      	push	{r4, lr}
 8004c0c:	b2c9      	uxtb	r1, r1
 8004c0e:	4402      	add	r2, r0
 8004c10:	4293      	cmp	r3, r2
 8004c12:	4618      	mov	r0, r3
 8004c14:	d101      	bne.n	8004c1a <memchr+0x12>
 8004c16:	2000      	movs	r0, #0
 8004c18:	e003      	b.n	8004c22 <memchr+0x1a>
 8004c1a:	7804      	ldrb	r4, [r0, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	428c      	cmp	r4, r1
 8004c20:	d1f6      	bne.n	8004c10 <memchr+0x8>
 8004c22:	bd10      	pop	{r4, pc}

08004c24 <memcpy>:
 8004c24:	440a      	add	r2, r1
 8004c26:	4291      	cmp	r1, r2
 8004c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c2c:	d100      	bne.n	8004c30 <memcpy+0xc>
 8004c2e:	4770      	bx	lr
 8004c30:	b510      	push	{r4, lr}
 8004c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c36:	4291      	cmp	r1, r2
 8004c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c3c:	d1f9      	bne.n	8004c32 <memcpy+0xe>
 8004c3e:	bd10      	pop	{r4, pc}

08004c40 <memmove>:
 8004c40:	4288      	cmp	r0, r1
 8004c42:	b510      	push	{r4, lr}
 8004c44:	eb01 0402 	add.w	r4, r1, r2
 8004c48:	d902      	bls.n	8004c50 <memmove+0x10>
 8004c4a:	4284      	cmp	r4, r0
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	d807      	bhi.n	8004c60 <memmove+0x20>
 8004c50:	1e43      	subs	r3, r0, #1
 8004c52:	42a1      	cmp	r1, r4
 8004c54:	d008      	beq.n	8004c68 <memmove+0x28>
 8004c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c5e:	e7f8      	b.n	8004c52 <memmove+0x12>
 8004c60:	4601      	mov	r1, r0
 8004c62:	4402      	add	r2, r0
 8004c64:	428a      	cmp	r2, r1
 8004c66:	d100      	bne.n	8004c6a <memmove+0x2a>
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c72:	e7f7      	b.n	8004c64 <memmove+0x24>

08004c74 <_realloc_r>:
 8004c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c78:	4680      	mov	r8, r0
 8004c7a:	4614      	mov	r4, r2
 8004c7c:	460e      	mov	r6, r1
 8004c7e:	b921      	cbnz	r1, 8004c8a <_realloc_r+0x16>
 8004c80:	4611      	mov	r1, r2
 8004c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c86:	f7ff bbd7 	b.w	8004438 <_malloc_r>
 8004c8a:	b92a      	cbnz	r2, 8004c98 <_realloc_r+0x24>
 8004c8c:	f7ff fb6c 	bl	8004368 <_free_r>
 8004c90:	4625      	mov	r5, r4
 8004c92:	4628      	mov	r0, r5
 8004c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c98:	f000 f81b 	bl	8004cd2 <_malloc_usable_size_r>
 8004c9c:	4284      	cmp	r4, r0
 8004c9e:	4607      	mov	r7, r0
 8004ca0:	d802      	bhi.n	8004ca8 <_realloc_r+0x34>
 8004ca2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ca6:	d812      	bhi.n	8004cce <_realloc_r+0x5a>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4640      	mov	r0, r8
 8004cac:	f7ff fbc4 	bl	8004438 <_malloc_r>
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d0ed      	beq.n	8004c92 <_realloc_r+0x1e>
 8004cb6:	42bc      	cmp	r4, r7
 8004cb8:	4622      	mov	r2, r4
 8004cba:	4631      	mov	r1, r6
 8004cbc:	bf28      	it	cs
 8004cbe:	463a      	movcs	r2, r7
 8004cc0:	f7ff ffb0 	bl	8004c24 <memcpy>
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7ff fb4e 	bl	8004368 <_free_r>
 8004ccc:	e7e1      	b.n	8004c92 <_realloc_r+0x1e>
 8004cce:	4635      	mov	r5, r6
 8004cd0:	e7df      	b.n	8004c92 <_realloc_r+0x1e>

08004cd2 <_malloc_usable_size_r>:
 8004cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd6:	1f18      	subs	r0, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bfbc      	itt	lt
 8004cdc:	580b      	ldrlt	r3, [r1, r0]
 8004cde:	18c0      	addlt	r0, r0, r3
 8004ce0:	4770      	bx	lr
	...

08004ce4 <_init>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr

08004cf0 <_fini>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr
